import React from 'react';

var warnUser = function warnUser(prop) {
  console.group('%c @spyna/react-store ', 'background: #fcc; color: #333');
  console.error('Sorry, you can\'t modify the [' + prop + '] property this way.');
  console.groupEnd();
};

var storeHandler = {
  set: function set(obj, prop, value) {
    warnUser(prop);
    return true;
  },
  deleteProperty: function deleteProperty(target, prop) {
    warnUser(prop);
    return true;
  }
};

var defaultConfig = {
  listener: function listener() {},
  proxyStore: true
};

var StoreContext = React.createContext();

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var rawStore = void 0;
/**
 * @param {ReactElement} WrappedComponent the component to connect with the store
 * @param {Object} initialValue the initial store value or nothing
 * @param {Object} config the custom configuration. If nothing is passed will use the default config
 */
var createStore = function createStore(WrappedComponent, initialValue) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultConfig;

  var userConfig = Object.freeze(_extends({}, defaultConfig, config));

  var listener = userConfig.listener,
      proxyStore = userConfig.proxyStore;


  return function (_React$Component) {
    inherits(_class2, _React$Component);

    function _class2(props) {
      classCallCheck(this, _class2);

      var _this = possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, props));

      _this.updateState = function (state) {
        return new Promise(function (resolve) {
          _this.setState({ storage: state });
          resolve(state);
          listener(state);
        });
      };

      _this.state = { storage: _extends({}, initialValue) };
      return _this;
    }

    createClass(_class2, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this2 = this;

        var store = {
          get: function get$$1(key, defaultValue) {
            var value = _this2.state.storage[key];
            if (value === undefined) {
              value = defaultValue;
            }
            return value;
          },
          set: function set$$1(key, value) {
            var storage = _this2.state.storage;

            storage[key] = value;
            return _this2.updateState(storage);
          },
          setAll: function setAll() {
            for (var _len = arguments.length, arrayOfEntris = Array(_len), _key = 0; _key < _len; _key++) {
              arrayOfEntris[_key] = arguments[_key];
            }

            var storage = _this2.state.storage;

            arrayOfEntris.forEach(function (entry) {
              var key = entry.key,
                  value = entry.value;

              storage[key] = value;
            });
            return _this2.updateState(storage);
          },
          remove: function remove(key) {
            var storage = _this2.state.storage;

            delete storage[key];
            return _this2.updateState(storage);
          },
          getState: function getState() {
            return Object.assign({}, _this2.state.storage);
          }
        };
        if (proxyStore) {
          store = new Proxy(store, storeHandler);
        }
        this.setState({ store: store });
        rawStore = store;
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          StoreContext.Provider,
          { value: { store: this.state.store } },
          React.createElement(WrappedComponent, this.props)
        );
      }
    }]);
    return _class2;
  }(React.Component);
};

/**
 *
 * @param {ReactElement} WrappedComponent the component will be connected with the store
 * @param {Array<String>} keys the keys of the data in the store to set as WrappedComponent props.
 */
var withStore = function withStore(WrappedComponent) {
  var _class, _temp;

  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  return _temp = _class = function (_React$PureComponent) {
    inherits(_class, _React$PureComponent);

    function _class() {
      classCallCheck(this, _class);
      return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    createClass(_class, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        return React.createElement(
          StoreContext.Consumer,
          null,
          function (context) {
            var store = context.store;

            var storeData = {};
            keys.forEach(function (key) {
              storeData[key] = store.get(key);
            });
            return React.createElement(WrappedComponent, _extends({ store: store }, _this2.props, storeData));
          }
        );
      }
    }]);
    return _class;
  }(React.PureComponent), _class.displayName = 'withStore(' + (WrappedComponent.displayName || WrappedComponent.name) + ')', _class.WrappedComponent = WrappedComponent, _temp;
};

export { createStore, withStore, rawStore as store };
//# sourceMappingURL=index.es.js.map
