"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockchair = exports.broadcastTransaction = void 0;
const axios_1 = __importDefault(require("axios"));
const utxo_1 = require("../../lib/utxo");
const timeout_1 = require("./timeout");
const fetchUTXO = (network) => async (txHash, vOut) => {
    const url = `https://api.blockchair.com/${network}/dashboards/transaction/${txHash}`;
    const response = (await axios_1.default.get(`${url}`, { timeout: timeout_1.DEFAULT_TIMEOUT })).data;
    if (!response.data[txHash]) {
        throw new Error(`Transaction not found.`);
    }
    const tx = response.data[txHash];
    const txBlock = tx.transaction.block_id;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios_1.default.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    const confirmations = txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0);
    return {
        txHash,
        vOut,
        amount: tx.outputs[vOut].value,
        confirmations,
    };
};
const fetchConfirmations = (network) => async (txHash) => {
    const url = `https://api.blockchair.com/${network}/dashboards/transaction/${txHash}`;
    const response = (await axios_1.default.get(`${url}`, { timeout: timeout_1.DEFAULT_TIMEOUT })).data;
    if (!response.data[txHash]) {
        throw new Error(`Transaction not found.`);
    }
    const txBlock = response.data[txHash].transaction.block_id;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios_1.default.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    return txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0);
};
const fetchUTXOs = (network) => async (address, confirmations) => {
    const url = `https://api.blockchair.com/${network}/dashboards/address/${address}?limit=0,100`;
    const response = (await axios_1.default.get(url, { timeout: timeout_1.DEFAULT_TIMEOUT })).data;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios_1.default.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    return response.data[address].utxo.map(utxo => ({
        txHash: utxo.transaction_hash,
        amount: utxo.value,
        vOut: utxo.index,
        confirmations: utxo.block_id === -1 ? 0 : latestBlock - utxo.block_id + 1,
    }))
        .filter(utxo => confirmations === 0 || utxo.confirmations >= confirmations)
        .sort(utxo_1.sortUTXOs);
};
exports.broadcastTransaction = (network) => async (txHex) => {
    const url = `https://api.blockchair.com/${network}/push/transaction`;
    const response = await axios_1.default.post(url, { data: txHex }, { timeout: timeout_1.DEFAULT_TIMEOUT });
    if (response.data.error) {
        throw new Error(response.data.error);
    }
    return response.data.data.transaction_hash;
};
var Networks;
(function (Networks) {
    Networks["BITCOIN"] = "bitcoin";
    Networks["BITCOIN_CASH"] = "bitcoin-cash";
    Networks["LITECOIN"] = "litecoin";
    Networks["BITCOIN_SV"] = "bitcoin-sv";
    Networks["DOGECOIN"] = "dogecoin";
    Networks["DASH"] = "dash";
    Networks["GROESTLCOIN"] = "groestlcoin";
    Networks["BITCOIN_TESTNET"] = "bitcoin/testnet";
})(Networks || (Networks = {}));
exports.Blockchair = {
    networks: Networks,
    fetchUTXO,
    fetchUTXOs,
    fetchConfirmations,
    broadcastTransaction: exports.broadcastTransaction,
};
;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tjaGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXBpcy9ibG9ja2NoYWlyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQix5Q0FBaUQ7QUFDakQsdUNBQTRDO0FBRTVDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBaUIsRUFBRTtJQUN6RixNQUFNLEdBQUcsR0FBRyw4QkFBOEIsT0FBTywyQkFBMkIsTUFBTSxFQUFFLENBQUM7SUFFckYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQXNCLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFckcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUV4QyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN6QyxJQUFJLFdBQVcsS0FBSyxDQUFDLEVBQUU7UUFDbkIsTUFBTSxRQUFRLEdBQUcsOEJBQThCLE9BQU8sUUFBUSxDQUFDO1FBQy9ELE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZELFdBQVcsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENB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