"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Insight = exports.broadcastTransaction = void 0;
const axios_1 = __importDefault(require("axios"));
const https_1 = __importDefault(require("https"));
const utxo_1 = require("../../lib/utxo");
const timeout_1 = require("./timeout");
const fetchUTXOs = (insightURL) => async (address, confirmations) => {
    const url = `${insightURL.replace(/\/$/, "")}/addr/${address}/utxo`;
    const response = await axios_1.default.get(url, {
        // TODO: Remove when certificate is fixed.
        httpsAgent: new https_1.default.Agent({
            rejectUnauthorized: false
        }),
        timeout: timeout_1.DEFAULT_TIMEOUT,
    });
    const data = typeof response.data === "string" ? JSON.parse(response.data) : response.data;
    return data.map(utxo => ({
        txHash: utxo.txid,
        amount: utxo.satoshis || utxo_1.fixValue(utxo.amount, 8),
        // script_hex: utxo.scriptPubKey,
        vOut: utxo.vout,
        confirmations: utxo.confirmations,
    }))
        .filter(utxo => confirmations === 0 || utxo.confirmations >= confirmations)
        .sort(utxo_1.sortUTXOs);
};
const fetchConfirmations = (insightURL) => async (txHash) => {
    const url = `${insightURL.replace(/\/$/, "")}/tx/${txHash}`;
    const response = await axios_1.default.get(url, { timeout: timeout_1.DEFAULT_TIMEOUT });
    return response.data.confirmations;
};
const fetchUTXO = (insightURL) => async (txHash, vOut) => {
    const url = `${insightURL.replace(/\/$/, "")}/tx/${txHash}`;
    const tx = (await axios_1.default.get(url, { timeout: timeout_1.DEFAULT_TIMEOUT })).data;
    return utxo_1.fixUTXO({
        txHash,
        amount: parseFloat(tx.vout[vOut].value),
        vOut,
        confirmations: tx.confirmations,
    }, 8);
};
exports.broadcastTransaction = (insightURL) => async (txHex) => {
    const url = `${insightURL.replace(/\/$/, "")}/tx/send`;
    const response = await axios_1.default.post(url, { rawtx: txHex }, { timeout: timeout_1.DEFAULT_TIMEOUT });
    if (response.data.error) {
        throw new Error(response.data.error);
    }
    return response.data.txid;
};
exports.Insight = {
    fetchUTXO,
    fetchUTXOs,
    fetchConfirmations,
    broadcastTransaction: exports.broadcastTransaction,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXBpcy9pbnNpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQixrREFBMEI7QUFFMUIseUNBQW9FO0FBQ3BFLHVDQUE0QztBQWE1QyxNQUFNLFVBQVUsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFlLEVBQUUsYUFBcUIsRUFBNEIsRUFBRTtJQUNsSCxNQUFNLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxTQUFTLE9BQU8sT0FBTyxDQUFDO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBa0IsR0FBRyxFQUFFO1FBQ25ELDBDQUEwQztRQUMxQyxVQUFVLEVBQUUsSUFBSSxlQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3hCLGtCQUFrQixFQUFFLEtBQUs7U0FDNUIsQ0FBQztRQUNGLE9BQU8sRUFBRSx5QkFBZTtLQUMzQixDQUFDLENBQUM7SUFFSCxNQUFNLElBQUksR0FBb0IsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFFNUcsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksZUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELGlDQUFpQztRQUNqQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDZixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7S0FDcEMsQ0FBQyxDQUFDO1NBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQztTQUMxRSxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQTJERixNQUFNLGtCQUFrQixHQUFHLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQWMsRUFBbUIsRUFBRTtJQUN6RixNQUFNLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLE1BQU0sRUFBRSxDQUFDO0lBQzVELE1BQU0sUUFBUSxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBYSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQWUsRUFBRSxDQUFDLENBQUM7SUFDaEYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFpQixFQUFFO0lBQzVGLE1BQU0sR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sTUFBTSxFQUFFLENBQUM7SUFDNUQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQWEsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pGLE9BQU8sY0FBTyxDQUFDO1FBQ1gsTUFBTTtRQUNOLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSTtRQUNKLGFBQWEsRUFBRSxFQUFFLENBQUMsYUFBYTtLQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDO0FBRVcsUUFBQSxvQkFBb0IsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFhLEVBQW1CLEVBQUU7SUFDakcsTUFBTSxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sZUFBSyxDQUFDLElBQUksQ0FDN0IsR0FBRyxFQUNILEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUNoQixFQUFFLE9BQU8sRUFBRSx5QkFBZSxFQUFFLENBQy9CLENBQUM7SUFDRixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4QztJQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxPQUFPLEdBQUc7SUFDbkIsU0FBUztJQUNULFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsb0JBQW9CLEVBQXBCLDRCQUFvQjtDQUN2QixDQUFBIn0=