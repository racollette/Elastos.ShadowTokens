"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUTXO = exports.getConfirmations = exports.getUTXOs = exports.ZECHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const insight_1 = require("../../common/apis/insight");
const sochain_1 = require("../../common/apis/sochain");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
var InsightEndpoints;
(function (InsightEndpoints) {
    InsightEndpoints["TestnetZCash"] = "https://explorer.testnet.z.cash/api/";
    InsightEndpoints["ZCash"] = "https://explorer.z.cash/api/";
    InsightEndpoints["ZecChain"] = "https://zechain.net/api/v1/";
    InsightEndpoints["BlockExplorer"] = "https://zcash.blockexplorer.com/api/";
    InsightEndpoints["ZecBlockExplorer"] = "https://zecblockexplorer.com/api/";
})(InsightEndpoints || (InsightEndpoints = {}));
exports._apiFallbacks = {
    fetchConfirmations: (testnet, txHash) => testnet ?
        [
            () => insight_1.Insight.fetchConfirmations(InsightEndpoints.TestnetZCash)(txHash),
        ] : [
        () => insight_1.Insight.fetchConfirmations(InsightEndpoints.ZCash)(txHash),
        () => insight_1.Insight.fetchConfirmations(InsightEndpoints.ZecChain)(txHash),
        () => insight_1.Insight.fetchConfirmations(InsightEndpoints.BlockExplorer)(txHash),
        () => insight_1.Insight.fetchConfirmations(InsightEndpoints.ZecBlockExplorer)(txHash),
    ],
    fetchUTXO: (testnet, txHash, vOut) => testnet ?
        [
            () => insight_1.Insight.fetchUTXO(InsightEndpoints.TestnetZCash)(txHash, vOut),
        ] : [
        () => insight_1.Insight.fetchUTXO(InsightEndpoints.ZCash)(txHash, vOut),
        () => insight_1.Insight.fetchUTXO(InsightEndpoints.ZecChain)(txHash, vOut),
        () => insight_1.Insight.fetchUTXO(InsightEndpoints.BlockExplorer)(txHash, vOut),
        () => insight_1.Insight.fetchUTXO(InsightEndpoints.ZecBlockExplorer)(txHash, vOut),
    ],
    fetchUTXOs: (testnet, address, confirmations) => testnet ? [
        () => insight_1.Insight.fetchUTXOs(InsightEndpoints.TestnetZCash)(address, confirmations),
        () => sochain_1.Sochain.fetchUTXOs("ZECTEST")(address, confirmations),
    ] : [
        ...utils_1.shuffleArray([
            () => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZCash)(address, confirmations),
            () => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZecChain)(address, confirmations),
            // () => Insight.fetchUTXOs(InsightEndpoints.BlockExplorer)(address, confirmations),
            () => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZecBlockExplorer)(address, confirmations),
        ]),
        () => sochain_1.Sochain.fetchUTXOs("ZEC")(address, confirmations),
    ],
    broadcastTransaction: (testnet, hex) => testnet ?
        [
            () => insight_1.Insight.broadcastTransaction(InsightEndpoints.TestnetZCash)(hex),
            () => sochain_1.Sochain.broadcastTransaction("ZECTEST")(hex),
        ] : [
        () => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZCash)(hex),
        () => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZecChain)(hex),
        () => insight_1.Insight.broadcastTransaction(InsightEndpoints.BlockExplorer)(hex),
        () => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZecBlockExplorer)(hex),
        () => sochain_1.Sochain.broadcastTransaction("ZEC")(hex),
    ],
};
class ZECHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" && ["ZEC", "ZCASH"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await exports.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: options && options.address || await this.address(asset) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await exports.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress }))).sortBy(utxo => utxo.amount).reverse().toArray();
                if (this.testnet) {
                    // tslint:disable-next-line: no-object-mutation
                    bitcoin.networks.zcashTest.consensusBranchId["4"] = 0xf5b9230b;
                }
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this.testnet ? bitcoin.networks.zcashTest : bitcoin.networks.zcash, this.privateKey, changeAddress, to, valueIn, utxos, Object.assign(Object.assign({}, options), { version: 4, versionGroupID: this.testnet ? 0xf5b9230b : 0x892F2085 }));
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit('transactionHash', txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => { errored = true; promiEvent.reject(error); });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => txHash ? this._getConfirmations(txHash) : 0);
            return promiEvent;
        };
        this._getConfirmations = (txHash) => retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.fetchConfirmations(this.testnet, txHash)), 2);
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.zcashTest : bitcoin.networks.zcash, privateKey);
    }
}
exports.ZECHandler = ZECHandler;
exports.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined ? options.confirmations : 0;
    return retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations)), 2);
};
exports.getConfirmations = async (testnet, txHash) => {
    const endpoints = exports._apiFallbacks.fetchConfirmations(testnet, txHash);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
exports.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,