"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ETHHandler = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const promiEvent_1 = require("../../lib/promiEvent");
const ethUtils_1 = require("./ethUtils");
class ETHHandler {
    constructor(privateKey, network, options, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" && ["ETH", "ETHER", "ETHEREUM"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.unlockedAddress;
        // (await this.sharedState.web3.eth.getAccounts())[0];
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            let atBlock;
            if (options && options.confirmations && options.confirmations > 0) {
                const currentBlock = new bignumber_js_1.default(await this.sharedState.web3.eth.getBlockNumber());
                atBlock = currentBlock.minus(options.confirmations).plus(1).toNumber();
            }
            const address = options && options.address || await this.address(asset);
            return new bignumber_js_1.default(await this.sharedState.web3.eth.getBalance(address, atBlock));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, optionsIn) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const options = optionsIn || {};
                let value = valueIn;
                const txOptions = ethUtils_1.getTransactionConfig(options);
                if (options.subtractFee) {
                    const gasPrice = txOptions.gasPrice || await this.sharedState.web3.eth.getGasPrice();
                    const gasLimit = txOptions.gas || 21000;
                    const fee = new bignumber_js_1.default(gasPrice.toString()).times(gasLimit);
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const web3PromiEvent = this.sharedState.web3.eth.sendTransaction(Object.assign(Object.assign({ from: await this.address(asset), gas: 21000 }, txOptions), { to, value: value.toFixed() }));
                promiEvent_1.forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.network = ethUtils_1.getNetwork(network);
        this.privateKey = privateKey;
        const [web3, address] = ethUtils_1.getWeb3(this.privateKey, ethUtils_1.getEndpoint(this.network, options && options.ethereumNode, options && options.infuraKey));
        this.unlockedAddress = address;
        sharedState.web3 = web3;
        this.sharedState = sharedState;
    }
}
exports.ETHHandler = ETHHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVRISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9FVEgvRVRISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFJckMscURBQWdGO0FBRWhGLHlDQUFvRjtBQWtCcEYsTUFBYSxVQUFVO0lBWW5CLFlBQVksVUFBa0IsRUFBRSxPQUFlLEVBQUUsT0FBNEIsRUFBRSxXQUFpQjtRQVIvRSxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBaUIvQixtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFLENBQ3JELE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxGLFlBQU8sR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLE9BQXdCLEVBQW1CLEVBQUUsQ0FDeEYsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN6QixzREFBc0Q7UUFFdEQsVUFBVTtRQUNNLGVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLE9BQXdCLEVBQXNCLEVBQUUsQ0FDOUYsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ25ELElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUNuRCxDQUFDO1FBRVUscUJBQWdCLEdBQUcsS0FBSyxFQUFFLEtBQVksRUFBRSxPQUF3QixFQUFzQixFQUFFO1lBQ3BHLElBQUksT0FBTyxDQUFDO1lBQ1osSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRTtnQkFD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