"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20Handler = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const promiEvent_1 = require("../../lib/promiEvent");
const ethUtils_1 = require("../ETH/ethUtils");
const ERC20ABI_1 = require("./ERC20ABI");
const ERC20s_1 = require("./ERC20s");
const resolveAsset = (network, assetIn) => {
    if (typeof assetIn !== "object") {
        throw new Error("");
    }
    const asset = assetIn;
    if (asset.address) {
        return Object.assign(Object.assign({}, asset), { address: asset.address });
    }
    else {
        const address = (ERC20s_1.ERC20s[network] || {})[asset.name || ""];
        if (!address) {
            throw new Error(`Unknown ERC20 token ${asset.name || JSON.stringify(asset)}`);
        }
        return Object.assign(Object.assign({}, asset), { address });
    }
};
class ERC20Handler {
    constructor(_privateKey, network, _options, sharedState) {
        this._decimals = {};
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => {
            return typeof asset === "object" && asset.hasOwnProperty("type") && asset.type === "ERC20" && (asset.hasOwnProperty("address") || asset.hasOwnProperty("name"));
        };
        // Address
        this.address = async (asset, options, deferHandler) => deferHandler.address("ETH", options);
        // Balance
        this.getBalance = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const decimals = await this.decimals(asset);
            return (await this.getBalanceInSats(asset, options, deferHandler)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(decimals));
        };
        this.getBalanceInSats = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const address = options && options.address || deferHandler && await deferHandler.address("ETH", options) || "";
            return new bignumber_js_1.default(await this.getContract(asset).methods.balanceOf(address).call());
        };
        // Transfer
        this.send = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve ? contract.methods.approve : contract.methods.transfer;
                const call = method(to, valueIn.times(new bignumber_js_1.default(10).exponentiatedBy(await this.decimals(asset))).toFixed());
                const config = Object.assign({ from: await deferHandler.address("ETH") }, (ethUtils_1.getTransactionConfig(options)));
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                promiEvent_1.forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.sendSats = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve ? contract.methods.approve : contract.methods.transfer;
                const call = method(to, valueIn.toFixed());
                const config = Object.assign({ from: await deferHandler.address("ETH") }, (ethUtils_1.getTransactionConfig(options)));
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                promiEvent_1.forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.getContract = (asset) => {
            return new this.sharedState.web3.eth.Contract(ERC20ABI_1.ERC20ABI, resolveAsset(this.network, asset).address);
        };
        this.decimals = async (asset) => {
            const address = resolveAsset(this.network, asset).address;
            if (this._decimals[address]) {
                return this._decimals[address];
            }
            return this.getContract(asset).methods.decimals().call();
        };
        this.network = ethUtils_1.getNetwork(network);
        this.sharedState = sharedState;
    }
}
exports.ERC20Handler = ERC20Handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVJDMjBIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hhbmRsZXJzL0VSQzIwL0VSQzIwSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFJckMscURBQWdGO0FBRWhGLDhDQUFtRTtBQUNuRSx5Q0FBc0M7QUFDdEMscUNBQWtDO0FBV2xDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWMsRUFBdUIsRUFBRTtJQUMxRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0lBQ0QsTUFBTSxLQUFLLEdBQUcsT0FBOEMsQ0FBQTtJQUM1RCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDZix1Q0FBWSxLQUFLLEtBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLElBQUc7S0FDL0M7U0FBTTtRQUNILE1BQU0sT0FBTyxHQUFHLENBQUUsZUFBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakY7UUFDRCx1Q0FBWSxLQUFLLEtBQUUsT0FBTyxJQUFHO0tBQ2hDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBYSxZQUFZO0lBT3JCLFlBQVksV0FBbUIsRUFBRSxPQUFlLEVBQUUsUUFBNkIsRUFBRSxXQUFpQjtRQUYxRixjQUFTLEdBQWtDLEVBQUUsQ0FBQztRQU90RCxtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFO1lBQ3JELE9BQU8s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