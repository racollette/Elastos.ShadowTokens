"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUTXO = exports.getConfirmations = exports.getUTXOs = exports.BTCHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const blockchair_1 = require("../../common/apis/blockchair");
const blockstream_1 = require("../../common/apis/blockstream");
const sochain_1 = require("../../common/apis/sochain");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
exports._apiFallbacks = {
    fetchConfirmations: (testnet, txHash) => [
        ...utils_1.shuffleArray([
            () => blockstream_1.Blockstream.fetchConfirmations(testnet)(txHash),
            () => blockchair_1.Blockchair.fetchConfirmations(testnet ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET : blockchair_1.Blockchair.networks.BITCOIN)(txHash),
        ]),
    ],
    fetchUTXO: (testnet, txHash, vOut) => [
        ...utils_1.shuffleArray([
            () => blockstream_1.Blockstream.fetchUTXO(testnet)(txHash, vOut),
            () => blockchair_1.Blockchair.fetchUTXO(testnet ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET : blockchair_1.Blockchair.networks.BITCOIN)(txHash, vOut),
        ]),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        ...utils_1.shuffleArray([
            () => blockstream_1.Blockstream.fetchUTXOs(testnet)(address, confirmations),
            () => blockchair_1.Blockchair.fetchUTXOs(testnet ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET : blockchair_1.Blockchair.networks.BITCOIN)(address, confirmations),
        ]),
        () => sochain_1.Sochain.fetchUTXOs(testnet ? "BTCTEST" : "BTC")(address, confirmations),
    ],
    broadcastTransaction: (testnet, hex) => [
        ...utils_1.shuffleArray([
            () => blockstream_1.Blockstream.broadcastTransaction(testnet)(hex),
            () => blockchair_1.Blockchair.broadcastTransaction(testnet ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET : blockchair_1.Blockchair.networks.BITCOIN)(hex),
        ]),
        () => sochain_1.Sochain.broadcastTransaction(testnet ? "BTCTEST" : "BTC")(hex),
    ],
};
class BTCHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" && ["BTC", "BITCOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await exports.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: options && options.address || await this.address(asset) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await exports.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress }))).sortBy(utxo => utxo.amount).reverse().toArray();
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this.testnet ? bitcoin.networks.testnet : bitcoin.networks.bitcoin, this.privateKey, changeAddress, to, valueIn, utxos, options);
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit('transactionHash', txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => { errored = true; promiEvent.reject(error); });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => txHash ? this._getConfirmations(txHash) : 0);
            return promiEvent;
        };
        this._getConfirmations = (txHash) => retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.fetchConfirmations(this.testnet, txHash)), 2);
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.testnet : bitcoin.networks.bitcoin, privateKey);
    }
}
exports.BTCHandler = BTCHandler;
exports.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined ? options.confirmations : 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
exports.getConfirmations = async (testnet, txHash) => {
    const endpoints = exports._apiFallbacks.fetchConfirmations(testnet, txHash);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
exports.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlRDSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9CVEMvQlRDSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQTBDO0FBRTFDLGdFQUFxQztBQUNyQyx5Q0FBaUM7QUFFakMsNkRBQTBEO0FBQzFELCtEQUE0RDtBQUM1RCx1REFBb0Q7QUFDcEQsc0VBQW1FO0FBQ25FLDJEQUFtRTtBQUNuRSxxREFBaUU7QUFDakUsMkNBQXdEO0FBQ3hELDJDQUErQztBQWNsQyxRQUFBLGFBQWEsR0FBRztJQUN6QixrQkFBa0IsRUFBRSxDQUFDLE9BQWdCLEVBQUUsTUFBYyxFQUFFLEVBQUUsQ0FBQztRQUN0RCxHQUFHLG9CQUFZLENBQUM7WUFDWixHQUFHLEVBQUUsQ0FBQyx5QkFBVyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNyRCxHQUFHLEVBQUUsQ0FBQyx1QkFBVSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUJBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyx1QkFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDM0gsQ0FBQztLQUNMO0lBRUQsU0FBUyxFQUFFLENBQUMsT0FBZ0IsRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQztRQUMzRCxHQUFHLG9CQUFZLENBQUM7WUFDWixHQUFHLEVBQUUsQ0FBQyx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1lBQ2xELEdBQUcsRUFBRSxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUJBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyx1QkFBVSxD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