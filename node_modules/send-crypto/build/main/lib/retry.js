"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryNTimes = exports.fallback = exports.extractError = exports.sleep = void 0;
exports.sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
exports.extractError = (error) => {
    if (typeof error === "object") {
        if (error.response && error.response.request && error.response.request.statusText) {
            return exports.extractError(error.response.request.statusText);
        }
        if (error.response) {
            return exports.extractError(error.response);
        }
        if (error.error) {
            return exports.extractError(error.error);
        }
        if (error.message) {
            return exports.extractError(error.message);
        }
        if (error.data) {
            return exports.extractError(error.data);
        }
        if (error.statusText) {
            return exports.extractError(error.statusText);
        }
        try {
            return JSON.stringify(error);
        }
        catch (error) {
            // Ignore JSON error
        }
    }
    return String(error);
};
exports.fallback = async (fallbacks) => {
    let firstError;
    for (const fn of fallbacks) {
        if (!fn) {
            continue;
        }
        try {
            return await fn();
        }
        catch (error) {
            firstError = firstError || error;
        }
    }
    throw (firstError || new Error("No result returned"));
};
exports.retryNTimes = async (fnCall, retries) => {
    let returnError;
    for (let i = 0; i < retries; i++) {
        // if (i > 0) {
        //     console.debug(`Retrying...`);
        // }
        try {
            return await fnCall();
        }
        catch (error) {
            if (String(error).match(/timeout of .* exceeded/)) {
                returnError = error;
            }
            else {
                const errorMessage = exports.extractError(error);
                if (errorMessage) {
                    // tslint:disable-next-line: no-object-mutation
                    error.message += ` (${errorMessage})`;
                }
                throw error;
            }
        }
        await exports.sleep(500);
    }
    throw returnError;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3JldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsS0FBSyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV4RSxRQUFBLFlBQVksR0FBRyxDQUFDLEtBQVUsRUFBVSxFQUFFO0lBQy9DLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FBRTtRQUM5SSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQUU7UUFDNUQsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO1FBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUFFLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FBRTtRQUMxRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7UUFDcEQsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQUUsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUFFO1FBQ2hFLElBQUk7WUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLG9CQUFvQjtTQUN2QjtLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxRQUFRLEdBQUcsS0FBSyxFQUFLLFNBQWdELEVBQWMsRUFBRTtJQUM5RixJQUFJLFVBQTZCLENBQUM7SUFDbEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxTQUFTLEVBQUU7UUFDeEIsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUFFLFNBQVM7U0FBRTtRQUN0QixJQUFJO1lBQ0EsT0FBTyxNQUFNLEVBQUUsRUFBRSxDQUFDO1NBQ3JCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixVQUFVLEdBQUcsVUFBVSxJQUFJLEtBQUssQ0FBQztTQUNwQztLQUNKO0lBQ0QsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsS0FBSyxFQUFLLE1BQXdCLEVBQUUsT0FBZSxFQUFFLEVBQUU7SUFDOUUsSUFBSSxXQUFXLENBQUM7SUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QixlQUFlO1FBQ2Ysb0NBQW9DO1FBQ3BDLElBQUk7UUFDSixJQUFJO1lBQ0EsT0FBTyxNQUFNLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsRUFBRTtnQkFDL0MsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUN2QjtpQkFBTTtnQkFDSCxNQUFNLFlBQVksR0FBRyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLFlBQVksRUFBRTtvQkFDZCwrQ0FBK0M7b0JBQy9DLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQztpQkFDekM7Z0JBQ0QsTUFBTSxLQUFLLENBQUM7YUFDZjtTQUNKO1FBQ0QsTUFBTSxhQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7SUFDRCxNQUFNLFdBQVcsQ0FBQztBQUN0QixDQUFDLENBQUMifQ==