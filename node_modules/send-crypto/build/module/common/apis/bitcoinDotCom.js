import axios from "axios";
import { fixUTXO, fixUTXOs, sortUTXOs } from "../../lib/utxo";
import { DEFAULT_TIMEOUT } from "./timeout";
const endpoint = (testnet) => testnet ? "https://trest.bitcoin.com/v2/" : "https://rest.bitcoin.com/v2/";
const fetchUTXO = (testnet) => async (txHash, vOut) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/transaction/details/${txHash}`;
    const response = await axios.get(`${url}`, { timeout: DEFAULT_TIMEOUT });
    const utxo = response.data;
    return fixUTXO({
        txHash,
        amount: parseFloat(utxo.vout[vOut].value),
        // script_hex: utxo.scriptPubKey,
        vOut,
        confirmations: utxo.confirmations,
    }, 8);
};
const fetchConfirmations = (testnet) => async (txHash) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/transaction/details/${txHash}`;
    const tx = (await axios.get(`${url}`, { timeout: DEFAULT_TIMEOUT })).data;
    return tx.confirmations;
};
const fetchUTXOs = (testnet) => async (address, confirmations) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/address/utxo/${address}`;
    const response = await axios.get(url, { timeout: DEFAULT_TIMEOUT });
    return fixUTXOs(response.data.utxos.map(utxo => ({
        txHash: utxo.txid,
        amount: utxo.amount,
        // script_hex: utxo.scriptPubKey,
        vOut: utxo.vout,
        confirmations: utxo.confirmations,
    }))
        .filter(utxo => confirmations === 0 || utxo.confirmations >= confirmations), 8)
        .sort(sortUTXOs);
};
export const broadcastTransaction = (testnet) => async (txHex) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/rawtransactions/sendRawTransaction`;
    const response = await axios.post(url, { "hexes": [txHex] }, { timeout: DEFAULT_TIMEOUT });
    if (response.data.error) {
        throw new Error(response.data.error);
    }
    return response.data[0];
};
export const BitcoinDotCom = {
    fetchUTXO,
    fetchUTXOs,
    fetchConfirmations,
    broadcastTransaction,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbkRvdENvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXBpcy9iaXRjb2luRG90Q29tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBWSxTQUFTLEVBQVEsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBcUQ1QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDO0FBRWxILE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQWlCLEVBQUU7SUFDMUYsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsd0JBQXdCLE1BQU0sRUFBRSxDQUFDO0lBRXBGLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBbUIsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBRTNGLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFFM0IsT0FBTyxPQUFPLENBQUM7UUFDWCxNQUFNO1FBQ04sTUFBTSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN6QyxpQ0FBaUM7UUFDakMsSUFBSTtRQUNKLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtLQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDO0FB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