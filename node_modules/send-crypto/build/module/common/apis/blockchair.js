import axios from "axios";
import { sortUTXOs } from "../../lib/utxo";
import { DEFAULT_TIMEOUT } from "./timeout";
const fetchUTXO = (network) => async (txHash, vOut) => {
    const url = `https://api.blockchair.com/${network}/dashboards/transaction/${txHash}`;
    const response = (await axios.get(`${url}`, { timeout: DEFAULT_TIMEOUT })).data;
    if (!response.data[txHash]) {
        throw new Error(`Transaction not found.`);
    }
    const tx = response.data[txHash];
    const txBlock = tx.transaction.block_id;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    const confirmations = txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0);
    return {
        txHash,
        vOut,
        amount: tx.outputs[vOut].value,
        confirmations,
    };
};
const fetchConfirmations = (network) => async (txHash) => {
    const url = `https://api.blockchair.com/${network}/dashboards/transaction/${txHash}`;
    const response = (await axios.get(`${url}`, { timeout: DEFAULT_TIMEOUT })).data;
    if (!response.data[txHash]) {
        throw new Error(`Transaction not found.`);
    }
    const txBlock = response.data[txHash].transaction.block_id;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    return txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0);
};
const fetchUTXOs = (network) => async (address, confirmations) => {
    const url = `https://api.blockchair.com/${network}/dashboards/address/${address}?limit=0,100`;
    const response = (await axios.get(url, { timeout: DEFAULT_TIMEOUT })).data;
    let latestBlock = response.context.state;
    if (latestBlock === 0) {
        const statsUrl = `https://api.blockchair.com/${network}/stats`;
        const statsResponse = (await axios.get(statsUrl)).data;
        latestBlock = statsResponse.data.blocks - 1;
    }
    return response.data[address].utxo.map(utxo => ({
        txHash: utxo.transaction_hash,
        amount: utxo.value,
        vOut: utxo.index,
        confirmations: utxo.block_id === -1 ? 0 : latestBlock - utxo.block_id + 1,
    }))
        .filter(utxo => confirmations === 0 || utxo.confirmations >= confirmations)
        .sort(sortUTXOs);
};
export const broadcastTransaction = (network) => async (txHex) => {
    const url = `https://api.blockchair.com/${network}/push/transaction`;
    const response = await axios.post(url, { data: txHex }, { timeout: DEFAULT_TIMEOUT });
    if (response.data.error) {
        throw new Error(response.data.error);
    }
    return response.data.data.transaction_hash;
};
var Networks;
(function (Networks) {
    Networks["BITCOIN"] = "bitcoin";
    Networks["BITCOIN_CASH"] = "bitcoin-cash";
    Networks["LITECOIN"] = "litecoin";
    Networks["BITCOIN_SV"] = "bitcoin-sv";
    Networks["DOGECOIN"] = "dogecoin";
    Networks["DASH"] = "dash";
    Networks["GROESTLCOIN"] = "groestlcoin";
    Networks["BITCOIN_TESTNET"] = "bitcoin/testnet";
})(Networks || (Networks = {}));
export const Blockchair = {
    networks: Networks,
    fetchUTXO,
    fetchUTXOs,
    fetchConfirmations,
    broadcastTransaction,
};
;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tjaGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXBpcy9ibG9ja2NoYWlyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQUUsU0FBUyxFQUFRLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU1QyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQWlCLEVBQUU7SUFDekYsTUFBTSxHQUFHLEdBQUcsOEJBQThCLE9BQU8sMkJBQTJCLE1BQU0sRUFBRSxDQUFDO0lBRXJGLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFzQixHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFckcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUV4QyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN6QyxJQUFJLFdBQVcsS0FBSyxDQUFDLEVBQUU7UUFDbkIsTUFBTSxRQUFRLEdBQUcsOEJBQThCLE9BQU8sUUFBUSxDQUFDO1FBQy9ELE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFD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