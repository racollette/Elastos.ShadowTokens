import BigNumber from "bignumber.js";
import { forwardEvents, newPromiEvent } from "../../lib/promiEvent";
import { getNetwork, getTransactionConfig } from "../ETH/ethUtils";
import { ERC20ABI } from "./ERC20ABI";
import { ERC20s } from "./ERC20s";
const resolveAsset = (network, assetIn) => {
    if (typeof assetIn !== "object") {
        throw new Error("");
    }
    const asset = assetIn;
    if (asset.address) {
        return { ...asset, address: asset.address };
    }
    else {
        const address = (ERC20s[network] || {})[asset.name || ""];
        if (!address) {
            throw new Error(`Unknown ERC20 token ${asset.name || JSON.stringify(asset)}`);
        }
        return { ...asset, address };
    }
};
export class ERC20Handler {
    constructor(_privateKey, network, _options, sharedState) {
        this._decimals = {};
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => {
            return typeof asset === "object" && asset.hasOwnProperty("type") && asset.type === "ERC20" && (asset.hasOwnProperty("address") || asset.hasOwnProperty("name"));
        };
        // Address
        this.address = async (asset, options, deferHandler) => deferHandler.address("ETH", options);
        // Balance
        this.getBalance = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const decimals = await this.decimals(asset);
            return (await this.getBalanceInSats(asset, options, deferHandler)).dividedBy(new BigNumber(10).exponentiatedBy(decimals));
        };
        this.getBalanceInSats = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const address = options && options.address || deferHandler && await deferHandler.address("ETH", options) || "";
            return new BigNumber(await this.getContract(asset).methods.balanceOf(address).call());
        };
        // Transfer
        this.send = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve ? contract.methods.approve : contract.methods.transfer;
                const call = method(to, valueIn.times(new BigNumber(10).exponentiatedBy(await this.decimals(asset))).toFixed());
                const config = {
                    from: await deferHandler.address("ETH"),
                    ...(getTransactionConfig(options)),
                };
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.sendSats = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve ? contract.methods.approve : contract.methods.transfer;
                const call = method(to, valueIn.toFixed());
                const config = {
                    from: await deferHandler.address("ETH"),
                    ...(getTransactionConfig(options)),
                };
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.getContract = (asset) => {
            return new this.sharedState.web3.eth.Contract(ERC20ABI, resolveAsset(this.network, asset).address);
        };
        this.decimals = async (asset) => {
            const address = resolveAsset(this.network, asset).address;
            if (this._decimals[address]) {
                return this._decimals[address];
            }
            return this.getContract(asset).methods.decimals().call();
        };
        this.network = getNetwork(network);
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVJDMjBIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hhbmRsZXJzL0VSQzIwL0VSQzIwSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFJckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRixPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBV2xDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWMsRUFBdUIsRUFBRTtJQUMxRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0lBQ0QsTUFBTSxLQUFLLEdBQUcsT0FBOEMsQ0FBQTtJQUM1RCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDZixPQUFPLEVBQUUsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUMvQztTQUFNO1FBQ0gsTUFBTSxPQUFPLEdBQUcsQ0FBRSxNQUFjLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqRjtRQUNELE9BQU8sRUFBRSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUs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