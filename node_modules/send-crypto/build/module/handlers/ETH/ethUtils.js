import Web3 from "web3";
export const getWeb3 = (privateKey, endpoint) => {
    // const provider = new HDWalletProvider(privateKey, endpoint);
    const web3 = new Web3(endpoint);
    const account = web3.eth.accounts.privateKeyToAccount('0x' + privateKey);
    web3.eth.accounts.wallet.add(account);
    // tslint:disable-next-line: no-object-mutation
    web3.eth.defaultAccount = account.address;
    // return new Web3(provider as any);
    return [web3, account.address];
};
// Free tier - only used as a fallback.
const defaultInfuraKey = "3b7a6c29f9c048d688a848899888aa96";
export const getEndpoint = (network, ethereumNode, infuraKey) => {
    return ethereumNode ? ethereumNode : `https://${network}.infura.io/v3/${infuraKey || defaultInfuraKey}`;
};
export var Network;
(function (Network) {
    Network["Mainnet"] = "mainnet";
    Network["Ropsten"] = "ropsten";
    Network["Kovan"] = "kovan";
    Network["Rinkeby"] = "rinkeby";
    Network["G\u00F6rli"] = "goerli";
})(Network || (Network = {}));
export const getNetwork = (network) => {
    switch (network.toLowerCase()) {
        case "mainnet":
        case "main":
            return Network.Mainnet;
        case "kovan":
            return Network.Kovan;
        case "rinkeby":
            return Network.Rinkeby;
        case "görli":
        case "goerli":
        case "gorli":
            return Network.Görli;
        case "ropsten":
        case "testnet":
        default:
            return Network.Ropsten;
    }
};
export const getTransactionConfig = (options) => {
    const txConfig = {};
    // tslint:disable: no-object-mutation
    if (options.from) {
        txConfig.from = options.from;
    }
    if (options.from) {
        txConfig.from = options.from;
    }
    // if (options.to) { txConfig.to = options.to; }
    if (options.gasPrice) {
        txConfig.gasPrice = options.gasPrice;
    }
    if (options.gas) {
        txConfig.gas = options.gas;
    }
    if (options.value) {
        txConfig.value = options.value;
    }
    if (options.data) {
        txConfig.data = options.data;
    }
    if (options.nonce) {
        txConfig.nonce = options.nonce;
    }
    // if (options.chainId) { txConfig.chainId = options.chainId; }
    // if (options.common) { txConfig.common = options.common; }
    // if (options.chain) { txConfig.chain = options.chain; }
    // if (options.hardfork) { txConfig.hardfork = options.hardfork; }
    return txConfig;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaGFuZGxlcnMvRVRIL2V0aFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUd4QixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxVQUFrQixFQUFFLFFBQWdCLEVBQWtCLEVBQUU7SUFDNUUsK0RBQStEO0lBQy9ELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQztJQUN6RSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLCtDQUErQztJQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzFDLG9DQUFvQztJQUNwQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUM7QUFFRix1Q0FBdUM7QUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxrQ0FBa0MsQ0FBQztBQUU1RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUEyQixFQUFFLFlBQWdDLEVBQUUsU0FBNkIsRUFBRSxFQUFFO0lBQ3hILE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsT0FBTyxpQkFBaUIsU0FBUyxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDNUcsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFOLElBQVksT0FNWDtBQU5ELFdBQVksT0FBTztJQUNmLDhCQUFtQixDQUFBO0lBQ25CLDhCQUFtQixDQUFBO0lBQ25CLDBCQUFlLENBQUE7SUFDZiw4QkFBbUIsQ0FBQTtJQUNuQixnQ0FBZ0IsQ0FBQTtBQUNwQixDQUFDLEVBTlcsT0FBTyxLQUFQLE9BQU8sUUFNbEI7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFlLEVBQVcsRUFBRTtJQUNuRCxRQUFRLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUMzQixLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssTUFBTTtZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUUzQixLQUFLLE9BQU87WUFDUixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFekIsS0FBSyxTQUFTO1lBQ1YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRTNCLEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE9BQU87WUFDUixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFekIsS0FBSyxTQUFTLENBQUM7UUFDZixLQUFLLFNBQVMsQ0FBQztRQUNmO1lBQ0ksT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO0tBQzlCO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBOEIsT0FBVSxFQUFxQixFQUFFO0lBQy9GLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztJQUN6QixxQ0FBcUM7SUFDckMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQUUsUUFBUSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0tBQUU7SUFDbkQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQUUsUUFBUSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0tBQUU7SUFDbkQsZ0RBQWdEO0lBQ2hELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUFFLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztLQUFFO0lBQy9ELElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtRQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztLQUFFO0lBQ2hELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUFFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUFFO0lBQ3RELElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtRQUFFLFFBQVEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztLQUFFO0lBQ25ELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUFFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUFFO0lBQ3RELCtEQUErRDtJQUMvRCw0REFBNEQ7SUFDNUQseURBQXlEO0lBQ3pELGtFQUFrRTtJQUNsRSxPQUFPLFFBQVEsQ0FBQTtBQUNuQixDQUFDLENBQUEifQ==