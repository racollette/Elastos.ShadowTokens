import BigNumber from "bignumber.js";
import { forwardEvents, newPromiEvent } from "../../lib/promiEvent";
import { getEndpoint, getNetwork, getTransactionConfig, getWeb3 } from "./ethUtils";
export class ETHHandler {
    constructor(privateKey, network, options, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" && ["ETH", "ETHER", "ETHEREUM"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.unlockedAddress;
        // (await this.sharedState.web3.eth.getAccounts())[0];
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            let atBlock;
            if (options && options.confirmations && options.confirmations > 0) {
                const currentBlock = new BigNumber(await this.sharedState.web3.eth.getBlockNumber());
                atBlock = currentBlock.minus(options.confirmations).plus(1).toNumber();
            }
            const address = options && options.address || await this.address(asset);
            return new BigNumber(await this.sharedState.web3.eth.getBalance(address, atBlock));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, optionsIn) => {
            const promiEvent = newPromiEvent();
            (async () => {
                const options = optionsIn || {};
                let value = valueIn;
                const txOptions = getTransactionConfig(options);
                if (options.subtractFee) {
                    const gasPrice = txOptions.gasPrice || await this.sharedState.web3.eth.getGasPrice();
                    const gasLimit = txOptions.gas || 21000;
                    const fee = new BigNumber(gasPrice.toString()).times(gasLimit);
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const web3PromiEvent = this.sharedState.web3.eth.sendTransaction({
                    from: await this.address(asset),
                    gas: 21000,
                    ...txOptions,
                    to,
                    value: value.toFixed(),
                });
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => { promiEvent.reject(error); });
            return promiEvent;
        };
        this.network = getNetwork(network);
        this.privateKey = privateKey;
        const [web3, address] = getWeb3(this.privateKey, getEndpoint(this.network, options && options.ethereumNode, options && options.infuraKey));
        this.unlockedAddress = address;
        sharedState.web3 = web3;
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVRISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9FVEgvRVRISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFJckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRixPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFrQnBGLE1BQU0sT0FBTyxVQUFVO0lBWW5CLFlBQVksVUFBa0IsRUFBRSxPQUFlLEVBQUUsT0FBNEIsRUFBRSxXQUFpQjtRQVIvRSxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBaUIvQixtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFLENBQ3JELE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxGLFlBQU8sR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLE9BQXdCLEVBQW1CLEVBQUUsQ0FDeEYsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN6QixzREFBc0Q7UUFFdEQsVUFBVTtRQUNNLGVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLE9BQXdCLEVBQXNCLEVBQUUsQ0FDOUYsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ25ELElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ25ELENBQUM7UUFFVSxxQkFBZ0IsR0FBRyxLQUFLLEVBQUUsS0FBWSxF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