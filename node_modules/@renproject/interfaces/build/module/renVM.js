export var RenNetwork;
(function (RenNetwork) {
    RenNetwork["Mainnet"] = "mainnet";
    RenNetwork["Chaosnet"] = "chaosnet";
    RenNetwork["Testnet"] = "testnet";
    RenNetwork["Devnet"] = "devnet";
    RenNetwork["Localnet"] = "localnet";
})(RenNetwork || (RenNetwork = {}));
export const RenNetworks = [RenNetwork.Mainnet, RenNetwork.Chaosnet, RenNetwork.Testnet, RenNetwork.Devnet, RenNetwork.Localnet];
export const isRenNetwork = (maybeRenNetwork) => // tslint:disable-line: no-any
 RenNetworks.indexOf(maybeRenNetwork) !== -1;
export var Chain;
(function (Chain) {
    Chain["Bitcoin"] = "Btc";
    Chain["Ethereum"] = "Eth";
    Chain["Zcash"] = "Zec";
    Chain["BitcoinCash"] = "Bch";
})(Chain || (Chain = {}));
export const Chains = [Chain.Bitcoin, Chain.Ethereum, Chain.Zcash, Chain.BitcoinCash];
export const isChain = (maybeChain) => // tslint:disable-line: no-any
 Chains.indexOf(maybeChain) !== -1;
export var Asset;
(function (Asset) {
    Asset["BTC"] = "BTC";
    Asset["ZEC"] = "ZEC";
    Asset["ETH"] = "ETH";
    Asset["BCH"] = "BCH";
})(Asset || (Asset = {}));
export const Assets = [Asset.BTC, Asset.ZEC, Asset.ETH, Asset.BCH];
export const isAsset = (maybeAsset) => // tslint:disable-line: no-any
 Assets.indexOf(maybeAsset) !== -1;
export var RenContract;
(function (RenContract) {
    RenContract["Btc2Eth"] = "BTC0Btc2Eth";
    RenContract["Eth2Btc"] = "BTC0Eth2Btc";
    RenContract["Zec2Eth"] = "ZEC0Zec2Eth";
    RenContract["Eth2Zec"] = "ZEC0Eth2Zec";
    RenContract["Bch2Eth"] = "BCH0Bch2Eth";
    RenContract["Eth2Bch"] = "BCH0Eth2Bch";
})(RenContract || (RenContract = {}));
export const RenContracts = [RenContract.Btc2Eth, RenContract.Eth2Btc, RenContract.Zec2Eth, RenContract.Eth2Zec, RenContract.Bch2Eth, RenContract.Eth2Bch];
export const isRenContract = (maybeRenContract) => // tslint:disable-line: no-any
 RenContracts.indexOf(maybeRenContract) !== -1;
export const Tokens = {
    // Bitcoin
    BTC: {
        Mint: RenContract.Btc2Eth,
        Btc2Eth: RenContract.Btc2Eth,
        Burn: RenContract.Eth2Btc,
        Eth2Btc: RenContract.Eth2Btc,
    },
    // Zcash
    ZEC: {
        Mint: RenContract.Zec2Eth,
        Zec2Eth: RenContract.Zec2Eth,
        Burn: RenContract.Eth2Zec,
        Eth2Zec: RenContract.Eth2Zec,
    },
    // Bitcoin Cash
    BCH: {
        Mint: RenContract.Bch2Eth,
        Bch2Eth: RenContract.Bch2Eth,
        Burn: RenContract.Eth2Bch,
        Eth2Bch: RenContract.Eth2Bch,
    },
};
export var RenVMType;
(function (RenVMType) {
    RenVMType["TypeAddress"] = "address";
    RenVMType["TypeStr"] = "str";
    RenVMType["TypeB32"] = "b32";
    RenVMType["TypeB"] = "b";
    RenVMType["TypeI8"] = "i8";
    RenVMType["TypeI16"] = "i16";
    RenVMType["TypeI32"] = "i32";
    RenVMType["TypeI64"] = "i64";
    RenVMType["TypeI128"] = "i128";
    RenVMType["TypeI256"] = "i256";
    RenVMType["TypeU8"] = "u8";
    RenVMType["TypeU16"] = "u16";
    RenVMType["TypeU32"] = "u32";
    RenVMType["TypeU64"] = "u64";
    RenVMType["TypeU128"] = "u128";
    RenVMType["TypeU256"] = "u256";
    RenVMType["TypeRecord"] = "record";
    RenVMType["TypeList"] = "list";
    // Ext
    RenVMType["ExtTypeEthCompatAddress"] = "ext_ethCompatAddress";
    RenVMType["ExtTypeBtcCompatUTXO"] = "ext_btcCompatUTXO";
    RenVMType["ExtTypeBtcCompatUTXOs"] = "ext_btcCompatUTXOs";
    RenVMType["ExtTypeEthCompatTx"] = "ext_ethCompatTx";
    RenVMType["ExtEthCompatPayload"] = "ext_ethCompatPayload";
})(RenVMType || (RenVMType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuVk0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVuVk0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNsQixpQ0FBbUIsQ0FBQTtJQUNuQixtQ0FBcUIsQ0FBQTtJQUNyQixpQ0FBbUIsQ0FBQTtJQUNuQiwrQkFBaUIsQ0FBQTtJQUNqQixtQ0FBcUIsQ0FBQTtBQUN6QixDQUFDLEVBTlcsVUFBVSxLQUFWLFVBQVUsUUFNckI7QUFDRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqSSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxlQUFvQixFQUFpQyxFQUFFLENBQUMsOEJBQThCO0NBQy9HLFdBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEQsTUFBTSxDQUFOLElBQVksS0FLWDtBQUxELFdBQVksS0FBSztJQUNiLHdCQUFlLENBQUE7SUFDZix5QkFBZ0IsQ0FBQTtJQUNoQixzQkFBYSxDQUFBO0lBQ2IsNEJBQW1CLENBQUE7QUFDdkIsQ0FBQyxFQUxXLEtBQUssS0FBTCxLQUFLLFFBS2hCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLFVBQWUsRUFBdUIsRUFBRSxDQUFDLDhCQUE4QjtDQUMzRixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFL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