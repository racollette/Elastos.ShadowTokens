export var LockAndMintStatus;
(function (LockAndMintStatus) {
    LockAndMintStatus["Committed"] = "mint_committed";
    LockAndMintStatus["Deposited"] = "mint_deposited";
    LockAndMintStatus["Confirmed"] = "mint_confirmed";
    LockAndMintStatus["SubmittedToRenVM"] = "mint_submittedToRenVM";
    LockAndMintStatus["ReturnedFromRenVM"] = "mint_returnedFromRenVM";
    LockAndMintStatus["SubmittedToEthereum"] = "mint_submittedToEthereum";
    LockAndMintStatus["ConfirmedOnEthereum"] = "mint_confirmedOnEthereum";
})(LockAndMintStatus || (LockAndMintStatus = {}));
export var BurnAndReleaseStatus;
(function (BurnAndReleaseStatus) {
    BurnAndReleaseStatus["Committed"] = "burn_committed";
    BurnAndReleaseStatus["SubmittedToEthereum"] = "burn_submittedToEthereum";
    BurnAndReleaseStatus["ConfirmedOnEthereum"] = "burn_confirmedOnEthereum";
    BurnAndReleaseStatus["SubmittedToRenVM"] = "burn_submittedToRenVM";
    BurnAndReleaseStatus["ReturnedFromRenVM"] = "burn_returnedFromRenVM";
    BurnAndReleaseStatus["NoBurnFound"] = "burn_noBurnFound";
})(BurnAndReleaseStatus || (BurnAndReleaseStatus = {}));
export var TxStatus;
(function (TxStatus) {
    // TxStatusNil is used for transactions that have not been seen, or are
    // otherwise unknown.
    TxStatus["TxStatusNil"] = "nil";
    // TxStatusConfirming is used for transactions that are currently waiting
    // for their underlying blockchain transactions to ne confirmed.
    TxStatus["TxStatusConfirming"] = "confirming";
    // TxStatusPending is used for transactions that are waiting for consensus
    // to be reached on when the transaction should be executed.
    TxStatus["TxStatusPending"] = "pending";
    // TxStatusExecuting is used for transactions that are currently being
    // executed.
    TxStatus["TxStatusExecuting"] = "executing";
    // TxStatusDone is used for transactions that have been successfully
    // executed.
    TxStatus["TxStatusDone"] = "done";
    // TxStatusReverted is used for transactions that were reverted during
    // execution.
    TxStatus["TxStatusReverted"] = "reverted";
})(TxStatus || (TxStatus = {}));
export var EventType;
(function (EventType) {
    EventType["LockAndMint"] = "lockAndMint";
    EventType["BurnAndRelease"] = "burnAndRelease";
})(EventType || (EventType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxDQUFOLElBQVksaUJBUVg7QUFSRCxXQUFZLGlCQUFpQjtJQUN6QixpREFBNEIsQ0FBQTtJQUM1QixpREFBNEIsQ0FBQTtJQUM1QixpREFBNEIsQ0FBQTtJQUM1QiwrREFBMEMsQ0FBQTtJQUMxQyxpRUFBNEMsQ0FBQTtJQUM1QyxxRUFBZ0QsQ0FBQTtJQUNoRCxxRUFBZ0QsQ0FBQTtBQUNwRCxDQUFDLEVBUlcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQVE1QjtBQUVELE1BQU0sQ0FBTixJQUFZLG9CQU9YO0FBUEQsV0FBWSxvQkFBb0I7SUFDNUIsb0RBQTRCLENBQUE7SUFDNUIsd0VBQWdELENBQUE7SUFDaEQsd0VBQWdELENBQUE7SUFDaEQsa0VBQTBDLENBQUE7SUFDMUMsb0VBQTRDLENBQUE7SUFDNUMsd0RBQWdDLENBQUE7QUFDcEMsQ0FBQyxFQVBXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFPL0I7QUFFRCxNQUFNLENBQU4sSUFBWSxRQW1CWDtBQW5CRCxXQUFZLFFBQVE7SUFDaEIsdUVBQXVFO0lBQ3ZFLHFCQUFxQjtJQUNyQiwrQkFBbUIsQ0FBQTtJQUNuQix5RUFBeUU7SUFDekUsZ0VBQWdFO0lBQ2hFLDZDQUFpQyxDQUFBO0lBQ2pDLDBFQUEwRTtJQUMxRSw0REFBNEQ7SUFDNUQsdUNBQTJCLENBQUE7SUFDM0Isc0VBQXNFO0lBQ3RFLFlBQVk7SUFDWiwyQ0FBK0IsQ0FBQTtJQUMvQixvRUFBb0U7SUFDcEUsWUFBWTtJQUNaLGlDQUFxQixDQUFBO0lBQ3JCLHNFQUFzRTtJQUN0RSxhQUFhO0lBQ2IseUNBQTZCLENBQUE7QUFDakMsQ0FBQyxFQW5CVyxRQUFRLEtBQVIsUUFBUSxRQW1CbkI7QUFpQkQsTUFBTSxDQUFOLElBQVksU0FHWDtBQUhELFdBQVksU0FBUztJQUNqQix3Q0FBMkIsQ0FBQTtJQUMzQiw4Q0FBaUMsQ0FBQTtBQUNyQyxDQUFDLEVBSFcsU0FBUyxLQUFULFNBQVMsUUFHcEIifQ==