"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RenNetwork;
(function (RenNetwork) {
    RenNetwork["Mainnet"] = "mainnet";
    RenNetwork["Chaosnet"] = "chaosnet";
    RenNetwork["Testnet"] = "testnet";
    RenNetwork["Devnet"] = "devnet";
    RenNetwork["Localnet"] = "localnet";
})(RenNetwork = exports.RenNetwork || (exports.RenNetwork = {}));
exports.RenNetworks = [RenNetwork.Mainnet, RenNetwork.Chaosnet, RenNetwork.Testnet, RenNetwork.Devnet, RenNetwork.Localnet];
exports.isRenNetwork = (maybeRenNetwork) => // tslint:disable-line: no-any
 exports.RenNetworks.indexOf(maybeRenNetwork) !== -1;
var Chain;
(function (Chain) {
    Chain["Bitcoin"] = "Btc";
    Chain["Ethereum"] = "Eth";
    Chain["Zcash"] = "Zec";
    Chain["BitcoinCash"] = "Bch";
})(Chain = exports.Chain || (exports.Chain = {}));
exports.Chains = [Chain.Bitcoin, Chain.Ethereum, Chain.Zcash, Chain.BitcoinCash];
exports.isChain = (maybeChain) => // tslint:disable-line: no-any
 exports.Chains.indexOf(maybeChain) !== -1;
var Asset;
(function (Asset) {
    Asset["BTC"] = "BTC";
    Asset["ZEC"] = "ZEC";
    Asset["ETH"] = "ETH";
    Asset["BCH"] = "BCH";
})(Asset = exports.Asset || (exports.Asset = {}));
exports.Assets = [Asset.BTC, Asset.ZEC, Asset.ETH, Asset.BCH];
exports.isAsset = (maybeAsset) => // tslint:disable-line: no-any
 exports.Assets.indexOf(maybeAsset) !== -1;
var RenContract;
(function (RenContract) {
    RenContract["Btc2Eth"] = "BTC0Btc2Eth";
    RenContract["Eth2Btc"] = "BTC0Eth2Btc";
    RenContract["Zec2Eth"] = "ZEC0Zec2Eth";
    RenContract["Eth2Zec"] = "ZEC0Eth2Zec";
    RenContract["Bch2Eth"] = "BCH0Bch2Eth";
    RenContract["Eth2Bch"] = "BCH0Eth2Bch";
})(RenContract = exports.RenContract || (exports.RenContract = {}));
exports.RenContracts = [RenContract.Btc2Eth, RenContract.Eth2Btc, RenContract.Zec2Eth, RenContract.Eth2Zec, RenContract.Bch2Eth, RenContract.Eth2Bch];
exports.isRenContract = (maybeRenContract) => // tslint:disable-line: no-any
 exports.RenContracts.indexOf(maybeRenContract) !== -1;
exports.Tokens = {
    // Bitcoin
    BTC: {
        Mint: RenContract.Btc2Eth,
        Btc2Eth: RenContract.Btc2Eth,
        Burn: RenContract.Eth2Btc,
        Eth2Btc: RenContract.Eth2Btc,
    },
    // Zcash
    ZEC: {
        Mint: RenContract.Zec2Eth,
        Zec2Eth: RenContract.Zec2Eth,
        Burn: RenContract.Eth2Zec,
        Eth2Zec: RenContract.Eth2Zec,
    },
    // Bitcoin Cash
    BCH: {
        Mint: RenContract.Bch2Eth,
        Bch2Eth: RenContract.Bch2Eth,
        Burn: RenContract.Eth2Bch,
        Eth2Bch: RenContract.Eth2Bch,
    },
};
var RenVMType;
(function (RenVMType) {
    RenVMType["TypeAddress"] = "address";
    RenVMType["TypeStr"] = "str";
    RenVMType["TypeB32"] = "b32";
    RenVMType["TypeB"] = "b";
    RenVMType["TypeI8"] = "i8";
    RenVMType["TypeI16"] = "i16";
    RenVMType["TypeI32"] = "i32";
    RenVMType["TypeI64"] = "i64";
    RenVMType["TypeI128"] = "i128";
    RenVMType["TypeI256"] = "i256";
    RenVMType["TypeU8"] = "u8";
    RenVMType["TypeU16"] = "u16";
    RenVMType["TypeU32"] = "u32";
    RenVMType["TypeU64"] = "u64";
    RenVMType["TypeU128"] = "u128";
    RenVMType["TypeU256"] = "u256";
    RenVMType["TypeRecord"] = "record";
    RenVMType["TypeList"] = "list";
    // Ext
    RenVMType["ExtTypeEthCompatAddress"] = "ext_ethCompatAddress";
    RenVMType["ExtTypeBtcCompatUTXO"] = "ext_btcCompatUTXO";
    RenVMType["ExtTypeBtcCompatUTXOs"] = "ext_btcCompatUTXOs";
    RenVMType["ExtTypeEthCompatTx"] = "ext_ethCompatTx";
    RenVMType["ExtEthCompatPayload"] = "ext_ethCompatPayload";
})(RenVMType = exports.RenVMType || (exports.RenVMType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuVk0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVuVk0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDbEIsaUNBQW1CLENBQUE7SUFDbkIsbUNBQXFCLENBQUE7SUFDckIsaUNBQW1CLENBQUE7SUFDbkIsK0JBQWlCLENBQUE7SUFDakIsbUNBQXFCLENBQUE7QUFDekIsQ0FBQyxFQU5XLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBTXJCO0FBQ1ksUUFBQSxXQUFXLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwSCxRQUFBLFlBQVksR0FBRyxDQUFDLGVBQW9CLEVBQWlDLEVBQUUsQ0FBQyw4QkFBOEI7Q0FDL0csbUJBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEQsSUFBWSxLQUtYO0FBTEQsV0FBWSxLQUFLO0lBQ2Isd0JBQWUsQ0FBQTtJQUNmLHlCQUFnQixDQUFBO0lBQ2hCLHNCQUFhLENBQUE7SUFDYiw0QkFBbUIsQ0FBQTtBQUN2QixDQUFDLEVBTFcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBS2hCO0FBQ1ksUUFBQSxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekUsUUFBQSxPQUFPLEdBQUcsQ0FBQyxVQUFlLEVBQXVCLEVBQUUsQ0FBQyw4QkFBOEI7Q0FDM0YsY0FBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUV0QyxJQUFZLEtBS1g7QUFM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