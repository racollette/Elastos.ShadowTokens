/**
 * The `value` function converts between different cryptocurrency units.
 * See `value.spec.ts` for example usage.
 */
import BigNumber from "bignumber.js";
const convert = (valueIn, fromUnit, toUnit) => {
    return valueIn.multipliedBy(fromUnit).dividedBy(toUnit);
};
export const toBigNumber = (valueIn) => BigNumber.isBigNumber(valueIn) ? new BigNumber(valueIn) : new BigNumber(valueIn.toString());
export const toFixed = (input) => input.toFixed ? input.toFixed() : input.toString();
class BaseValue {
    constructor(unitTypes, valueIn, unit) {
        // tslint:disable-next-line: no-use-before-declare
        this.to = (unit) => convert(this.value, new BigNumber("1"), this.unitTypes[resolveUnit(unit)]);
        this.unitTypes = unitTypes;
        this.value = convert(toBigNumber(valueIn), this.unitTypes[unit], new BigNumber("1"));
    }
}
// BTC /////////////////////////////////////////////////////////////////////////
const BTCUnits = {
    sats: new BigNumber("0.00000001"),
    ubtc: new BigNumber("0.000001"),
    mbtc: new BigNumber("0.001"),
    btc: new BigNumber("1"),
};
class BTCValue extends BaseValue {
    constructor(valueIn, unit) {
        super(BTCUnits, valueIn, unit);
        this.sats = () => this.to("sats");
        this.btc = () => this.to("btc");
        this._smallest = () => this.to("sats");
        this._readable = () => this.to("btc");
    }
}
BTCValue.units = BTCUnits;
BTCValue.synonyms = [{ synonyms: ["bitcoin", "bitcoins", "tbtc"], unit: "btc" }]; // tbtc is used to indicate testnet btc
// BCH /////////////////////////////////////////////////////////////////////////
const BCHUnits = {
    sats: new BigNumber("0.00000001"),
    ubch: new BigNumber("0.000001"),
    mbch: new BigNumber("0.001"),
    bch: new BigNumber("1"),
};
class BCHValue extends BaseValue {
    constructor(valueIn, unit) {
        super(BCHUnits, valueIn, unit);
        this.sats = () => this.to("sats");
        this.bch = () => this.to("bch");
        this._smallest = () => this.to("sats");
        this._readable = () => this.to("bch");
    }
}
BCHValue.units = BCHUnits;
BCHValue.synonyms = [{ synonyms: ["bitcoin-cash", "bcash", "tbch"], unit: "btc" }];
// ZEC /////////////////////////////////////////////////////////////////////////
const ZECUnits = {
    zats: new BigNumber("0.00000001"),
    uzec: new BigNumber("0.000001"),
    mzec: new BigNumber("0.001"),
    zec: new BigNumber("1"),
};
class ZECValue extends BaseValue {
    constructor(valueIn, unit) {
        super(ZECUnits, valueIn, unit);
        this.zats = () => this.to("zats");
        this.zec = () => this.to("zec");
        this._smallest = () => this.to("zats");
        this._readable = () => this.to("zec");
    }
}
ZECValue.units = ZECUnits;
ZECValue.synonyms = [{ synonyms: ["zcash", "tzec", "taz"], unit: "zec" }];
// Sats ////////////////////////////////////////////////////////////////////////
const SatsUnits = {
    sats: new BigNumber("0.00000001"),
    bch: new BigNumber("1"),
    btc: new BigNumber("1"),
};
class SatsValue extends BaseValue {
    constructor(valueIn, unit) {
        super(SatsUnits, valueIn, unit);
        this.sats = () => this.to("sats");
        this.btc = () => this.to("btc");
        this.bch = () => this.to("bch");
        this._smallest = () => this.to("sats");
        this._readable = () => this.to("btc");
    }
}
SatsValue.units = SatsUnits;
SatsValue.synonyms = [{}];
// ETH /////////////////////////////////////////////////////////////////////////
const ETHUnits = {
    wei: new BigNumber("0.000000000000000001"),
    kwei: new BigNumber("0.000000000000001"),
    mwei: new BigNumber("0.000000000001"),
    gwei: new BigNumber("0.000000001"),
    finney: new BigNumber("0.001"),
    eth: new BigNumber("1"),
};
class ETHValue extends BaseValue {
    constructor(valueIn, unit) {
        super(ETHUnits, valueIn, unit);
        this.wei = () => this.to("wei");
        this.eth = () => this.to("eth");
        this._smallest = () => this.to("wei");
        this._readable = () => this.to("eth");
    }
}
ETHValue.units = ETHUnits;
ETHValue.synonyms = [{ synonyms: ["ethereum", "ether", "keth"], unit: "eth" }];
////////////////////////////////////////////////////////////////////////////////
// General /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const valueClasses = [BTCValue, BCHValue, ZECValue, ETHValue];
const resolveUnit = (unitIn) => {
    const unit = unitIn.toLowerCase().replace(/Âµ/, "u");
    // Satoshis
    if (unit.slice(0, 3) === "sat") {
        return "sats";
    }
    for (const ValueClass of valueClasses) {
        // Check if the unit belongs to the class
        if (new Set(Object.keys(ValueClass.units)).has(unit)) {
            return unit;
        }
        // Handle synonyms
        for (const { synonyms, unit: synonymUnit } of ValueClass.synonyms) {
            if (new Set(synonyms).has(unit)) {
                return synonymUnit;
            }
        }
    }
    throw new Error(`Unknown unit ${unitIn}`);
};
export const value = (valueIn, unitIn) => {
    const unit = resolveUnit(unitIn);
    // Satoshis
    if (unit === "sats") {
        return new SatsValue(valueIn, "sats");
    }
    for (const ValueClass of valueClasses) {
        // Check if the unit belongs to the class
        if (new Set(Object.keys(ValueClass.units)).has(unit)) {
            return new ValueClass(valueIn, unit);
        }
    }
    throw new Error(`Unknown unit ${unitIn}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBR0gsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBRXJDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBa0IsRUFBRSxRQUFtQixFQUFFLE1BQWlCLEVBQUUsRUFBRTtJQUMzRSxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQW9CLEVBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM1SixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUEyRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUUzSixNQUFNLFNBQVM7SUFHWCxZQUFZLFNBQVksRUFBRSxPQUFvQixFQUFFLElBQWE7UUFDN0Qsa0RBQWtEO1FBQzNDLE9BQUUsR0FBRyxDQUFDLElBQWEsRUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBYyxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBRnpFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQUMsSUFBSSxDQUFD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