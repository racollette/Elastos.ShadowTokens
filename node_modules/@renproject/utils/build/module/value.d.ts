/**
 * The `value` function converts between different cryptocurrency units.
 * See `value.spec.ts` for example usage.
 */
import { NumberValue } from "@renproject/interfaces";
import BigNumber from "bignumber.js";
export declare const toBigNumber: (valueIn: NumberValue) => BigNumber;
export declare const toFixed: (input: {
    readonly toFixed?: (() => string) | undefined;
    readonly toString: () => string;
}) => string;
declare class BaseValue<T extends {
    [unit: string]: BigNumber;
}> {
    private readonly value;
    private readonly unitTypes;
    constructor(unitTypes: T, valueIn: NumberValue, unit: keyof T);
    to: (unit: keyof T) => BigNumber;
}
declare const BTCUnits: {
    sats: BigNumber;
    ubtc: BigNumber;
    mbtc: BigNumber;
    btc: BigNumber;
};
declare class BTCValue extends BaseValue<typeof BTCUnits> {
    static units: {
        sats: BigNumber;
        ubtc: BigNumber;
        mbtc: BigNumber;
        btc: BigNumber;
    };
    static synonyms: {
        synonyms: string[];
        unit: "btc";
    }[];
    constructor(valueIn: NumberValue, unit: keyof typeof BTCUnits);
    sats: () => BigNumber;
    btc: () => BigNumber;
    _smallest: () => BigNumber;
    _readable: () => BigNumber;
}
declare const BCHUnits: {
    sats: BigNumber;
    ubch: BigNumber;
    mbch: BigNumber;
    bch: BigNumber;
};
declare class BCHValue extends BaseValue<typeof BCHUnits> {
    static units: {
        sats: BigNumber;
        ubch: BigNumber;
        mbch: BigNumber;
        bch: BigNumber;
    };
    static synonyms: {
        synonyms: string[];
        unit: "bch";
    }[];
    constructor(valueIn: NumberValue, unit: keyof typeof BCHUnits);
    sats: () => BigNumber;
    bch: () => BigNumber;
    _smallest: () => BigNumber;
    _readable: () => BigNumber;
}
declare const ZECUnits: {
    zats: BigNumber;
    uzec: BigNumber;
    mzec: BigNumber;
    zec: BigNumber;
};
declare class ZECValue extends BaseValue<typeof ZECUnits> {
    static units: {
        zats: BigNumber;
        uzec: BigNumber;
        mzec: BigNumber;
        zec: BigNumber;
    };
    static synonyms: {
        synonyms: string[];
        unit: "zec";
    }[];
    constructor(valueIn: NumberValue, unit: keyof typeof ZECUnits);
    zats: () => BigNumber;
    zec: () => BigNumber;
    _smallest: () => BigNumber;
    _readable: () => BigNumber;
}
declare const SatsUnits: {
    sats: BigNumber;
    bch: BigNumber;
    btc: BigNumber;
};
declare class SatsValue extends BaseValue<typeof SatsUnits> {
    static units: {
        sats: BigNumber;
        bch: BigNumber;
        btc: BigNumber;
    };
    static synonyms: {}[];
    constructor(valueIn: NumberValue, unit: keyof typeof SatsUnits);
    sats: () => BigNumber;
    btc: () => BigNumber;
    bch: () => BigNumber;
    _smallest: () => BigNumber;
    _readable: () => BigNumber;
}
declare const ETHUnits: {
    wei: BigNumber;
    kwei: BigNumber;
    mwei: BigNumber;
    gwei: BigNumber;
    finney: BigNumber;
    eth: BigNumber;
};
declare class ETHValue extends BaseValue<typeof ETHUnits> {
    static units: {
        wei: BigNumber;
        kwei: BigNumber;
        mwei: BigNumber;
        gwei: BigNumber;
        finney: BigNumber;
        eth: BigNumber;
    };
    static synonyms: {
        synonyms: string[];
        unit: "eth";
    }[];
    constructor(valueIn: NumberValue, unit: keyof typeof ETHUnits);
    wei: () => BigNumber;
    eth: () => BigNumber;
    _smallest: () => BigNumber;
    _readable: () => BigNumber;
}
declare type Units = keyof typeof BTCUnits | keyof typeof BCHUnits | keyof typeof ZECUnits | keyof typeof SatsUnits | keyof typeof ETHUnits;
export declare type Value<Unit = ""> = Unit extends "sats" ? SatsValue : Unit extends keyof typeof BTCUnits ? BTCValue : Unit extends keyof typeof BCHUnits ? BCHValue : Unit extends keyof typeof ZECUnits ? ZECValue : Unit extends keyof typeof ETHUnits ? ETHValue : (BTCValue | BCHValue | ZECValue | SatsValue | ETHValue);
export declare const value: <Unit extends Units>(valueIn: NumberValue, unitIn: Unit) => Value<Unit>;
export {};
