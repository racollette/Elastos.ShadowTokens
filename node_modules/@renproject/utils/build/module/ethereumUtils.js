import BlocknativeSdk from "bnc-sdk";
import { AbiCoder } from "web3-eth-abi";
import { keccak256 as web3Keccak256 } from "web3-utils";
import { Ox, SECONDS, sleep, strip0x } from "./common";
export const BURN_TOPIC = web3Keccak256("LogBurn(bytes,uint256,uint256,bytes)");
/**
 * Waits for the receipt of a transaction to be available, retrying every 3
 * seconds until it is.
 *
 * @param web3 A web3 instance.
 * @param transactionHash The hash of the transaction being read.
 *
 * @/param nonce The nonce of the transaction, to detect if it has been
 *        overwritten.
 */
export const waitForReceipt = async (web3, transactionHash, blocknative) => new Promise(async (resolve, reject) => {
    let blocknativeInitialized = false;
    try {
        if (!blocknative) {
            // Initialize Blocknative SDK.
            blocknative = new BlocknativeSdk({
                dappId: "6b3d07f1-b158-4cf1-99ec-919b11fe3654",
                networkId: await web3.eth.net.getId(),
            });
            blocknativeInitialized = true;
        }
        const { emitter } = blocknative.transaction(transactionHash);
        emitter.on("txSpeedUp", (state) => {
            if (state.hash) {
                transactionHash = Ox(state.hash);
            }
        });
        emitter.on("txCancel", () => {
            reject(new Error("Ethereum transaction was cancelled."));
        });
    }
    catch (error) {
        // Ignore blocknative error.
    }
    // Wait for confirmation
    let receipt;
    while (!receipt || !receipt.blockHash) {
        receipt = (await web3.eth.getTransactionReceipt(transactionHash));
        if (receipt && receipt.blockHash) {
            break;
        }
        await sleep(3 * SECONDS);
    }
    try {
        // Destroy blocknative SDK.
        if (blocknative && blocknativeInitialized) {
            blocknative.destroy();
        }
    }
    catch (error) {
        // Ignore blocknative error.
    }
    // Status might be undefined - so check against `false` explicitly.
    if (receipt.status === false) {
        reject(new Error(`Transaction was reverted. { "transactionHash": "${transactionHash}" }`));
        return;
    }
    resolve(receipt);
    return;
});
export const extractBurnReference = async (web3, txHash) => {
    const receipt = await waitForReceipt(web3, txHash);
    if (!receipt.logs) {
        throw Error("No events found in transaction");
    }
    let burnReference;
    for (const [, event] of Object.entries(receipt.logs)) {
        if (event.topics[0] === BURN_TOPIC) {
            burnReference = event.topics[1];
            break;
        }
    }
    if (!burnReference && burnReference !== 0) {
        throw Error("No reference ID found in logs");
    }
    return burnReference;
};
export const defaultAccountError = "No accounts found in Web3 wallet.";
export const withDefaultAccount = async (web3, config) => {
    if (!config.from) {
        if (web3.eth.defaultAccount) {
            config.from = web3.eth.defaultAccount;
        }
        else {
            const accounts = await web3.eth.getAccounts();
            if (accounts.length === 0) {
                throw new Error(defaultAccountError);
            }
            config.from = accounts[0];
        }
    }
    return config;
};
export const rawEncode = (types, 
// tslint:disable-next-line:no-any
parameters) => Buffer.from(strip0x(new AbiCoder().encodeParameters(types, parameters)), "hex");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1VdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ldGhlcmV1bVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sY0FBYyxNQUFNLFNBQVMsQ0FBQztBQUdyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLElBQUksYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXhELE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdkQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBRWhGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQy9CLElBQVUsRUFDVixlQUF1QixFQUN2QixXQUE0QixFQUM5QixFQUFFLENBQ0EsSUFBSSxPQUFPLENBQXFCLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDdEQsSUFBSSxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFFbkMsSUFBSTtRQUNBLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCw4QkFBOEI7WUFDOUIsV0FBVyxHQUFHLElBQUksY0FBYyxDQUFDO2dCQUM3QixNQUFNLEVBQUUsc0NBQXNDO2dCQUM5QyxTQUFTLEVBQUUsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7YUFDeEMsQ0FBQyxDQUFDO1lBQ0gsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QixJ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