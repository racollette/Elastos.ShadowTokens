import { bchAddressFrom, bchAddressToHex, btcAddressFrom, btcAddressToHex, createBCHAddress, createBTCAddress, createZECAddress, getBitcoinCashUTXO, getBitcoinCashUTXOs, getBitcoinUTXO, getBitcoinUTXOs, getZcashUTXO, getZcashUTXOs, zecAddressFrom, zecAddressToHex, } from "@renproject/chains";
import { Chain, Tokens as CommonTokens, } from "@renproject/interfaces";
import { ripemd160, sha256 } from "ethereumjs-util";
import { Ox } from "./common";
import { parseRenContract } from "./renVMUtils";
// const hexOrBase64ToBuffer = (value: string | Buffer): Buffer =>
//     typeof value === "string" ?
//         value.slice(0, 2) === "0x" ?
//             Buffer.from(strip0x(value), "hex") :
//             Buffer.from(value, "base64") :
//         Buffer.from(value);
export const hash160 = (publicKey) => ripemd160(sha256(publicKey), false);
/**
 * Generate Gateway address for a cross-chain transfer's origin chain.
 */
export const generateAddress = (renContract, gHash, mpkh, isTestnet) => {
    const chain = parseRenContract(renContract).from;
    switch (chain) {
        case Chain.Bitcoin:
            return createBTCAddress(isTestnet, Ox(mpkh), gHash);
        case Chain.Zcash:
            return createZECAddress(isTestnet, Ox(mpkh), gHash);
        case Chain.BitcoinCash:
            return createBCHAddress(isTestnet, Ox(mpkh), gHash);
        default:
            throw new Error(`Unable to generate deposit address for chain ${chain}`);
    }
};
/**
 * Retrieves unspent deposits at the provided address.
 * An optional `confirmations` parameter limits UTXOs to ones with at least that
 * amount of confirmations.
 */
export const retrieveDeposits = async (_network, renContract, address, confirmations = 0) => {
    const chain = parseRenContract(renContract).from;
    switch (chain) {
        case Chain.Bitcoin:
            return (await getBitcoinUTXOs(_network)(address, confirmations)).map((utxo) => ({
                chain: Chain.Bitcoin,
                utxo,
            }));
        case Chain.Zcash:
            return (await getZcashUTXOs(_network)(address, confirmations)).map((utxo) => ({
                chain: Chain.Zcash,
                utxo,
            }));
        case Chain.BitcoinCash:
            // tslint:disable-next-line: no-unnecessary-type-assertion
            return (await getBitcoinCashUTXOs(_network)(address, confirmations)).map((utxo) => ({
                chain: Chain.BitcoinCash,
                utxo,
            }));
        default:
            throw new Error(`Unable to retrieve deposits for chain ${chain}`);
    }
};
/**
 * Returns the number of confirmations for the specified UTXO.
 */
export const retrieveUTXO = async (_network, chain, transaction) => {
    // tslint:disable-next-line: no-any
    const { txHash, vOut } = transaction;
    switch (chain) {
        case Chain.Bitcoin:
            return await getBitcoinUTXO(_network)(txHash, vOut);
        case Chain.Zcash:
            return await getZcashUTXO(_network)(txHash, vOut);
        case Chain.BitcoinCash:
            // tslint:disable-next-line: no-unnecessary-type-assertion
            return await getBitcoinCashUTXO(_network)(txHash, vOut);
        default:
            throw new Error(`Unable to retrieve deposits for chain ${chain}`);
    }
};
export const btcUtils = {
    getUTXOs: getBitcoinUTXOs,
    addressToHex: btcAddressToHex,
    addressFrom: btcAddressFrom,
};
export const zecUtils = {
    getUTXOs: getZcashUTXOs,
    addressToHex: zecAddressToHex,
    addressFrom: zecAddressFrom,
};
export const bchUtils = {
    getUTXOs: getBitcoinCashUTXOs,
    addressToHex: bchAddressToHex,
    addressFrom: bchAddressFrom,
};
export const Tokens = {
    // Bitcoin
    BTC: {
        ...CommonTokens.BTC,
        ...btcUtils,
    },
    // Zcash
    ZEC: {
        ...CommonTokens.ZEC,
        ...zecUtils,
    },
    // Bitcoin Cash
    BCH: {
        ...CommonTokens.BCH,
        ...bchUtils,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NoYWlucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsY0FBYyxFQUNkLGVBQWUsRUFDZixjQUFjLEVBQ2QsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixtQkFBbUIsRUFFbkIsY0FBYyxFQUNkLGVBQWUsRUFFZixZQUFZLEVBQ1osYUFBYSxFQUNiLGNBQWMsRUFDZCxlQUFlLEdBQ2xCLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUNILEtBQUssRUFFTCxNQUFNLElBQUksWUFBWSxHQUt6QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHcEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFaEQsa0VBQWtFO0FBQ2xFLGtDQUFrQztBQUNsQyx1Q0FBdUM7QUFDdkMsbURBQW1EO0FBQ25ELDZDQUE2QztBQUM3Qyw4QkFBOEI7QUFFOUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsU0FBaUIsRUFBVSxFQUFFLENBQ2pELFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDM0IsV0FBd0IsRUFDeEIsS0FBYSxFQUNiLElBQVksRUFDWixTQUFrQixFQUNaLEVBQUU7SUFDUixNQUFNLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakQsUUFBUSxLQUFLLEVBQUU7UUFDWCxLQUFLLEtBQUssQ0FBQyxPQUFPO1lBQ2QsT0FBTyxn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