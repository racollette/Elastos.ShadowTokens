import { Chain } from "@renproject/interfaces";
import { parseRenContract, resolveInToken, resolveOutToken, resolveSendTo } from "./renVMUtils";
import { utils } from "./utils";
import { toBigNumber } from "./value";
/**
 * `resolveSendCall` simplifies the arguments required by RenJS by allowing
 * developers to pass in a non-contract address as the `sendTo` field.
 * This function checks if this is the case and makes the required changes to
 * the parameters;
 */
export const resolveSendCall = (network, params, lockAndMint) => {
    const { sendTo, sendAmount, suggestedAmount, txConfig, ...restOfParams } = params;
    const amount = sendAmount || suggestedAmount;
    // The contract call hasn't been provided - but `sendTo` has. We overwrite
    // the contract call with a simple adapter call.
    if (!sendTo) {
        throw new Error(`"sendTo" parameter must be provided.`);
    }
    lockAndMint = lockAndMint === undefined ? !!String(sendTo).match(/^(0x)[0-9a-fA-Z]{40}$/) : lockAndMint;
    const sendToken = lockAndMint ? resolveInToken(params.sendToken) : resolveOutToken(params.sendToken);
    const renContract = parseRenContract(sendToken);
    if (renContract.to === Chain.Ethereum) {
        // Mint
        return {
            ...restOfParams,
            suggestedAmount: amount,
            contractCalls: [{
                    sendTo: network.addresses.gateways.BasicAdapter.address,
                    contractFn: "mint",
                    contractParams: [
                        { type: "string", name: "_symbol", value: renContract.asset },
                        { type: "address", name: "_address", value: sendTo },
                    ],
                    txConfig,
                }],
        };
    }
    else {
        // Burn
        if (!amount) {
            throw new Error(`Send amount must be provided in order to send directly to an address.`);
        }
        const token = parseRenContract(sendToken).asset;
        const addressToHex = utils[token].addressToHex(sendTo);
        // const tokenAddress = await getTokenAddress(network, web3, sendToken);
        // const approve = {
        //     sendTo: tokenAddress,
        //     contractFn: "approve",
        //     contractParams: [
        //         { type: "address" as const, name: "spender", value: network.addresses.gateways.BasicAdapter.address },
        //         { type: "uint256" as const, name: "amount", value: toBigNumber(amount).toFixed() },
        //     ],
        //     txConfig,
        // };
        const gateway = network.addresses.gateways[`${token.toUpperCase()}Gateway`]._address;
        return {
            ...restOfParams,
            suggestedAmount: amount,
            contractCalls: [
                // approve,
                {
                    sendTo: gateway,
                    contractFn: "burn",
                    contractParams: [
                        { type: "bytes", name: "_to", value: addressToHex },
                        { type: "uint256", name: "_amount", value: toBigNumber(amount).toFixed() },
                    ],
                    // txConfig: { gas: 200000, ...txConfig },
                    txConfig,
                }
            ]
        };
    }
};
export const processLockAndMintParams = (_network, _params) => {
    const processors = [
        resolveSendTo({ isMint: true }),
    ];
    return processors.reduce((params, processor) => processor(params), _params);
};
export const processBurnAndReleaseParams = (_network, _params) => {
    const processors = [
        resolveSendTo({ isMint: false }),
    ];
    return processors.reduce((params, processor) => processor(params), _params);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyYW1ldGVyVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUF3QixLQUFLLEVBQWlDLE1BQU0sd0JBQXdCLENBQUM7QUFFcEcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV0Qzs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQTBCLEVBQUUsTUFBa0IsRUFBRSxXQUFxQixFQUE0QyxFQUFFO0lBRS9JLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFFbEYsTUFBTSxNQUFNLEdBQUcsVUFBVSxJQUFJLGVBQWUsQ0FBQztJQUU3QywwRUFBMEU7SUFDMUUsZ0RBQWdEO0lBRWhELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxXQUFXLEdBQUcsV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXhHLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVyRyxNQUFNLFdBQVcs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