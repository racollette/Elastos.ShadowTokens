/// <reference types="node" />
import { RenNetworkDetails } from "@renproject/contracts";
import { Chain, RenContract, Tokens as CommonTokens, UTXO, UTXOIndex, UTXOWithChain } from "@renproject/interfaces";
import { UTXO as SendCryptoUTXO } from "send-crypto";
export declare const hash160: (publicKey: Buffer) => Buffer;
/**
 * Generate Gateway address for a cross-chain transfer's origin chain.
 */
export declare const generateAddress: (renContract: RenContract, gHash: string, mpkh: Buffer, isTestnet: boolean) => string;
/**
 * Retrieves unspent deposits at the provided address.
 * An optional `confirmations` parameter limits UTXOs to ones with at least that
 * amount of confirmations.
 */
export declare const retrieveDeposits: (_network: RenNetworkDetails, renContract: RenContract, address: string, confirmations?: number) => Promise<UTXOWithChain[]>;
/**
 * Returns the number of confirmations for the specified UTXO.
 */
export declare const retrieveUTXO: (_network: RenNetworkDetails, chain: Chain, transaction: UTXOIndex) => Promise<UTXO>;
export interface AssetUtils {
    getUTXOs: ({ isTestnet, }: {
        isTestnet: boolean;
    }) => (address: string, confirmations: number) => Promise<readonly SendCryptoUTXO[]>;
    addressToHex: (address: string) => string;
    addressFrom: (address: string) => string;
}
export declare const btcUtils: AssetUtils;
export declare const zecUtils: AssetUtils;
export declare const bchUtils: AssetUtils;
export declare const Tokens: {
    BTC: AssetUtils & typeof CommonTokens["BTC"];
    ZEC: AssetUtils & typeof CommonTokens["ZEC"];
    BCH: AssetUtils & typeof CommonTokens["BCH"];
};
