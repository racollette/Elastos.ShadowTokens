/// <reference types="node" />
import BlocknativeSdk from "bnc-sdk";
import Web3 from "web3";
import { TransactionConfig, TransactionReceipt } from "web3-core";
export declare const BURN_TOPIC: string;
/**
 * Waits for the receipt of a transaction to be available, retrying every 3
 * seconds until it is.
 *
 * @param web3 A web3 instance.
 * @param transactionHash The hash of the transaction being read.
 *
 * @/param nonce The nonce of the transaction, to detect if it has been
 *        overwritten.
 */
export declare const waitForReceipt: (web3: Web3, transactionHash: string, blocknative?: BlocknativeSdk | undefined) => Promise<TransactionReceipt>;
export declare const extractBurnReference: (web3: Web3, txHash: string) => Promise<string | number>;
export declare const defaultAccountError = "No accounts found in Web3 wallet.";
export declare const withDefaultAccount: (web3: Web3, config: TransactionConfig) => Promise<TransactionConfig>;
export declare const rawEncode: (types: (string | {})[], parameters: any[]) => Buffer;
