import Web3 from "web3";
import { TransactionReceipt } from "web3-core";
import { PromiEvent } from "./promiEvent";
export declare type Web3Events = {
    transactionHash: [string];
    receipt: [TransactionReceipt];
    confirmation: [number, TransactionReceipt];
    error: [Error];
};
export declare type RenWeb3Events = {
    eth_transactionHash: [string];
    eth_receipt: [TransactionReceipt];
    eth_confirmation: [number, TransactionReceipt];
    error: [Error];
};
/**
 * Forward the events emitted by a Web3 PromiEvent to another PromiEvent.
 */
export declare const forwardWeb3Events: <T, TEvents extends Web3Events, Y, YEvents extends Web3Events & RenWeb3Events>(src: PromiEvent<T, TEvents>, dest: PromiEvent<Y, YEvents>) => void;
/**
 * Bind a promiEvent to an Ethereum transaction hash, sending confirmation
 * events. Web3 may export a similar function, which should be used instead if
 * it exists.
 *
 * @param web3 A Web3 instance for watching for confirmations.
 * @param txHash The Ethereum transaction has as a hex string.
 * @param promiEvent The existing promiEvent to forward events to.
 */
export declare const manualPromiEvent: (web3: Web3, txHash: string, promiEvent: PromiEvent<TransactionReceipt, Web3Events & RenWeb3Events>) => Promise<TransactionReceipt>;
