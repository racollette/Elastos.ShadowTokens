"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("@renproject/interfaces");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethereumjs_util_1 = require("ethereumjs-util");
const web3_utils_1 = require("web3-utils");
const common_1 = require("./common");
const ethereumUtils_1 = require("./ethereumUtils");
// export const generateNHash = (tx: Tx): string => {
//     const encoded = rawEncode(
//         ["bytes32", "bytes32"],
//         [Ox(tx.hash), Ox(tx.args.n)],
//     );
//     return Ox(keccak256(encoded));
// };
/**
 * Hash the payloads associated with a RenVM cross-chain transaction.
 *
 * @param zip An array (or spread) of parameters with with types defined.
 */
exports.generatePHash = (zip, logger) => {
    // Check if they called as hashPayload([...]) instead of hashPayload(...)
    const args = Array.isArray(zip[0]) ? zip[0] : zip; // tslint:disable-line: no-any
    const [types, values] = common_1.unzip(args);
    const message = ethereumUtils_1.rawEncode(types, values);
    const digest = common_1.Ox(ethereumjs_util_1.keccak256(message));
    if (logger)
        logger.debug(`pHash: ${digest}: keccak256(${message.toString("hex")})`);
    return digest; // sha3 can accept a Buffer
};
const renContractRegex = /^(.*)0(.*)2(.*)$/;
const defaultMatch = [undefined, undefined, undefined, undefined];
/**
 * parseRenContract splits a RenVM contract (e.g. `BTC0Eth2Btc`) into the asset
 * (`BTC`), the origin chain (`Eth`) and the target chain (`Btc`).
 */
exports.parseRenContract = (renContract) => {
    // re.exec("BTC0Eth2Btc") => ['BTC0Eth2Btc', 'BTC', 'Eth', 'Btc']
    const [, asset, from, to] = renContractRegex.exec(renContract) || defaultMatch;
    if (!asset || !from || !to) {
        throw new Error(`Invalid Ren Contract "${renContract}"`);
    }
    return {
        asset: asset,
        from: from,
        to: to
    };
};
exports.getTokenName = (tokenOrContract) => {
    switch (tokenOrContract) {
        case interfaces_1.RenTokens.BTC:
        case interfaces_1.RenTokens.ZEC:
        case interfaces_1.RenTokens.BCH: return tokenOrContract;
        case interfaces_1.Asset.BTC:
        case "BTC": return interfaces_1.RenTokens.BTC;
        case interfaces_1.Asset.ZEC:
        case "ZEC": return interfaces_1.RenTokens.ZEC;
        case interfaces_1.Asset.BCH:
        case "BCH": return interfaces_1.RenTokens.BCH;
        case interfaces_1.Asset.ETH: throw new Error(`Unexpected token ${tokenOrContract}`);
        default:
            return exports.getTokenName(exports.parseRenContract(tokenOrContract).asset);
    }
};
exports.syncGetTokenAddress = (renContract, network) => {
    switch (exports.parseRenContract(renContract).asset) {
        case interfaces_1.Asset.BTC:
            return network.addresses.gateways.RenBTC._address;
        case interfaces_1.Asset.ZEC:
            return network.addresses.gateways.RenZEC._address;
        case interfaces_1.Asset.BCH:
            return network.addresses.gateways.RenBCH._address;
        default:
            throw new Error(`Invalid Ren Contract ${renContract}`);
    }
};
exports.generateGHash = (payload, /* amount: number | string, */ to, renContract, nonce, network, logger) => {
    const token = exports.syncGetTokenAddress(renContract, network);
    const pHash = exports.generatePHash(payload, logger);
    const encoded = ethereumUtils_1.rawEncode(["bytes32", /*"uint256",*/ "address", "address", "bytes32"], [common_1.Ox(pHash), /*amount,*/ common_1.Ox(token), common_1.Ox(to), common_1.Ox(nonce)]);
    const digest = common_1.Ox(ethereumjs_util_1.keccak256(encoded));
    if (logger)
        logger.debug(`gHash: ${digest}: keccak256(${encoded.toString("hex")})`);
    return digest;
};
exports.generateSighash = (pHash, amount, to, renContract, nonceHash, network, logger) => {
    const token = exports.syncGetTokenAddress(renContract, network);
    const encoded = ethereumUtils_1.rawEncode(["bytes32", "uint256", "address", "address", "bytes32"], [common_1.Ox(pHash), amount, token, to, nonceHash]);
    const digest = common_1.Ox(ethereumjs_util_1.keccak256(encoded));
    if (logger)
        logger.debug(`sigHash: ${digest}: keccak256(${encoded.toString("hex")})`);
    return digest;
};
exports.txHashToBase64 = (txHash) => {
    if (Buffer.isBuffer(txHash)) {
        return txHash.toString("base64");
    }
    // Check if it's hex-encoded
    if (txHash.match(/^(0x)?[0-9a-fA-Z]{64}$/)) {
        return Buffer.from(common_1.strip0x(txHash), "hex").toString("base64");
    }
    return txHash;
};
exports.generateMintTxHash = (renContract, encodedID, utxo, logger) => {
    const message = `txHash_${renContract}_${encodedID}_${common_1.toBase64(utxo.txHash)}_${utxo.vOut}`;
    const digest = exports.txHashToBase64(ethereumjs_util_1.keccak256(Buffer.from(message)));
    if (logger)
        logger.debug(`Mint txHash: ${digest}: keccak256(${message})`);
    return digest;
};
exports.generateBurnTxHash = (renContract, encodedID, logger) => {
    const message = `txHash_${renContract}_${encodedID}`;
    const digest = exports.txHashToBase64(ethereumjs_util_1.keccak256(Buffer.from(message)));
    if (logger)
        logger.debug(`[RenJS] Burn txHash: ${digest}: keccak256(${message})`);
    return digest;
};
exports.signatureToString = (sig) => common_1.Ox(`${common_1.strip0x(sig.r)}${sig.s}${sig.v.toString(16)}`);
const switchV = (v) => v === 27 ? 28 : 27; // 28 - (v - 27);
const secp256k1n = new bignumber_js_1.default("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", 16);
exports.fixSignature = (response, network, logger) => {
    if (!response.out) {
        throw new Error(`Expected transaction response to have signature`);
    }
    const expectedSighash = exports.generateSighash(response.autogen.phash, response.autogen.amount, response.in.to, response.to, response.autogen.nhash, network, logger);
    if (common_1.Ox(response.autogen.sighash) !== common_1.Ox(expectedSighash)) {
        if (logger)
            logger.warn(`Warning: RenVM returned invalid signature hash. Expected ${expectedSighash} but for ${response.autogen.sighash}`);
    }
    const r = response.out.r;
    let s = new bignumber_js_1.default(common_1.strip0x(response.out.s), 16);
    let v = ((new bignumber_js_1.default(common_1.strip0x(response.out.v) || "0", 16).toNumber() + 27) || 27);
    // For a given key, there are two valid signatures for each signed message.
    // We always take the one with the lower `s`.
    // secp256k1n/2 = 57896044618658097711785492504343953926418782139537452191302581570759080747168.5
    if (s.gt(secp256k1n.div(2))) {
        // Take s = -s % secp256k1n
        s = secp256k1n.minus(s);
        // Switch v
        v = switchV(v);
    }
    // TODO: Fix code below to check against proper mintAuthority
    // // Currently, the wrong `v` value may be returned from RenVM. We recover the
    // // address to see if we need to switch `v`. This can be removed once RenVM
    // // has been updated.
    // const recovered = {
    //     [v]: pubToAddress(ecrecover(
    //         Buffer.from(strip0x(response.autogen.sighash), "hex"),
    //         v,
    //         Buffer.from(strip0x(r), "hex"),
    //         s.toArrayLike(Buffer, "be", 32),
    //     )),
    //     [switchV(v)]: pubToAddress(ecrecover(
    //         Buffer.from(strip0x(response.autogen.sighash), "hex"),
    //         switchV(v),
    //         Buffer.from(strip0x(r), "hex"),
    //         s.toArrayLike(Buffer, "be", 32),
    //     )),
    // };
    // const expected = Buffer.from(strip0x(.network.renVM.mintAuthority), "hex");
    // if (recovered[v].equals(expected)) {
    //     // Do nothing
    // } else if (recovered[switchV(v)].equals(expected)) {
    //     // tslint:disable-next-line: no-console
    //     console.info("[info][ren-js] switching v value");
    //     v = switchV(v);
    // } else {
    //     throw new Error(`Invalid signature - unable to recover mint authority from signature (Expected ${Ox(expected)}, got ${Ox(recovered[v])})`);
    // }
    const to32Bytes = (bn) => ("0".repeat(64) + bn.toString(16)).slice(-64);
    const signature = {
        r,
        s: to32Bytes(s),
        v,
    };
    return signature;
};
exports.getTokenAddress = async (network, web3, tokenOrContract) => {
    try {
        const registry = new web3.eth.Contract(network.addresses.gateways.GatewayRegistry.abi, network.addresses.gateways.GatewayRegistry.address);
        return await registry.methods.getTokenBySymbol(exports.getTokenName(tokenOrContract)).call();
    }
    catch (error) {
        (error || {}).error = `Error looking up ${tokenOrContract} token address: ${error.message}`;
        throw error;
    }
};
exports.getGatewayAddress = async (network, web3, tokenOrContract) => {
    try {
        const registry = new web3.eth.Contract(network.addresses.gateways.GatewayRegistry.abi, network.addresses.gateways.GatewayRegistry.address);
        return await registry.methods.getGatewayBySymbol(exports.getTokenName(tokenOrContract)).call();
    }
    catch (error) {
        (error || {}).error = `Error looking up ${tokenOrContract}Gateway address: ${error.message}`;
        throw error;
    }
};
exports.findTransactionBySigHash = async (network, web3, tokenOrContract, sigHash, logger) => {
    try {
        const gatewayAddress = await exports.getGatewayAddress(network, web3, tokenOrContract);
        const gatewayContract = new web3.eth.Contract(network.addresses.gateways.BTCGateway.abi, gatewayAddress);
        // We can skip the `status` check and call `getPastLogs` directly - for now both are called in case
        // the contract
        const status = await gatewayContract.methods.status(sigHash).call();
        if (status) {
            const recentRegistrationEvents = await web3.eth.getPastLogs({
                address: gatewayAddress,
                fromBlock: "1",
                toBlock: "latest",
                // topics: [sha3("LogDarknodeRegistered(address,uint256)"), "0x000000000000000000000000" +
                // address.slice(2), null, null] as any,
                topics: [web3_utils_1.sha3("LogMint(address,uint256,uint256,bytes32)"), null, null, sigHash],
            });
            if (!recentRegistrationEvents.length) {
                throw new Error(`Mint has been submitted but no log was found.`);
            }
            const log = recentRegistrationEvents[0];
            return log.transactionHash;
        }
    }
    catch (error) {
        // tslint:disable-next-line: no-console
        if (logger)
            logger.error(error);
        // Continue with transaction
    }
    return;
};
/**
 * Returns a random 32 byte hex string (prefixed with '0x').
 */
exports.randomNonce = () => common_1.randomBytes(32);
exports.resolveInToken = (sendToken) => {
    switch (sendToken) {
        case "BTC":
            return interfaces_1.RenContract.Btc2Eth;
        case "BCH":
            return interfaces_1.RenContract.Bch2Eth;
        case "ZEC":
            return interfaces_1.RenContract.Zec2Eth;
        default:
            return sendToken;
    }
};
exports.resolveOutToken = (sendToken) => {
    switch (sendToken) {
        case "BTC":
            return interfaces_1.RenContract.Eth2Btc;
        case "BCH":
            return interfaces_1.RenContract.Eth2Bch;
        case "ZEC":
            return interfaces_1.RenContract.Eth2Zec;
        default:
            return sendToken;
    }
};
exports.resolveSendTo = ({ isMint }) => (params) => {
    params.sendToken = isMint ? exports.resolveInToken(params.sendToken) : exports.resolveOutToken(params.sendToken);
    return params;
};
//# sourceMappingURL=data:application/json;base64,