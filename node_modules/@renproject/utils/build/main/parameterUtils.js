"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("@renproject/interfaces");
const renVMUtils_1 = require("./renVMUtils");
const utils_1 = require("./utils");
const value_1 = require("./value");
/**
 * `resolveSendCall` simplifies the arguments required by RenJS by allowing
 * developers to pass in a non-contract address as the `sendTo` field.
 * This function checks if this is the case and makes the required changes to
 * the parameters;
 */
exports.resolveSendCall = (network, params, lockAndMint) => {
    const { sendTo, sendAmount, suggestedAmount, txConfig } = params, restOfParams = __rest(params, ["sendTo", "sendAmount", "suggestedAmount", "txConfig"]);
    const amount = sendAmount || suggestedAmount;
    // The contract call hasn't been provided - but `sendTo` has. We overwrite
    // the contract call with a simple adapter call.
    if (!sendTo) {
        throw new Error(`"sendTo" parameter must be provided.`);
    }
    lockAndMint = lockAndMint === undefined ? !!String(sendTo).match(/^(0x)[0-9a-fA-Z]{40}$/) : lockAndMint;
    const sendToken = lockAndMint ? renVMUtils_1.resolveInToken(params.sendToken) : renVMUtils_1.resolveOutToken(params.sendToken);
    const renContract = renVMUtils_1.parseRenContract(sendToken);
    if (renContract.to === interfaces_1.Chain.Ethereum) {
        // Mint
        return Object.assign({}, restOfParams, { suggestedAmount: amount, contractCalls: [{
                    sendTo: network.addresses.gateways.BasicAdapter.address,
                    contractFn: "mint",
                    contractParams: [
                        { type: "string", name: "_symbol", value: renContract.asset },
                        { type: "address", name: "_address", value: sendTo },
                    ],
                    txConfig,
                }] });
    }
    else {
        // Burn
        if (!amount) {
            throw new Error(`Send amount must be provided in order to send directly to an address.`);
        }
        const token = renVMUtils_1.parseRenContract(sendToken).asset;
        const addressToHex = utils_1.utils[token].addressToHex(sendTo);
        // const tokenAddress = await getTokenAddress(network, web3, sendToken);
        // const approve = {
        //     sendTo: tokenAddress,
        //     contractFn: "approve",
        //     contractParams: [
        //         { type: "address" as const, name: "spender", value: network.addresses.gateways.BasicAdapter.address },
        //         { type: "uint256" as const, name: "amount", value: toBigNumber(amount).toFixed() },
        //     ],
        //     txConfig,
        // };
        const gateway = network.addresses.gateways[`${token.toUpperCase()}Gateway`]._address;
        return Object.assign({}, restOfParams, { suggestedAmount: amount, contractCalls: [
                // approve,
                {
                    sendTo: gateway,
                    contractFn: "burn",
                    contractParams: [
                        { type: "bytes", name: "_to", value: addressToHex },
                        { type: "uint256", name: "_amount", value: value_1.toBigNumber(amount).toFixed() },
                    ],
                    // txConfig: { gas: 200000, ...txConfig },
                    txConfig,
                }
            ] });
    }
};
exports.processLockAndMintParams = (_network, _params) => {
    const processors = [
        renVMUtils_1.resolveSendTo({ isMint: true }),
    ];
    return processors.reduce((params, processor) => processor(params), _params);
};
exports.processBurnAndReleaseParams = (_network, _params) => {
    const processors = [
        renVMUtils_1.resolveSendTo({ isMint: false }),
    ];
    return processors.reduce((params, processor) => processor(params), _params);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyYW1ldGVyVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLHVEQUFvRztBQUVwRyw2Q0FBZ0c7QUFDaEcsbUNBQWdDO0FBQ2hDLG1DQUFzQztBQUV0Qzs7Ozs7R0FLRztBQUNVLFFBQUEsZUFBZSxHQUFHLENBQUMsT0FBMEIsRUFBRSxNQUFrQixFQUFFLFdBQXFCLEVBQTRDLEVBQUU7SUFFL0ksTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFFBQVEsS0FBc0IsTUFBTSxFQUExQixzRkFBMEIsQ0FBQztJQUVsRixNQUFNLE1BQU0sR0FBRyxVQUFVLElBQUksZUFBZSxDQUFDO0lBRTdDLDBFQUEwRTtJQUMxRSxnREFBZ0Q7SUFFaEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUMzRDtJQUVELFdBQVcsR0FBRyxXQUFXLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFFeEcsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQywyQkFBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsNEJBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFckcsTUFBTSxXQUFXLEdBQUcsNkJBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsSUFBSSxXQUFXLENBQUMsRUFBRSxLQUFLLGtCQUFLLENBQUMsUUFBUSxFQUFFO1FBQ25DLE9BQU87UUFDUCx5QkFDTyxZQUFZLElBQ2YsZUFBZSxFQUFFLE1BQU0sRUFDdkIsYUFBYSxFQUFFLENB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