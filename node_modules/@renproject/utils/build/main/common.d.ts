/// <reference types="node" />
import { AbiItem, BNInterface } from "@renproject/interfaces";
/**
 * Represents 1 second for functions that accept a parameter in milliseconds.
 */
export declare const SECONDS = 1000;
/**
 * Pauses the thread for the specified number of milliseconds.
 * @param ms The number of milliseconds to pause for.
 */
export declare const sleep: (ms: number) => Promise<void>;
/**
 * Remove 0x prefix from a hex string. If the input doesn't have a 0x prefix,
 * it's returned unchanged.
 * @param hex The hex value to be prefixed.
 */
export declare const strip0x: (hex: string) => string;
/**
 * Add a 0x prefix to a hex value, converting to a string first. If the input
 * is already prefixed, it's returned unchanged.
 * @param hex The hex value to be prefixed.
 */
export declare const Ox: (hex: string | Buffer | BNInterface) => string;
/**
 * Returns a hex string filled with zeroes (prefixed with '0x').
 * @param bytes The number of bytes.
 */
export declare const NULL: (bytes: number) => string;
export declare const unzip: (zip: import("@renproject/interfaces").EthArg<string, import("@renproject/interfaces").EthType, any>[]) => any[][];
/**
 * Convert a hex string or Buffer to base64.
 */
export declare const toBase64: (input: string | Buffer) => string;
export declare const ignorePromiEventError: (error: any) => boolean;
export declare const extractError: (error: any) => string;
export declare const retryNTimes: <T>(fnCall: () => Promise<T>, retries: number) => Promise<T>;
/**
 * Generates a random hex string (prefixed with '0x').
 * @param bytes The number of bytes to generate.
 */
export declare const randomBytes: (bytes: number) => string;
export declare const assert: (assertion: boolean, sentence?: string | undefined) => assertion is true;
/**
 * Converts an Ethereum ABI and values to the parameters expected by RenJS
 * for minting.
 * @param options The ABI of the function, or ABI of the contract and the
 *                function name.
 * @param args The values of the parameters - one per function input.
 */
export declare const abiToParams: <ABI extends AbiItem>(options: {
    fnABI: ABI;
} | {
    contractABI: ABI[];
    fnName: string;
}, ...args: {}[]) => import("@renproject/interfaces").EthArg<string, import("@renproject/interfaces").EthType, any>[];
