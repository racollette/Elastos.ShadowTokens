"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const tokenDecimals = (token) => {
    switch (token) {
        case "BTC":
            return 8;
        case "ZEC":
            return 8;
        case "BCH":
            return 8;
        case "DAI":
            return 18;
        case "ETH":
            return 18;
        case "REN":
            return 18;
        default:
            throw new Error(`Unknown token ${token}`);
    }
};
// CoinGecko price feed
const coinGeckoURL = `https://api.coingecko.com/api/v3`;
const coinGeckoID = (token) => {
    switch (token) {
        case "BTC":
            return "bitcoin";
        case "ZEC":
            return "zcash";
        case "BCH":
            return "bitcoin-cash";
        case "DAI":
            return "dai";
        case "ETH":
            return "ethereum";
        case "REN":
            return "republic-protocol";
        default:
            throw new Error(`Unknown token ${token}`);
    }
};
const coinGeckoParams = `localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`;
const getCoinGeckoPrice = (token) => axios_1.default
    .get(`${coinGeckoURL}/coins/${coinGeckoID(token)}?${coinGeckoParams}`)
    .then(response => response.data.market_data.current_price.usd || 0);
// Coinbase price feed
const coinbaseURL = (token) => `https://api.coinbase.com/v2/prices/${token.toUpperCase()}-USD/buy`;
const getCoinbasePrice = (token) => axios_1.default
    .get(coinbaseURL(token))
    .then(response => parseInt(response.data.data.amount, 10) || 0);
// const coinMarketCapID = (token: string): number => {
//     /*
//     In order to fetch the code of a currency, use:
//     ```js
//     let x;
//     Axios({
//         method: "GET",
//         url: "https://pro-api.coinmarketcap.com/v1/cryptocurrency/map",
//         params: {
//             "symbol": "BTC,ZEC,BCH"
//         },
//         headers: {
//             [`X-CMC` + `_PRO_API_KEY`]: "..."
//         },
//     }).then(r => { x = r.data.data; }).catch(console.error);
//     console.debug(x.filter(row => ["BTC", "ZEC", BCH"].includes(row.symbol)))
//     ```
//     */
//     switch (token) {
//         case "BTC":
//             return 1;
//         case "ZEC":
//             return 1437;
//         case "BCH":
//             return 1831;
//         default:
//             throw new Error(`Unknown token ${token}`);
//     }
// };
// const getCoinMarketCapPrice: PriceFeed = (token: string) =>
//     Axios.request({
//         url: "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest",
//         method: "GET",
//         params: {
//             "start": `${coinMarketCapID(token)}`,
//             "limit": "1",
//             // "convert": "USD,BTC"
//         },
//         headers: {
//             // Free-tier CMC API key.
//             [`X-CMC` + `_PRO_API_KEY`]: `${24874700}-${1064}-447d-9daa-3fd514863f67`
//         },
//     }).then((response: { data: { data: Array<{ symbol: string, quote: { USD: { price: number } } }> } }) => { return response.data.data.filter(x => x.symbol === token)[0].quote.USD.price; });
exports.getTokenPrices = async (tokens, logger) => {
    try {
        return await tokens.map((token) => ({
            token,
            priceFeeds: [
                getCoinGeckoPrice(token),
                getCoinbasePrice(token),
            ],
        }))
            .reduce(async (pricesPromise, { token, priceFeeds }) => {
            const prices = await pricesPromise;
            const returnedAPIs = [];
            for (const priceFeed of priceFeeds) {
                try {
                    returnedAPIs.push(await priceFeed);
                }
                catch (error) {
                    // tslint:disable-next-line: no-console
                    if (logger)
                        logger.error(error);
                }
            }
            return prices.set(token, returnedAPIs.length ?
                returnedAPIs.reduce((sum, price) => sum + price, 0) / returnedAPIs.length :
                0);
        }, Promise.resolve(immutable_1.OrderedMap()));
    }
    catch (error) {
        if (logger)
            logger.error(error);
        return immutable_1.OrderedMap();
    }
};
exports.normalizeValue = (prices, token, value) => {
    const shiftedValue = new bignumber_js_1.default(value).div(new bignumber_js_1.default(10).exponentiatedBy(tokenDecimals(token)));
    const timesPrice = shiftedValue.times(prices.get(token, 0));
    return timesPrice;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hQcmljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmV0Y2hQcmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsZ0VBQXFDO0FBQ3JDLHlDQUF1QztBQUV2QyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQWEsRUFBVSxFQUFFO0lBQzVDLFFBQVEsS0FBSyxFQUFFO1FBQ1gsS0FBSyxLQUFLO1lBQ04sT0FBTyxDQUFDLENBQUM7UUFDYixLQUFLLEtBQUs7WUFDTixPQUFPLENBQUMsQ0FBQztRQUNiLEtBQUssS0FBSztZQUNOLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsS0FBSyxLQUFLO1lBQ04sT0FBTyxFQUFFLENBQUM7UUFDZCxLQUFLLEtBQUs7WUFDTixPQUFPLEVBQUUsQ0FBQztRQUNkLEtBQUssS0FBSztZQUNOLE9BQU8sRUFBRSxDQUFDO1FBQ2Q7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2pEO0FBQ0wsQ0FBQyxDQUFDO0FBSUYsdUJBQXVCO0FBQ3ZCLE1BQU0sWUFBWSxHQUFHLGtDQUFrQyxDQUFDO0FBQ3hELE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBYSxFQUFVLEVBQUU7SUFDMUMsUUFBUSxLQUFLLEVBQUU7UUFDWCxLQUFLLEtBQUs7WUFDTixPQUFPLFNBQVMsQ0FBQztRQUNyQixLQUFLLEtBQUs7WUFDTixPQUFPLE9BQU8sQ0FBQztRQUNuQixLQUFLLEtBQUs7WUFDTixPQUFPLGNBQWMsQ0FBQztRQUMxQixLQUFLLEtBQUs7WUFDTixPQUFPLEtBQUssQ0FBQztRQUNqQixLQUFLLEtBQUs7WUFDTixPQUFPLFVBQVUsQ0FBQztRQUN0QixLQUFLLEtBQUs7WUFDTixPQUFPLG1CQUFtQixDQUFDO1FBQy9CO1lBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNqRDtBQUNM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