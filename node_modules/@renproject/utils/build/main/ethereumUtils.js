"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bnc_sdk_1 = __importDefault(require("bnc-sdk"));
const web3_eth_abi_1 = require("web3-eth-abi");
const web3_utils_1 = require("web3-utils");
const common_1 = require("./common");
exports.BURN_TOPIC = web3_utils_1.keccak256("LogBurn(bytes,uint256,uint256,bytes)");
/**
 * Waits for the receipt of a transaction to be available, retrying every 3
 * seconds until it is.
 *
 * @param web3 A web3 instance.
 * @param transactionHash The hash of the transaction being read.
 *
 * @/param nonce The nonce of the transaction, to detect if it has been
 *        overwritten.
 */
exports.waitForReceipt = async (web3, transactionHash, blocknative) => new Promise(async (resolve, reject) => {
    let blocknativeInitialized = false;
    try {
        if (!blocknative) {
            // Initialize Blocknative SDK.
            blocknative = new bnc_sdk_1.default({
                dappId: "6b3d07f1-b158-4cf1-99ec-919b11fe3654",
                networkId: await web3.eth.net.getId(),
            });
            blocknativeInitialized = true;
        }
        const { emitter } = blocknative.transaction(transactionHash);
        emitter.on("txSpeedUp", (state) => {
            if (state.hash) {
                transactionHash = common_1.Ox(state.hash);
            }
        });
        emitter.on("txCancel", () => {
            reject(new Error("Ethereum transaction was cancelled."));
        });
    }
    catch (error) {
        // Ignore blocknative error.
    }
    // Wait for confirmation
    let receipt;
    while (!receipt || !receipt.blockHash) {
        receipt = (await web3.eth.getTransactionReceipt(transactionHash));
        if (receipt && receipt.blockHash) {
            break;
        }
        await common_1.sleep(3 * common_1.SECONDS);
    }
    try {
        // Destroy blocknative SDK.
        if (blocknative && blocknativeInitialized) {
            blocknative.destroy();
        }
    }
    catch (error) {
        // Ignore blocknative error.
    }
    // Status might be undefined - so check against `false` explicitly.
    if (receipt.status === false) {
        reject(new Error(`Transaction was reverted. { "transactionHash": "${transactionHash}" }`));
        return;
    }
    resolve(receipt);
    return;
});
exports.extractBurnReference = async (web3, txHash) => {
    const receipt = await exports.waitForReceipt(web3, txHash);
    if (!receipt.logs) {
        throw Error("No events found in transaction");
    }
    let burnReference;
    for (const [, event] of Object.entries(receipt.logs)) {
        if (event.topics[0] === exports.BURN_TOPIC) {
            burnReference = event.topics[1];
            break;
        }
    }
    if (!burnReference && burnReference !== 0) {
        throw Error("No reference ID found in logs");
    }
    return burnReference;
};
exports.defaultAccountError = "No accounts found in Web3 wallet.";
exports.withDefaultAccount = async (web3, config) => {
    if (!config.from) {
        if (web3.eth.defaultAccount) {
            config.from = web3.eth.defaultAccount;
        }
        else {
            const accounts = await web3.eth.getAccounts();
            if (accounts.length === 0) {
                throw new Error(exports.defaultAccountError);
            }
            config.from = accounts[0];
        }
    }
    return config;
};
exports.rawEncode = (types, 
// tslint:disable-next-line:no-any
parameters) => Buffer.from(common_1.strip0x(new web3_eth_abi_1.AbiCoder().encodeParameters(types, parameters)), "hex");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1VdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ldGhlcmV1bVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQXFDO0FBR3JDLCtDQUF3QztBQUN4QywyQ0FBd0Q7QUFFeEQscUNBQXVEO0FBRTFDLFFBQUEsVUFBVSxHQUFHLHNCQUFhLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUVoRjs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLGNBQWMsR0FBRyxLQUFLLEVBQy9CLElBQVUsRUFDVixlQUF1QixFQUN2QixXQUE0QixFQUM5QixFQUFFLENBQ0EsSUFBSSxPQUFPLENBQXFCLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDdEQsSUFBSSxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFFbkMsSUFBSTtRQUNBLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCw4QkFBOEI7WUFDOUIsV0FBVyxHQUFHLElBQUksaUJBQWMsQ0FBQztnQkFDN0IsTUFBTSxFQUFFLHNDQUFzQztnQkFDOUMsU0FBUyxFQUFFLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFO2FBQ3hDLENBQUMsQ0FBQztZQUNILHNCQUFzQixHQUFHLElBQUksQ0FBQztTQUNqQztRQUVELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdELE9BQU8sQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUNaLGVBQWUsR0FBRyxXQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7WUFDeEIsTUFB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