// tslint:disable: no-console
import { BurnAndReleaseStatus, Chain, EventType, GatewayMessageType, LockAndMintStatus, LogLevel, RenNetwork, SimpleLogger, Tokens, } from "@renproject/interfaces";
import { extractBurnReference, extractError, findTransactionBySigHash, getGatewayAddress, getTokenAddress, newPromiEvent, parseRenContract, randomBytes, resolveSendCall, SECONDS, sleep, stringToNetwork, utils, waitForReceipt, withDefaultAccount, } from "@renproject/utils";
import BlocknativeSdk from "bnc-sdk";
import Push from "push.js";
import Web3 from "web3";
import { RenElementHTML, RenGatewayContainerHTML, RenIFrame } from "./html";
import { createElementFromHTML, GATEWAY_ENDPOINT_PRODUCTION, GATEWAY_ENDPOINT_STAGING, getElement, prepareParamsForSendMessage, resolveEndpoint, } from "./utils";
import { validateString } from "./validate";
import { useBrowserWeb3 } from "./web3";
const ON_CONFIRMATION_HANDLER_LIMIT = 30;
export class Gateway {
    constructor(network, config, uniqueID) {
        // tslint:disable: readonly-keyword
        this.isPaused = false;
        this.isOpen = false;
        this.currentProvider = undefined;
        this.web3 = undefined;
        this.isCancelling = false;
        // tslint:enable: readonly-keyword
        // tslint:disable-next-line: readonly-keyword readonly-array no-any
        this.promiEvent = newPromiEvent();
        this.close = () => {
            try {
                const renElement = this._getPopup();
                if (renElement.parentElement) {
                    renElement.parentElement.removeChild(renElement);
                }
                // tslint:disable-next-line: no-object-mutation
                this.isOpen = false;
            }
            catch (error) {
                this.logger.error(error);
            }
        };
        this.pause = () => {
            this._pause();
            this._sendMessage(GatewayMessageType.Pause, {}).catch(this.logger.error);
            return this;
        };
        this.resume = () => {
            this._resume();
            this._sendMessage(GatewayMessageType.Resume, {}).catch(this.logger.error);
            return this;
        };
        this.cancel = async () => {
            // tslint:disable-next-line: no-object-mutation
            this.isCancelling = true;
            await this._sendMessage(GatewayMessageType.Cancel, {});
            return this;
        };
        this.getStatus = async () => {
            return this._sendMessage(GatewayMessageType.GetStatus, {});
        };
        this._getGateways = async () => 
        // tslint:disable-next-line: promise-must-complete
        new Promise((resolve, reject) => {
            const container = this._getOrCreateGatewayContainer();
            const endpoint = resolveEndpoint(this.endpoint, this.network, "get-transfers", this.id);
            const popup = createElementFromHTML(RenIFrame(this.id, endpoint));
            if (popup) {
                container.insertBefore(popup, container.lastChild);
            }
            // tslint:disable-next-line: no-any
            let listener;
            const close = () => {
                if (popup) {
                    this._removeListener(listener);
                    container.removeChild(popup);
                }
            };
            // tslint:disable-next-line: no-any
            listener = (e) => {
                if (e.data &&
                    e.data.from === "ren" &&
                    e.data.frameID === this.id) {
                    this._acknowledgeMessage(e.data, {}, popup).catch(this.logger.error);
                    // alert(`I got a message: ${JSON.stringify(e.data)}`);
                    switch (e.data.type) {
                        case GatewayMessageType.Ready:
                            if (popup) {
                                this._sendMessage(GatewayMessageType.GetTransfers, {}, popup).catch(this.logger.error);
                            }
                            break;
                        case GatewayMessageType.Transfers:
                            if (e.data.error) {
                                close();
                                reject(new Error(e.data.error));
                            }
                            else {
                                close();
                                resolve(e.data.payload);
                            }
                            break;
                    }
                }
            };
            this._addListener(listener);
        });
        this.result = () => this.promiEvent;
        this._open = (transferParams, web3Provider) => {
            (async () => {
                // Provider can be null if the developer is handling transactions
                // outside of GatewayJS.
                const provider = web3Provider || transferParams.web3Provider;
                if (provider !== null) {
                    this.web3 = new Web3(provider);
                    try {
                        this.blocknative = new BlocknativeSdk({
                            dappId: "6b3d07f1-b158-4cf1-99ec-919b11fe3654",
                            networkId: await this.web3.eth.net.getId(),
                        });
                    }
                    catch (error) {
                        console.error(error);
                    }
                }
                // tslint:disable-next-line: no-object-mutation
                if (transferParams.sendAmount) {
                    // tslint:disable-next-line: no-parameter-reassignment
                    transferParams = resolveSendCall(stringToNetwork(this.network), transferParams);
                }
                // Check that GatewayJS isn't already open
                let existingPopup;
                try {
                    existingPopup = this._getPopup();
                }
                catch (error) {
                    /* Ignore error */
                }
                if (existingPopup) {
                    throw new Error("GatewayJS already open");
                }
                const container = this._getOrCreateGatewayContainer();
                const endpoint = resolveEndpoint(this.endpoint, this.network, "", this.id);
                const popup = createElementFromHTML(RenElementHTML(this.id, endpoint, this.isPaused));
                if (popup) {
                    container.insertBefore(popup, container.lastChild);
                    // tslint:disable-next-line: no-object-mutation
                    this.isOpen = true;
                }
                // tslint:disable-next-line: no-any
                let listener;
                const onClose = () => {
                    // Remove listener
                    this._removeListener(listener);
                    this.close();
                };
                // tslint:disable-next-line: no-any
                listener = this._eventListener(transferParams, onClose);
                this._addListener(listener);
                // Add handler to overlay
                const overlay = this._getOverlay();
                if (overlay) {
                    // tslint:disable-next-line: no-object-mutation no-any
                    overlay.onclick = () => {
                        this.pause();
                    };
                }
                // Add handler to settings button
                const settingsButton = this._getSettingsButton();
                if (settingsButton) {
                    // tslint:disable-next-line: no-object-mutation no-any
                    settingsButton.onclick = () => {
                        this._toggleSettings();
                    };
                }
                // Add handler to settings button
                const notificationButton = this._getNotificationButton();
                if (notificationButton) {
                    // tslint:disable-next-line: no-object-mutation no-any
                    notificationButton.onclick = () => {
                        try {
                            if (!Push.Permission.has()) {
                                Push.Permission.request();
                            }
                        }
                        catch (error) {
                            this.logger.error(error);
                        }
                        notificationButton.classList.add("_ren_notifications-hidden");
                    };
                }
                if (Push.Permission.has()) {
                    notificationButton.classList.add("_ren_notifications-hidden");
                }
            })().catch(this.promiEvent.reject);
            return this;
        };
        this._eventListener = (transferParams, onClose) => (e) => {
            if (e.data && e.data.from === "ren" && e.data.frameID === this.id) {
                // alert(`I got a message: ${JSON.stringify(e.data)}`);
                switch (e.data.type) {
                    case GatewayMessageType.Ready:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        const transferParamsFixed = prepareParamsForSendMessage(transferParams);
                        this._sendMessage(GatewayMessageType.TransferDetails, {
                            transferDetails: transferParamsFixed,
                            paused: this.isPaused,
                            cancelled: this.isCancelling,
                        }).catch(this.logger.error);
                        break;
                    case GatewayMessageType.Status:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        const { status, details } = e.data.payload;
                        if (status) {
                            this.promiEvent.emit("status", status, details);
                        }
                        break;
                    case GatewayMessageType.TransferUpdated:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        const { transfer } = e.data.payload;
                        this.promiEvent.emit("transferUpdated", transfer);
                        break;
                    case GatewayMessageType.Pause:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        this._pause();
                        break;
                    case GatewayMessageType.Resume:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        this._resume();
                        break;
                    case GatewayMessageType.Cancel:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        onClose();
                        if (this.isCancelling) {
                            // tslint:disable-next-line: no-object-mutation
                            this.isCancelling = false;
                            return;
                        }
                        else {
                            // tslint:disable-next-line: no-object-mutation
                            this.isCancelling = false;
                            this.promiEvent.reject(new Error("Transfer cancelled by user"));
                            return;
                        }
                    case GatewayMessageType.SendEthereumTx:
                        (async () => {
                            try {
                                if (!this.web3) {
                                    throw new Error(`No Web3 defined`);
                                }
                                const txConfig = await withDefaultAccount(this.web3, e.data.payload.transactionConfig);
                                const promiEvent = this.web3.eth.sendTransaction(txConfig);
                                const txHash = await new Promise((resolve, reject) => {
                                    promiEvent.on("transactionHash", resolve);
                                    promiEvent.catch(reject);
                                });
                                // It may be simpler to replace with
                                // `promiEvent.on`, depending on wether or not
                                // .on causes indefinite network requests or
                                // if web3 fetches blocks anyways.
                                const listenForConfirmations = () => promiEvent.once("confirmation", (confirmations) => {
                                    this._sendMessage(GatewayMessageType.SendEthereumTxConfirmations, { txHash, confirmations }).catch(this.logger.error);
                                    if (confirmations <
                                        ON_CONFIRMATION_HANDLER_LIMIT) {
                                        listenForConfirmations();
                                    }
                                });
                                listenForConfirmations();
                                this._acknowledgeMessage(e.data, { txHash }).catch(this.logger.error);
                            }
                            catch (error) {
                                this._acknowledgeMessage(e.data, {
                                    error: extractError(error),
                                }).catch(this.logger.error);
                            }
                        })().catch(this.logger.error);
                        return;
                    case GatewayMessageType.GetEthereumTxStatus:
                        (async () => {
                            try {
                                if (!this.web3) {
                                    throw new Error(`No Web3 defined`);
                                }
                                const txHash = e.data
                                    .payload.txHash;
                                const currentBlock = await this.web3.eth.getBlockNumber();
                                const receipt = await waitForReceipt(this.web3, txHash, this.blocknative);
                                const confirmations = Math.max(currentBlock - receipt.blockNumber, 0);
                                this._acknowledgeMessage(e.data, { confirmations, reverted: false }).catch(this.logger.error);
                            }
                            catch (error) {
                                // TODO: Check if tx was reverted or getting receipt failed.
                                this._acknowledgeMessage(e.data, {
                                    reverted: true,
                                    error: extractError(error),
                                }).catch(this.logger.error);
                            }
                        })().catch(this.logger.error);
                        return;
                    case GatewayMessageType.GetEthereumTxBurn:
                        (async () => {
                            try {
                                if (!this.web3) {
                                    throw new Error(`No Web3 defined`);
                                }
                                const txHash = e.data
                                    .payload.txHash;
                                const burnReference = await extractBurnReference(this.web3, txHash);
                                this._acknowledgeMessage(e.data, { burnReference }).catch(this.logger.error);
                            }
                            catch (error) {
                                this.logger.error(error);
                                this._acknowledgeMessage(e.data, {
                                    error: extractError(error),
                                }).catch(this.logger.error);
                            }
                        })().catch(this.logger.error);
                        return;
                    case GatewayMessageType.FindMintTransaction:
                        (async () => {
                            try {
                                if (!this.web3) {
                                    throw new Error(`No Web3 defined`);
                                }
                                const { sigHash, token } = e.data
                                    .payload;
                                const txHash = await findTransactionBySigHash(this.network, this.web3, token, sigHash, this.logger);
                                this._acknowledgeMessage(e.data, { txHash }).catch(this.logger.error);
                            }
                            catch (error) {
                                this.logger.error(error);
                                this._acknowledgeMessage(e.data, {
                                    error: extractError(error),
                                }).catch(this.logger.error);
                            }
                        })().catch(this.logger.error);
                        return;
                    case GatewayMessageType.Error:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        onClose();
                        this.promiEvent.reject(new Error(e.data.payload.message ||
                            "Error thrown from Gateway iframe."));
                        return;
                    case GatewayMessageType.Done:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        onClose();
                        this.promiEvent.resolve(e.data.payload);
                        return;
                    case GatewayMessageType.RequestNotificationPermission:
                        this._acknowledgeMessage(e.data, {}).catch(this.logger.error);
                        if (!Push.Permission.has()) {
                            this._getNotificationButton().classList.add("_ren_notifications-blue");
                        }
                        return;
                    case GatewayMessageType.ShowNotification:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                        const { title, body } = e.data
                            .payload;
                        try {
                            if (Push.Permission.has()) {
                                // tslint:disable-next-line: insecure-random
                                const tag = String(Math.random());
                                Push.create(title, {
                                    body,
                                    icon: "https://gateway.renproject.io/favicon.ico",
                                    timeout: 4000,
                                    tag,
                                    onClick: () => {
                                        window.focus();
                                        Push.close(tag);
                                        this.resume();
                                    },
                                }).catch(this.logger.error);
                            }
                        }
                        catch (error) {
                            this.logger.error(error);
                        }
                        return;
                    default:
                        this._acknowledgeMessage(e.data).catch(this.logger.error);
                }
            }
        };
        this._sendMessage = async (type, payload, iframeIn) => 
        // tslint:disable-next-line: no-any
        new Promise(async (resolve) => {
            // TODO: Allow response in acknowledgement.
            let frame;
            try {
                frame = iframeIn || this._getIFrame();
            }
            catch (error) {
                this.logger.error(error);
                return;
            }
            while (!frame) {
                await sleep(1 * SECONDS);
            }
            const messageID = randomBytes(8);
            // tslint:disable-next-line: no-any
            let listener;
            let acknowledged = false;
            const removeListener = () => {
                acknowledged = true;
                this._removeListener(listener);
            };
            // tslint:disable-next-line: no-any
            listener = (e) => {
                if (e.data &&
                    e.data.from === "ren" &&
                    e.data.type === GatewayMessageType.Acknowledgement &&
                    e.data.messageID === messageID) {
                    removeListener();
                    resolve(e.data.payload);
                }
            };
            this._addListener(listener);
            // Repeat message until acknowledged
            let count = 0;
            // tslint:disable-next-line: no-any
            const contentWindow = frame.contentWindow;
            while (!acknowledged && contentWindow) {
                if (count >= 1000) {
                    throw new Error(`Lost communication with Gateway iFrame - unable post message.`);
                }
                count++;
                const gatewayMessage = {
                    from: "ren",
                    frameID: this.id,
                    type,
                    payload,
                    messageID,
                };
                contentWindow.postMessage(gatewayMessage, "*");
                // Sleep for 1 second
                await sleep(1 * SECONDS);
            }
        });
        // tslint:disable-next-line: no-any
        this._acknowledgeMessage = async (message, payload, iframeIn) => {
            if (message.type === GatewayMessageType.Acknowledgement) {
                return;
            }
            let frame;
            try {
                frame = iframeIn || this._getIFrame();
            }
            catch (error) {
                this.logger.error(error);
                return;
            }
            while (!frame) {
                await sleep(1 * SECONDS);
            }
            const response = {
                from: "ren",
                type: GatewayMessageType.Acknowledgement,
                frameID: message.frameID,
                payload: payload || {},
                messageID: message.messageID,
            };
            // tslint:disable-next-line: no-any
            const contentWindow = frame.contentWindow;
            contentWindow.postMessage(response, "*");
        };
        this._addListener = (
        // tslint:disable-next-line: no-any
        listener) => {
            window.addEventListener("message", listener);
        };
        this._removeListener = (
        // tslint:disable-next-line: no-any
        listener) => {
            window.removeEventListener("message", listener);
        };
        this._toggleSettings = () => {
            this._sendMessage(GatewayMessageType.ToggleSettings, {}).catch(this.logger.error);
        };
        this._pause = () => {
            // tslint:disable-next-line: no-object-mutation
            this.isPaused = true;
            try {
                this._getPopup().classList.add("_ren_gateway-minified");
            }
            catch (error) {
                this.logger.error(error);
            }
        };
        this._resume = () => {
            // tslint:disable-next-line: no-object-mutation
            this.isPaused = false;
            try {
                this._getPopup().classList.remove("_ren_gateway-minified");
            }
            catch (error) {
                this.logger.error(error);
            }
        };
        this._getSettingsButton = () => getElement(`_ren_settings-${this.id}`);
        this._getNotificationButton = () => getElement(`_ren_notifications-${this.id}`);
        this._getOverlay = () => getElement(`_ren_overlay-${this.id}`);
        this._getPopup = () => getElement(`_ren_gateway-${this.id}`);
        this._getIFrame = () => getElement(`_ren_iframe-${this.id}`);
        this._getOrCreateGatewayContainer = () => {
            try {
                return getElement(`_ren_gatewayContainer`);
            }
            catch (error) {
                // Ignore error
            }
            const body = [
                ...(Array.from(document.getElementsByTagName("body")) || []),
                ...(Array.from(document.getElementsByTagName("html")) || []),
            ];
            const popup = createElementFromHTML(RenGatewayContainerHTML());
            if (body[0] && popup) {
                body[0].insertBefore(popup, body[0].lastChild);
            }
            return getElement(`_ren_gatewayContainer`);
        };
        this.logger =
            (config && config.logger) ||
                new SimpleLogger((config && config.logLevel) || LogLevel.Error);
        this.network = network;
        if (!config.endpoint) {
            throw new Error("Must provide endpoint in Gateway config");
        }
        this.endpoint = config.endpoint;
        this.id = uniqueID || randomBytes(8);
    }
}
export default class GatewayJS {
    // tslint:disable-next-line: readonly-keyword
    constructor(network, config) {
        /**
         * Returns a map containing previously opened gateways.
         */
        this.getGateways = async (options) => {
            const gateways = await new Gateway(this.network, this.config)._getGateways();
            // Delete gateways that have been returned
            if (!options || !options.all) {
                for (const key of gateways.keys()) {
                    const gateway = gateways.get(key);
                    if (gateway && gateway.returned) {
                        gateways.delete(key);
                    }
                }
            }
            return gateways;
        };
        /**
         * Start a cross-chain transfer onto Ethereum.
         *
         * @param {(LockAndMintParams | LockAndMintParamsSimple | SendParams)} params An object specifying the details
         *        required for the transfer.
         * @returns {Gateway}
         */
        this.lockAndMint = (params, uniqueID) => {
            if (params.sendTo &&
                !params.contractFn) {
                params = resolveSendCall(this.network, params);
            }
            else if (params.sendTo) {
                const { sendTo, contractFn, contractParams, txConfig, ...restOfParams } = params;
                params = {
                    ...restOfParams,
                    contractCalls: [
                        { sendTo, contractFn, contractParams, txConfig },
                    ],
                };
            }
            return new Gateway(this.network, this.config, uniqueID)._open(params);
        };
        /**
         * Start a cross-chain transfer away from Ethereum.
         *
         * @param {(BurnAndReleaseParams | BurnAndReleaseParamsSimple | SendParams)} params An object specifying the details
         *        required for the transfer.
         * @returns {Gateway}
         */
        this.burnAndRelease = (params, uniqueID) => {
            if (params.sendTo &&
                !params.contractFn) {
                params = resolveSendCall(this.network, params);
            }
            else if (params.sendTo) {
                const { sendTo, contractFn, contractParams, txConfig, ...restOfParams } = params;
                params = {
                    ...restOfParams,
                    contractCalls: [
                        { sendTo, contractFn, contractParams, txConfig },
                    ],
                };
            }
            return new Gateway(this.network, this.config, uniqueID)._open(params);
        };
        this.open = (params, uniqueID) => {
            // tslint:disable-next-line: strict-type-predicates
            if (params.eventType === EventType.LockAndMint) {
                return this.recoverTransfer(undefined, params);
            }
            const sendToken = params.sendToken;
            if (sendToken === "BTC" || sendToken === "ZEC" || sendToken === "BCH") {
                throw new Error(`Ambiguous token ${sendToken} - call "lockAndMint" or "burnAndRelease" instead of "open"`);
            }
            if (parseRenContract(sendToken).to === Chain.Ethereum) {
                return this.lockAndMint(params, uniqueID);
            }
            else {
                return this.burnAndRelease(params, uniqueID);
            }
        };
        this.send = (params, uniqueID) => {
            return new Gateway(this.network, this.config, uniqueID)._open(params);
        };
        this.recoverTransfer = (web3Provider, params, uniqueID) => {
            return new Gateway(this.network, this.config, uniqueID || params.id)._open(params, web3Provider);
        };
        this.getTokenAddress = (web3, token) => getTokenAddress(stringToNetwork(this.network), web3, token);
        this.getGatewayAddress = (web3, token) => getGatewayAddress(stringToNetwork(this.network), web3, token);
        const publicNetworks = [
            RenNetwork.Mainnet,
            RenNetwork.Chaosnet,
            RenNetwork.Testnet,
        ];
        if (typeof network === "string") {
            validateString(network, `Invalid network. Expected one of ${publicNetworks.join(", ")}`, Object.values(RenNetwork));
        }
        this.network = stringToNetwork(network);
        // NOTE: In a future release, all networks will use the production endpoint.
        this.config = {
            ...config,
            endpoint: (config &&
                (config.endpoint === "staging"
                    ? GATEWAY_ENDPOINT_STAGING
                    : config.endpoint)) ||
                GATEWAY_ENDPOINT_PRODUCTION,
        };
    }
}
GatewayJS.Tokens = Tokens;
GatewayJS.Networks = RenNetwork;
GatewayJS.Chains = Chain;
GatewayJS.LockAndMintStatus = LockAndMintStatus;
GatewayJS.BurnAndReleaseStatus = BurnAndReleaseStatus;
GatewayJS.utils = { ...utils, useBrowserWeb3 };
////////////////////////////////////////////////////////////////////////////////
// EXPORTS                                                                    //
// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //
////////////////////////////////////////////////////////////////////////////////
// tslint:disable: no-any no-object-mutation strict-type-predicates no-typeof-undefined
// tslint:disable-next-line: no-string-literal
GatewayJS["default"] = GatewayJS.GatewayJS = GatewayJS;
// AMD
try {
    // @ts-ignore
    if (typeof define === "function" && define.amd) {
        // @ts-ignore
        define(() => GatewayJS);
    }
}
catch (error) {
    /* ignore */
}
// Node.js and other environments that support module.exports.
try {
    // @ts-ignore
    if (typeof module !== "undefined" && module.exports) {
        module.exports = GatewayJS;
    }
}
catch (error) {
    /* ignore */
}
// Browser.
try {
    // @ts-ignore
    if (typeof window !== "undefined" && window) {
        window.GatewayJS = GatewayJS;
    }
}
catch (error) {
    /* ignore */
}
//# sourceMappingURL=data:application/json;base64,