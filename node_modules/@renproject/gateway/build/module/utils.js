import { toFixed } from "@renproject/utils";
// For now, the endpoints are network specific.
export const GATEWAY_ENDPOINT_STAGING = "https://gateway-staging.renproject.io/";
export const GATEWAY_ENDPOINT_PRODUCTION = "https://renproject.github.io/gateway-staging.renproject.io/";
export const getElement = (id) => {
    const element = document.getElementById(id);
    if (!element) {
        throw new Error(`Unable to find element ${id}`);
    }
    return element;
};
export const createElementFromHTML = (htmlString) => {
    const div = document.createElement("div");
    // tslint:disable-next-line: no-object-mutation no-inner-html
    div.innerHTML = htmlString.trim();
    return div.firstChild;
};
export const resolveEndpoint = (endpointIn, network, pathIn, transferID) => {
    // Remove ending '/' from endpoint
    const endpoint = endpointIn.slice(endpointIn.length - 1) === "/"
        ? endpointIn.slice(0, endpointIn.length - 1)
        : endpointIn;
    // Remove starting '/' from path
    const path = pathIn.slice(0, 1) === "/" ? pathIn.slice(1, pathIn.length) : pathIn;
    return `${endpoint}/#/${path}?network=${network.name}&${transferID ? `id=${transferID}` : ""}`;
};
// tslint:disable-next-line: readonly-keyword no-any
const fixBigNumber = (value, key) => {
    try {
        // tslint:disable-next-line: strict-type-predicates
        if (value[key] && typeof value[key] === "object") {
            // tslint:disable-next-line: no-object-mutation no-any
            value[key] = toFixed(value[key]);
        }
    }
    catch (error) {
        // Ignore error - may be readonly value
    }
};
/**
 * prepareParamsForSendMessage turns possible BigNumber values into strings
 * before passing the params to sendMessage.
 * The error message `can't clone ...` is thrown if this step is skipped.
 * @param transferParamsIn The parameters being fixed.
 */
export const prepareParamsForSendMessage = (transferParamsIn) => {
    // Certain types can't be sent via sendMessage - e.g. BigNumbers.
    const { web3Provider, ...transferParamsFiltered } = transferParamsIn;
    const transferParams = transferParamsFiltered;
    // tslint:disable-next-line: no-unnecessary-type-assertion
    fixBigNumber(transferParams, "suggestedAmount");
    // Contract call values
    try {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const contractCalls = transferParams
            .contractCalls;
        if (contractCalls) {
            for (const contractCall of contractCalls) {
                const contractParamsInner = contractCall.contractParams;
                if (contractParamsInner) {
                    for (const contractParam of contractParamsInner) {
                        fixBigNumber(contractParam, "value");
                    }
                }
            }
        }
        // tslint:disable-next-line: no-console
    }
    catch (error) {
        console.error(error);
    }
    return transferParams;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTVDLCtDQUErQztBQUMvQyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FDakMsd0NBQXdDLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3BDLDZEQUE2RCxDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDbkQ7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLDZEQUE2RDtJQUM3RCxHQUFHLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzNCLFVBQWtCLEVBQ2xCLE9BQTBCLEVBQzFCLE1BQWMsRUFDZCxVQUFtQixFQUNyQixFQUFFO0lBQ0Esa0NBQWtDO0lBQ2xDLE1BQU0sUUFBUSxHQUNWLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHO1FBQzNDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3JCLGdDQUFnQztJQUNoQyxNQUFNLElBQUksR0FDTixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3pFLE9BQU8sR0FBRyxRQUFRLE1BQU0sSUFBSSxZQUFZLE9BQU8sQ0FBQyxJQUFJLElBQ2hELFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDdEMsRUFBRSxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUYsb0RBQW9EO0FBQ3BELE1BQU0sWUFBWSxHQUFHLENBQ2pCLEtBQVksRUFDWixHQUFnQixFQUNsQixFQUFFO0lBQ0EsSUFBSTtRQUNBLG1EQUFtRDtRQUNuRCxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDOUMsc0RBQXNEO1lBQ3JELEtBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDN0M7S0FDSjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osdUNBQXVDO0tBQzFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUY7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN2QyxnQkFBeUUsRUFDTixFQUFFO0lBQ3JFLGlFQUFpRTtJQUVqRSxNQUFNLEVBQ0YsWUFBWSxFQUNaLEdBQUcsc0JBQXNCLEVBQzVCLEdBQUcsZ0JBQWtDLENBQUM7SUFDdkMsTUFBTSxjQUFjLEdBQUcsc0JBQW9ELENBQUM7SUFFNUUsMERBQTBEO0lBQzFELFlBQVksQ0FBQyxjQUFtQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFckUsdUJBQXVCO0lBQ3ZCLElBQUk7UUFDQSwwREFBMEQ7UUFDMUQsTUFBTSxhQUFhLEdBQUksY0FBb0M7YUFDdEQsYUFBYSxDQUFDO1FBQ25CLElBQUksYUFBYSxFQUFFO1lBQ2YsS0FBSyxNQUFNLFlBQVksSUFBSSxhQUFhLEVBQUU7Z0JBQ3RDLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDeEQsSUFBSSxtQkFBbUIsRUFBRTtvQkFDckIsS0FBSyxNQUFNLGFBQWEsSUFBSSxtQkFBbUIsRUFBRTt3QkFDN0MsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztxQkFDeEM7aUJBQ0o7YUFDSjtTQUNKO1FBQ0QsdUNBQXVDO0tBQzFDO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDMUIsQ0FBQyxDQUFDIn0=