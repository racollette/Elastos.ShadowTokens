"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@renproject/utils");
// For now, the endpoints are network specific.
exports.GATEWAY_ENDPOINT_STAGING = "https://gateway-staging.renproject.io/";
exports.GATEWAY_ENDPOINT_PRODUCTION = "https://renproject.github.io/gateway-staging.renproject.io/";
exports.getElement = (id) => {
    const element = document.getElementById(id);
    if (!element) {
        throw new Error(`Unable to find element ${id}`);
    }
    return element;
};
exports.createElementFromHTML = (htmlString) => {
    const div = document.createElement("div");
    // tslint:disable-next-line: no-object-mutation no-inner-html
    div.innerHTML = htmlString.trim();
    return div.firstChild;
};
exports.resolveEndpoint = (endpointIn, network, pathIn, transferID) => {
    // Remove ending '/' from endpoint
    const endpoint = endpointIn.slice(endpointIn.length - 1) === "/"
        ? endpointIn.slice(0, endpointIn.length - 1)
        : endpointIn;
    // Remove starting '/' from path
    const path = pathIn.slice(0, 1) === "/" ? pathIn.slice(1, pathIn.length) : pathIn;
    return `${endpoint}/#/${path}?network=${network.name}&${transferID ? `id=${transferID}` : ""}`;
};
// tslint:disable-next-line: readonly-keyword no-any
const fixBigNumber = (value, key) => {
    try {
        // tslint:disable-next-line: strict-type-predicates
        if (value[key] && typeof value[key] === "object") {
            // tslint:disable-next-line: no-object-mutation no-any
            value[key] = utils_1.toFixed(value[key]);
        }
    }
    catch (error) {
        // Ignore error - may be readonly value
    }
};
/**
 * prepareParamsForSendMessage turns possible BigNumber values into strings
 * before passing the params to sendMessage.
 * The error message `can't clone ...` is thrown if this step is skipped.
 * @param transferParamsIn The parameters being fixed.
 */
exports.prepareParamsForSendMessage = (transferParamsIn) => {
    // Certain types can't be sent via sendMessage - e.g. BigNumbers.
    const _a = transferParamsIn, { web3Provider } = _a, transferParamsFiltered = __rest(_a, ["web3Provider"]);
    const transferParams = transferParamsFiltered;
    // tslint:disable-next-line: no-unnecessary-type-assertion
    fixBigNumber(transferParams, "suggestedAmount");
    // Contract call values
    try {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const contractCalls = transferParams
            .contractCalls;
        if (contractCalls) {
            for (const contractCall of contractCalls) {
                const contractParamsInner = contractCall.contractParams;
                if (contractParamsInner) {
                    for (const contractParam of contractParamsInner) {
                        fixBigNumber(contractParam, "value");
                    }
                }
            }
        }
        // tslint:disable-next-line: no-console
    }
    catch (error) {
        console.error(error);
    }
    return transferParams;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVFBLDZDQUE0QztBQUU1QywrQ0FBK0M7QUFDbEMsUUFBQSx3QkFBd0IsR0FDakMsd0NBQXdDLENBQUM7QUFDaEMsUUFBQSwyQkFBMkIsR0FDcEMsNkRBQTZELENBQUM7QUFFckQsUUFBQSxVQUFVLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRTtJQUNyQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDVixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLDZEQUE2RDtJQUM3RCxHQUFHLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQUcsQ0FDM0IsVUFBa0IsRUFDbEIsT0FBMEIsRUFDMUIsTUFBYyxFQUNkLFVBQW1CLEVBQ3JCLEVBQUU7SUFDQSxrQ0FBa0M7SUFDbEMsTUFBTSxRQUFRLEdBQ1YsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUc7UUFDM0MsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDckIsZ0NBQWdDO0lBQ2hDLE1BQU0sSUFBSSxHQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDekUsT0FBTyxHQUFHLFFBQVEsTUFBTSxJQUFJLFlBQVksT0FBTyxDQUFDLElBQUksSUFDaEQsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUN0QyxFQUFFLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRixvREFBb0Q7QUFDcEQsTUFBTSxZQUFZLEdBQUcsQ0FDakIsS0FBWSxFQUNaLEdBQWdCLEVBQ2xCLEVBQUU7SUFDQSxJQUFJO1FBQ0EsbURBQW1EO1FBQ25ELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUM5QyxzREFBc0Q7WUFDckQsS0FBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGVBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM3QztLQUNKO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWix1Q0FBdUM7S0FDMUM7QUFDTCxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNVLFFBQUEsMkJBQTJCLEdBQUcsQ0FDdkMsZ0JBQXlFLEVBQ04sRUFBRTtJQUNyRSxpRUFBaUU7SUFFakUsTUFBTSxxQkFHZ0MsRUFIaEMsRUFDRixZQUFZLE9BRXNCLEVBRGxDLHFEQUNrQyxDQUFDO0lBQ3ZDLE1BQU0sY0FBYyxHQUFHLHNCQUFvRCxDQUFDO0lBRTVFLDBEQUEwRDtJQUMxRCxZQUFZLENBQUMsY0FBbUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXJFLHVCQUF1QjtJQUN2QixJQUFJO1FBQ0EsMERBQTBEO1FBQzFELE1BQU0sYUFBYSxHQUFJLGNBQW9DO2FBQ3RELGFBQWEsQ0FBQztRQUNuQixJQUFJLGFBQWEsRUFBRTtZQUNmLEtBQUssTUFBTSxZQUFZLElBQUksYUFBYSxFQUFFO2dCQUN0QyxNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUM7Z0JBQ3hELElBQUksbUJBQW1CLEVBQUU7b0JBQ3JCLEtBQUssTUFBTSxhQUFhLElBQUksbUJBQW1CLEVBQUU7d0JBQzdDLFlBQVksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7cUJBQ3hDO2lCQUNKO2FBQ0o7U0FDSjtRQUNELHVDQUF1QztLQUMxQztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4QjtJQUVELE9BQU8sY0FBYyxDQUFDO0FBQzFCLENBQUMsQ0FBQyJ9