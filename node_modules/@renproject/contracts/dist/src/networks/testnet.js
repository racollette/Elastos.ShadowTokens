"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var ERC20_json_1 = __importDefault(require("@renproject/sol/build/erc/ERC20.json"));
var BasicAdapter_json_1 = __importDefault(require("@renproject/sol/build/testnet/BasicAdapter.json"));
var BCHGateway_json_1 = __importDefault(require("@renproject/sol/build/testnet/BCHGateway.json"));
var BTCGateway_json_1 = __importDefault(require("@renproject/sol/build/testnet/BTCGateway.json"));
var DarknodePayment_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodePayment.json"));
var DarknodePaymentStore_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodePaymentStore.json"));
var DarknodeRegistryLogicV1_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodeRegistryLogicV1.json"));
var DarknodeRegistryProxy_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodeRegistryProxy.json"));
var DarknodeRegistryStore_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodeRegistryStore.json"));
var DarknodeSlasher_json_1 = __importDefault(require("@renproject/sol/build/testnet/DarknodeSlasher.json"));
var GatewayLogicV1_json_1 = __importDefault(require("@renproject/sol/build/testnet/GatewayLogicV1.json"));
var GatewayRegistry_json_1 = __importDefault(require("@renproject/sol/build/testnet/GatewayRegistry.json"));
var ProtocolLogicV1_json_1 = __importDefault(require("@renproject/sol/build/testnet/ProtocolLogicV1.json"));
var ProtocolProxy_json_1 = __importDefault(require("@renproject/sol/build/testnet/ProtocolProxy.json"));
var RenBCH_json_1 = __importDefault(require("@renproject/sol/build/testnet/RenBCH.json"));
var RenBTC_json_1 = __importDefault(require("@renproject/sol/build/testnet/RenBTC.json"));
var RenToken_json_1 = __importDefault(require("@renproject/sol/build/testnet/RenToken.json"));
var RenZEC_json_1 = __importDefault(require("@renproject/sol/build/testnet/RenZEC.json"));
var ZECGateway_json_1 = __importDefault(require("@renproject/sol/build/testnet/ZECGateway.json"));
var network_1 = require("./network");
var networkID = 42;
// mintAuthority is generated by
// > utils.toChecksumAddress(utils.pubToAddress("... public key ...", true).toString("hex"))
exports["default"] = network_1.CastNetwork({
    version: "1.0.0",
    name: "testnet",
    chain: "kovan",
    isTestnet: true,
    label: "Testnet",
    chainLabel: "Kovan",
    networkID: networkID,
    infura: "https://kovan.infura.io",
    etherscan: "https://kovan.etherscan.io",
    lightnode: "https://lightnode-testnet.herokuapp.com",
    addresses: {
        ren: {
            Protocol: {
                address: ProtocolProxy_json_1["default"].networks[networkID].address,
                abi: ProtocolLogicV1_json_1["default"].abi,
                artifact: ProtocolProxy_json_1["default"]
            },
            DarknodeSlasher: {
                address: DarknodeSlasher_json_1["default"].networks[networkID].address,
                abi: DarknodeSlasher_json_1["default"].abi,
                artifact: DarknodeSlasher_json_1["default"]
            },
            DarknodeRegistry: {
                address: DarknodeRegistryProxy_json_1["default"].networks[networkID].address,
                abi: DarknodeRegistryLogicV1_json_1["default"].abi,
                artifact: DarknodeRegistryLogicV1_json_1["default"],
                block: 17625998
            },
            DarknodeRegistryStore: {
                address: DarknodeRegistryStore_json_1["default"].networks[networkID].address,
                abi: DarknodeRegistryStore_json_1["default"].abi,
                artifact: DarknodeRegistryStore_json_1["default"]
            },
            DarknodePayment: {
                address: DarknodePayment_json_1["default"].networks[networkID].address,
                abi: DarknodePayment_json_1["default"].abi,
                artifact: DarknodePayment_json_1["default"]
            },
            DarknodePaymentStore: {
                address: DarknodePaymentStore_json_1["default"].networks[networkID].address,
                abi: DarknodePaymentStore_json_1["default"].abi,
                artifact: DarknodePaymentStore_json_1["default"]
            }
        },
        gateways: {
            GatewayRegistry: {
                address: GatewayRegistry_json_1["default"].networks[networkID].address,
                abi: GatewayRegistry_json_1["default"].abi,
                artifact: GatewayRegistry_json_1["default"]
            },
            RenBTC: {
                _address: RenBTC_json_1["default"].networks[networkID].address,
                abi: RenBTC_json_1["default"].abi,
                artifact: RenBTC_json_1["default"],
                description: "gatewayRegistry.getTokenBySymbol(\"BTC\")"
            },
            BTCGateway: {
                _address: BTCGateway_json_1["default"].networks[networkID].address,
                abi: GatewayLogicV1_json_1["default"].abi,
                artifact: GatewayLogicV1_json_1["default"],
                description: "gatewayRegistry.getGatewayBySymbol(\"BTC\")"
            },
            RenZEC: {
                _address: RenZEC_json_1["default"].networks[networkID].address,
                abi: RenZEC_json_1["default"].abi,
                artifact: RenZEC_json_1["default"],
                description: "gatewayRegistry.getTokenBySymbol(\"ZEC\")"
            },
            ZECGateway: {
                _address: ZECGateway_json_1["default"].networks[networkID].address,
                abi: GatewayLogicV1_json_1["default"].abi,
                artifact: GatewayLogicV1_json_1["default"],
                description: "gatewayRegistry.getGatewayBySymbol(\"ZEC\")"
            },
            RenBCH: {
                _address: RenBCH_json_1["default"].networks[networkID].address,
                abi: RenBCH_json_1["default"].abi,
                artifact: RenBCH_json_1["default"],
                description: "gatewayRegistry.getTokenBySymbol(\"BCH\")"
            },
            BCHGateway: {
                _address: BCHGateway_json_1["default"].networks[networkID].address,
                abi: GatewayLogicV1_json_1["default"].abi,
                artifact: GatewayLogicV1_json_1["default"],
                description: "gatewayRegistry.getGatewayBySymbol(\"BCH\")"
            },
            BasicAdapter: {
                address: BasicAdapter_json_1["default"].networks[networkID].address,
                abi: BasicAdapter_json_1["default"].abi,
                artifact: BasicAdapter_json_1["default"]
            }
        },
        tokens: {
            DAI: {
                address: "0xc4375b7de8af5a38a93548eb8453a498222c4ff2",
                decimals: 18
            },
            BTC: {
                address: RenBTC_json_1["default"].networks[networkID].address,
                abi: RenBTC_json_1["default"].abi,
                artifact: RenBTC_json_1["default"],
                decimals: 8
            },
            ZEC: {
                address: RenZEC_json_1["default"].networks[networkID].address,
                abi: RenZEC_json_1["default"].abi,
                artifact: RenZEC_json_1["default"],
                decimals: 8
            },
            BCH: {
                address: RenBCH_json_1["default"].networks[networkID].address,
                abi: RenBCH_json_1["default"].abi,
                artifact: RenBCH_json_1["default"],
                decimals: 8
            },
            REN: {
                address: RenToken_json_1["default"].networks[networkID].address,
                abi: RenToken_json_1["default"].abi,
                artifact: RenToken_json_1["default"],
                decimals: 18
            },
            ETH: {
                address: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                decimals: 18
            }
        },
        erc: {
            ERC20: {
                abi: ERC20_json_1["default"].abi,
                artifact: ERC20_json_1["default"]
            }
        }
    }
});
