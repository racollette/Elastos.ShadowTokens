"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bitcore_lib_1 = require("bitcore-lib");
const bs58_1 = require("bs58");
const BTCHandler_1 = require("send-crypto/build/main/handlers/BTC/BTCHandler");
const wallet_address_validator_1 = require("wallet-address-validator");
const common_1 = require("./common");
const hex_1 = require("./hex");
exports.createBTCAddress = common_1.createAddress(bitcore_lib_1.Networks, bitcore_lib_1.Opcode, bitcore_lib_1.Script);
exports.getBitcoinUTXOs = ({ isTestnet }) => {
    return async (address, confirmations) => {
        return BTCHandler_1.getUTXOs(isTestnet, { address, confirmations });
    };
};
exports.getBitcoinConfirmations = ({ isTestnet, }) => {
    return async (txHash) => {
        return BTCHandler_1.getConfirmations(isTestnet, txHash);
    };
};
exports.getBitcoinUTXO = ({ isTestnet }) => {
    return async (txHash, vOut) => {
        return BTCHandler_1.getUTXO(isTestnet, txHash, vOut);
    };
};
// export const btcAddressToHex = (address: string) => {
//     const addressBuffer = new Address(address).toBuffer();
//     // Concatenate checksum
//     return Ox(Buffer.concat([addressBuffer, Base58Check.checksum(addressBuffer)]));
// };
// export const btcAddressFrom = (address: string, encoding: "hex" | "base64") => {
//     // tslint:disable-next-line: no-any
//     return (Address as any)
//         .fromBuffer(Buffer.from(encoding === "hex" ? strip0x(address) : address, encoding).slice(0, -4))
//         .toString();
// };
exports.btcAddressToHex = (address) => hex_1.Ox(Buffer.from(address));
const isBTCAddress = (address) => wallet_address_validator_1.validate(address, "btc", "testnet") || wallet_address_validator_1.validate(address, "btc", "prod");
const btcTactics = {
    decoders: [
        (address) => Buffer.from(address),
        (address) => Buffer.from(address, "base64"),
        (address) => Buffer.from(hex_1.strip0x(address), "hex"),
    ],
    encoders: [
        (buffer) => bs58_1.encode(buffer),
        (buffer) => buffer.toString(),
    ],
};
exports.anyAddressFrom = (isAnyAddress, { encoders, decoders }) => (address) => {
    for (const encoder of encoders) {
        for (const decoder of decoders) {
            try {
                const encoded = encoder(decoder(address));
                if (isAnyAddress(encoded)) {
                    return encoded;
                }
            }
            catch (error) {
                // Ignore errors
            }
        }
    }
    return address;
};
exports.btcAddressFrom = exports.anyAddressFrom(isBTCAddress, btcTactics);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2J0Yy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF1RDtBQUN2RCwrQkFBOEI7QUFDOUIsK0VBSXdEO0FBQ3hELHVFQUFvRDtBQUVwRCxxQ0FBeUM7QUFDekMsK0JBQW9DO0FBRXZCLFFBQUEsZ0JBQWdCLEdBQUcsc0JBQWEsQ0FBQyxzQkFBUSxFQUFFLG9CQUFNLEVBQUUsb0JBQU0sQ0FBQyxDQUFDO0FBRTNELFFBQUEsZUFBZSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQTBCLEVBQUUsRUFBRTtJQUNyRSxPQUFPLEtBQUssRUFBRSxPQUFlLEVBQUUsYUFBcUIsRUFBRSxFQUFFO1FBQ3BELE9BQU8scUJBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFVyxRQUFBLHVCQUF1QixHQUFHLENBQUMsRUFDcEMsU0FBUyxHQUdaLEVBQUUsRUFBRTtJQUNELE9BQU8sS0FBSyxFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQzVCLE9BQU8sNkJBQWdCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQTBCLEVBQUUsRUFBRTtJQUNwRSxPQUFPLEtBQUssRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUU7UUFDMUMsT0FBTyxvQkFBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCw4QkFBOEI7QUFDOUIsc0ZBQXNGO0FBQ3RGLEtBQUs7QUFFTCxtRkFBbUY7QUFDbkYsMENBQTBDO0FBQzFDLDhCQUE4QjtBQUM5QiwyR0FBMkc7QUFDM0csdUJBQXVCO0FBQ3ZCLEtBQUs7QUFFUSxRQUFBLGVBQWUsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsUUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU3RSxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQ3JDLG1DQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsSUFBSSxtQ0FBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFPNUUsTUFBTSxVQUFVLEdBQVk7SUFDeEIsUUFBUSxFQUFFO1FBQ04sQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3pDLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7UUFDbkQsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQztLQUM1RDtJQUNELFFBQVEsRUFBRTtRQUNOLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxhQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0tBQ3hDO0NBQ0osQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHLENBQzFCLFlBQTBDLEVBQzFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBVyxFQUNqQyxFQUFFLENBQUMsQ0FBQyxPQUFlLEVBQUUsRUFBRTtJQUNyQixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM1QixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUM1QixJQUFJO2dCQUNBLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3ZCLE9BQU8sT0FBTyxDQUFDO2lCQUNsQjthQUNKO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ1osZ0JBQWdCO2FBQ25CO1NBQ0o7S0FDSjtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHLHNCQUFjLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDIn0=