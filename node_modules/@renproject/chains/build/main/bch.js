"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bchaddrjs_1 = require("bchaddrjs");
const bitcore_lib_cash_1 = require("bitcore-lib-cash");
const BCHHandler_1 = require("send-crypto/build/main/handlers/BCH/BCHHandler");
const btc_1 = require("./btc");
const common_1 = require("./common");
const hex_1 = require("./hex");
exports.createBCHAddress = common_1.createAddress(bitcore_lib_cash_1.Networks, bitcore_lib_cash_1.Opcode, bitcore_lib_cash_1.Script);
exports.getBitcoinCashUTXOs = ({ isTestnet }) => {
    return async (address, confirmations) => {
        return BCHHandler_1.getUTXOs(isTestnet, { address, confirmations });
    };
};
exports.getBitcoinCashConfirmations = ({ isTestnet, }) => {
    return async (txHash) => {
        return BCHHandler_1.getConfirmations(isTestnet, txHash);
    };
};
exports.getBitcoinCashUTXO = ({ isTestnet }) => {
    return async (txHash, vOut) => {
        return BCHHandler_1.getUTXO(isTestnet, txHash, vOut);
    };
};
exports.bchAddressToHex = (address) => hex_1.Ox(Buffer.from(address));
const isBCHAddress = (address, options) => {
    try {
        return options
            ? options.isTestnet
                ? bchaddrjs_1.isTestnetAddress(address)
                : bchaddrjs_1.isMainnetAddress(address)
            : bchaddrjs_1.isTestnetAddress(address) || bchaddrjs_1.isMainnetAddress(address);
    }
    catch (error) {
        return false;
    }
};
const bchTactics = {
    decoders: [
        (address) => Buffer.from(address),
        (address) => Buffer.from(address, "base64"),
        (address) => Buffer.from(hex_1.strip0x(address), "hex"),
    ],
    encoders: [(buffer) => bchaddrjs_1.toCashAddress(buffer.toString())],
};
exports.bchAddressFrom = btc_1.anyAddressFrom(isBCHAddress, bchTactics);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUE4RTtBQUM5RSx1REFBNEQ7QUFDNUQsK0VBSXdEO0FBRXhELCtCQUFnRDtBQUNoRCxxQ0FBeUM7QUFDekMsK0JBQW9DO0FBRXZCLFFBQUEsZ0JBQWdCLEdBQUcsc0JBQWEsQ0FBQywyQkFBUSxFQUFFLHlCQUFNLEVBQUUseUJBQU0sQ0FBQyxDQUFDO0FBRTNELFFBQUEsbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBMEIsRUFBRSxFQUFFO0lBQ3pFLE9BQU8sS0FBSyxFQUFFLE9BQWUsRUFBRSxhQUFxQixFQUFFLEVBQUU7UUFDcEQsT0FBTyxxQkFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVXLFFBQUEsMkJBQTJCLEdBQUcsQ0FBQyxFQUN4QyxTQUFTLEdBR1osRUFBRSxFQUFFO0lBQ0QsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDNUIsT0FBTyw2QkFBZ0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRVcsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDeEUsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzFDLE9BQU8sb0JBQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVXLFFBQUEsZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxRQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTdFLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWlDLEVBQUUsRUFBRTtJQUN4RSxJQUFJO1FBQ0EsT0FBTyxPQUFPO1lBQ1YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTO2dCQUNmLENBQUMsQ0FBQyw0QkFBZ0IsQ0FBQyxPQUFPLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyw0QkFBZ0IsQ0FBQyxPQUFPLENBQUM7WUFDL0IsQ0FBQyxDQUFDLDRCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLDRCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFZO0lBQ3hCLFFBQVEsRUFBRTtRQUNOLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1FBQ25ELENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDNUQ7SUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMseUJBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNuRSxDQUFDO0FBRVcsUUFBQSxjQUFjLEdBQUcsb0JBQWMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMifQ==