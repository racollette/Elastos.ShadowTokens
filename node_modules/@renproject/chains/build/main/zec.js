"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bitcore_lib_zcash_1 = require("bitcore-lib-zcash");
const base58check_1 = __importDefault(require("bitcore-lib-zcash/lib/encoding/base58check"));
const bs58_1 = require("bs58");
const ZECHandler_1 = require("send-crypto/build/main/handlers/ZEC/ZECHandler");
const wallet_address_validator_1 = require("wallet-address-validator");
const btc_1 = require("./btc");
const common_1 = require("./common");
const hex_1 = require("./hex");
exports.createZECAddress = common_1.createAddress(bitcore_lib_zcash_1.Networks, bitcore_lib_zcash_1.Opcode, bitcore_lib_zcash_1.Script);
exports.getZcashUTXOs = ({ isTestnet }) => {
    return async (address, confirmations) => {
        return ZECHandler_1.getUTXOs(isTestnet, { address, confirmations });
    };
};
exports.getZcashConfirmations = ({ isTestnet, }) => {
    return async (txHash) => {
        return ZECHandler_1.getConfirmations(isTestnet, txHash);
    };
};
exports.getZcashUTXO = ({ isTestnet }) => {
    return async (txHash, vOut) => {
        return ZECHandler_1.getUTXO(isTestnet, txHash, vOut);
    };
};
// ZCash shielded addresses (starting with 'z') aren't supported yet.
// export const zecAddressToHex = (address: string) => Ox(Buffer.from(address));
exports.zecAddressToHex = (address) => {
    const addressBuffer = new bitcore_lib_zcash_1.Address(address).toBuffer();
    // Concatenate checksum
    return hex_1.Ox(Buffer.concat([addressBuffer, base58check_1.default.checksum(addressBuffer)]));
};
const isZECAddress = (address) => wallet_address_validator_1.validate(address, "zec", "testnet") || wallet_address_validator_1.validate(address, "zec", "prod");
const zecTactics = {
    decoders: [
        (address) => Buffer.from(address),
        (address) => Buffer.from(address, "base64"),
        (address) => Buffer.from(hex_1.strip0x(address), "hex"),
    ],
    encoders: [
        (buffer) => buffer.toString(),
        (buffer) => bs58_1.encode(buffer),
    ],
};
exports.zecAddressFrom = btc_1.anyAddressFrom(isZECAddress, zecTactics);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3plYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlEQUFzRTtBQUN0RSw2RkFBcUU7QUFDckUsK0JBQThCO0FBQzlCLCtFQUl3RDtBQUN4RCx1RUFBb0Q7QUFFcEQsK0JBQWdEO0FBQ2hELHFDQUF5QztBQUN6QywrQkFBb0M7QUFFdkIsUUFBQSxnQkFBZ0IsR0FBRyxzQkFBYSxDQUFDLDRCQUFRLEVBQUUsMEJBQU0sRUFBRSwwQkFBTSxDQUFDLENBQUM7QUFFM0QsUUFBQSxhQUFhLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBMEIsRUFBRSxFQUFFO0lBQ25FLE9BQU8sS0FBSyxFQUFFLE9BQWUsRUFBRSxhQUFxQixFQUFFLEVBQUU7UUFDcEQsT0FBTyxxQkFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVXLFFBQUEscUJBQXFCLEdBQUcsQ0FBQyxFQUNsQyxTQUFTLEdBR1osRUFBRSxFQUFFO0lBQ0QsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDNUIsT0FBTyw2QkFBZ0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRVcsUUFBQSxZQUFZLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBMEIsRUFBRSxFQUFFO0lBQ2xFLE9BQU8sS0FBSyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUMxQyxPQUFPLG9CQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixxRUFBcUU7QUFDckUsZ0ZBQWdGO0FBRW5FLFFBQUEsZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxhQUFhLEdBQUcsSUFBSSwyQkFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RELHVCQUF1QjtJQUN2QixPQUFPLFFBQUUsQ0FDTCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLHFCQUFXLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FDdEUsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FDckMsbUNBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLG1DQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUU1RSxNQUFNLFVBQVUsR0FBWTtJQUN4QixRQUFRLEVBQUU7UUFDTixDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDekMsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztRQUNuRCxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDO0tBQzVEO0lBQ0QsUUFBUSxFQUFFO1FBQ04sQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7UUFDckMsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLGFBQU0sQ0FBQyxNQUFNLENBQUM7S0FDckM7Q0FDSixDQUFDO0FBRVcsUUFBQSxjQUFjLEdBQUcsb0JBQWMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMifQ==