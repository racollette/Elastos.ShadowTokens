import { Networks, Opcode, Script } from "bitcore-lib";
import { encode } from "bs58";
import { getConfirmations, getUTXO, getUTXOs, } from "send-crypto/build/main/handlers/BTC/BTCHandler";
import { validate } from "wallet-address-validator";
import { createAddress } from "./common";
import { Ox, strip0x } from "./hex";
export const createBTCAddress = createAddress(Networks, Opcode, Script);
export const getBitcoinUTXOs = ({ isTestnet }) => {
    return async (address, confirmations) => {
        return getUTXOs(isTestnet, { address, confirmations });
    };
};
export const getBitcoinConfirmations = ({ isTestnet, }) => {
    return async (txHash) => {
        return getConfirmations(isTestnet, txHash);
    };
};
export const getBitcoinUTXO = ({ isTestnet }) => {
    return async (txHash, vOut) => {
        return getUTXO(isTestnet, txHash, vOut);
    };
};
// export const btcAddressToHex = (address: string) => {
//     const addressBuffer = new Address(address).toBuffer();
//     // Concatenate checksum
//     return Ox(Buffer.concat([addressBuffer, Base58Check.checksum(addressBuffer)]));
// };
// export const btcAddressFrom = (address: string, encoding: "hex" | "base64") => {
//     // tslint:disable-next-line: no-any
//     return (Address as any)
//         .fromBuffer(Buffer.from(encoding === "hex" ? strip0x(address) : address, encoding).slice(0, -4))
//         .toString();
// };
export const btcAddressToHex = (address) => Ox(Buffer.from(address));
const isBTCAddress = (address) => validate(address, "btc", "testnet") || validate(address, "btc", "prod");
const btcTactics = {
    decoders: [
        (address) => Buffer.from(address),
        (address) => Buffer.from(address, "base64"),
        (address) => Buffer.from(strip0x(address), "hex"),
    ],
    encoders: [
        (buffer) => encode(buffer),
        (buffer) => buffer.toString(),
    ],
};
export const anyAddressFrom = (isAnyAddress, { encoders, decoders }) => (address) => {
    for (const encoder of encoders) {
        for (const decoder of decoders) {
            try {
                const encoded = encoder(decoder(address));
                if (isAnyAddress(encoded)) {
                    return encoded;
                }
            }
            catch (error) {
                // Ignore errors
            }
        }
    }
    return address;
};
export const btcAddressFrom = anyAddressFrom(isBTCAddress, btcTactics);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2J0Yy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxRQUFRLEdBQ1gsTUFBTSxnREFBZ0QsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUV4RSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBMEIsRUFBRSxFQUFFO0lBQ3JFLE9BQU8sS0FBSyxFQUFFLE9BQWUsRUFBRSxhQUFxQixFQUFFLEVBQUU7UUFDcEQsT0FBTyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxFQUNwQyxTQUFTLEdBR1osRUFBRSxFQUFFO0lBQ0QsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDNUIsT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQTBCLEVBQUUsRUFBRTtJQUNwRSxPQUFPLEtBQUssRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUU7UUFDMUMsT0FBTyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRix3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELDhCQUE4QjtBQUM5QixzRkFBc0Y7QUFDdEYsS0FBSztBQUVMLG1GQUFtRjtBQUNuRiwwQ0FBMEM7QUFDMUMsOEJBQThCO0FBQzlCLDJHQUEyRztBQUMzRyx1QkFBdUI7QUFDdkIsS0FBSztBQUVMLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU3RSxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQ3JDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBTzVFLE1BQU0sVUFBVSxHQUFZO0lBQ3hCLFFBQVEsRUFBRTtRQUNOLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1FBQ25ELENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDNUQ7SUFDRCxRQUFRLEVBQUU7UUFDTixDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtLQUN4QztDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDMUIsWUFBMEMsRUFDMUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFXLEVBQ2pDLEVBQUUsQ0FBQyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3JCLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1FBQzVCLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLElBQUk7Z0JBQ0EsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDdkIsT0FBTyxPQUFPLENBQUM7aUJBQ2xCO2FBQ0o7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDWixnQkFBZ0I7YUFDbkI7U0FDSjtLQUNKO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMifQ==