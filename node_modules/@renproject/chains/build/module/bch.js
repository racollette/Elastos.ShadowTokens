import { isMainnetAddress, isTestnetAddress, toCashAddress } from "bchaddrjs";
import { Networks, Opcode, Script } from "bitcore-lib-cash";
import { getConfirmations, getUTXO, getUTXOs, } from "send-crypto/build/main/handlers/BCH/BCHHandler";
import { anyAddressFrom } from "./btc";
import { createAddress } from "./common";
import { Ox, strip0x } from "./hex";
export const createBCHAddress = createAddress(Networks, Opcode, Script);
export const getBitcoinCashUTXOs = ({ isTestnet }) => {
    return async (address, confirmations) => {
        return getUTXOs(isTestnet, { address, confirmations });
    };
};
export const getBitcoinCashConfirmations = ({ isTestnet, }) => {
    return async (txHash) => {
        return getConfirmations(isTestnet, txHash);
    };
};
export const getBitcoinCashUTXO = ({ isTestnet }) => {
    return async (txHash, vOut) => {
        return getUTXO(isTestnet, txHash, vOut);
    };
};
export const bchAddressToHex = (address) => Ox(Buffer.from(address));
const isBCHAddress = (address, options) => {
    try {
        return options
            ? options.isTestnet
                ? isTestnetAddress(address)
                : isMainnetAddress(address)
            : isTestnetAddress(address) || isMainnetAddress(address);
    }
    catch (error) {
        return false;
    }
};
const bchTactics = {
    decoders: [
        (address) => Buffer.from(address),
        (address) => Buffer.from(address, "base64"),
        (address) => Buffer.from(strip0x(address), "hex"),
    ],
    encoders: [(buffer) => toCashAddress(buffer.toString())],
};
export const bchAddressFrom = anyAddressFrom(isBCHAddress, bchTactics);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVELE9BQU8sRUFDSCxnQkFBZ0IsRUFDaEIsT0FBTyxFQUNQLFFBQVEsR0FDWCxNQUFNLGdEQUFnRCxDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQVcsTUFBTSxPQUFPLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUV4RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDekUsT0FBTyxLQUFLLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsRUFBRTtRQUNwRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEVBQ3hDLFNBQVMsR0FHWixFQUFFLEVBQUU7SUFDRCxPQUFPLEtBQUssRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUM1QixPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDeEUsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzFDLE9BQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTdFLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWlDLEVBQUUsRUFBRTtJQUN4RSxJQUFJO1FBQ0EsT0FBTyxPQUFPO1lBQ1YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTO2dCQUNmLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7WUFDL0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFZO0lBQ3hCLFFBQVEsRUFBRTtRQUNOLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1FBQ25ELENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDNUQ7SUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0NBQ25FLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyJ9