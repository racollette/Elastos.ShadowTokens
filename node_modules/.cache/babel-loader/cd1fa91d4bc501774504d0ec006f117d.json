{"ast":null,"code":"import { version } from '../config';\nconst versions = ['0.0.1'];\nconst connectionCodeSchemas = {\n  '0.0.1': ['version', 'key', 'connId']\n};\nconst connectionCodeSeparator = '_';\nconst rtc = {\n  error: 'error',\n  connect: 'connect',\n  close: 'close',\n  data: 'data',\n  signal: 'signal'\n};\nconst iceConnectionState = {\n  new: 'new',\n  connecting: 'connecting',\n  connected: 'connected',\n  disconnected: 'disconnected',\n  failed: 'failed',\n  closed: 'closed'\n};\nconst RTCSignalingState = {\n  stable: 'stable',\n  'have-local-offer': 'have-local-offer',\n  'have-remote-offer': 'have-remote-offer',\n  'have-local-pranswer': 'have-local-pranswer',\n  'have-remote-pranswer': 'have-remote-pranswer'\n};\nconst RTCIceGatheringState = {\n  new: 'new',\n  gathering: 'gathering',\n  complete: 'complete'\n};\nconst stages = {\n  initiator: 'initiator',\n  receiver: 'receiver'\n};\nconst lifeCycle = {\n  AuthRejected: 'AuthRejected',\n  RtcInitiatedEvent: 'RtcInitiatedEvent',\n  signatureCheck: 'signatureCheck',\n  SocketConnectedEvent: 'SocketConnectedEvent',\n  confirmationFailedEvent: 'confirmationFailedEvent',\n  confirmationFailedBusyEvent: 'confirmationFailedBusyEvent',\n  invalidConnectionEvent: 'invalidConnectionEvent',\n  codeDisplay: 'codeDisplay',\n  checkNumber: 'checkNumber',\n  ConnectionId: 'ConnectionId',\n  receiverVersion: 'receiverVersion',\n  offerCreated: 'offerCreated',\n  sendOffer: 'sendOffer',\n  answerReceived: 'answerReceived',\n  RtcConnectedEvent: 'RtcConnectedEvent',\n  RtcConnectedEmitted: 'RtcConnectedEmitted',\n  RtcClosedEvent: 'RtcClosedEvent',\n  RtcDisconnectEvent: 'RtcDisconnectEvent',\n  RtcDestroyedEvent: 'RtcDestroyedEvent',\n  RtcFailedEvent: 'RtcFailedEvent',\n  RtcErrorEvent: 'RtcErrorEvent',\n  UsingFallback: 'UsingFallback',\n  Failed: 'failed',\n  attemptedDisconnectedSend: 'attemptedDisconnectedSend',\n  connected: 'connected',\n  disconnected: 'disconnected'\n};\nconst communicationTypes = {\n  address: 'address',\n  signMessage: 'signMessage',\n  signTx: 'signTx'\n};\nconst loggerLevels = {\n  errorLvl: 'error',\n  warnLvl: 'warn',\n  infoLvl: 'info',\n  verboseLvl: 'verbose',\n  debugLvl: 'debug',\n  sillyLvl: 'silly'\n};\nexport { version, versions, connectionCodeSchemas, connectionCodeSeparator, stages, rtc, iceConnectionState, RTCSignalingState, RTCIceGatheringState, lifeCycle, communicationTypes, loggerLevels };","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectClient/constants/constants.js"],"names":["version","versions","connectionCodeSchemas","connectionCodeSeparator","rtc","error","connect","close","data","signal","iceConnectionState","new","connecting","connected","disconnected","failed","closed","RTCSignalingState","stable","RTCIceGatheringState","gathering","complete","stages","initiator","receiver","lifeCycle","AuthRejected","RtcInitiatedEvent","signatureCheck","SocketConnectedEvent","confirmationFailedEvent","confirmationFailedBusyEvent","invalidConnectionEvent","codeDisplay","checkNumber","ConnectionId","receiverVersion","offerCreated","sendOffer","answerReceived","RtcConnectedEvent","RtcConnectedEmitted","RtcClosedEvent","RtcDisconnectEvent","RtcDestroyedEvent","RtcFailedEvent","RtcErrorEvent","UsingFallback","Failed","attemptedDisconnectedSend","communicationTypes","address","signMessage","signTx","loggerLevels","errorLvl","warnLvl","infoLvl","verboseLvl","debugLvl","sillyLvl"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,MAAMC,QAAQ,GAAG,CAAC,OAAD,CAAjB;AAEA,MAAMC,qBAAqB,GAAG;AAC5B,WAAS,CAAC,SAAD,EAAY,KAAZ,EAAmB,QAAnB;AADmB,CAA9B;AAIA,MAAMC,uBAAuB,GAAG,GAAhC;AAEA,MAAMC,GAAG,GAAG;AACVC,EAAAA,KAAK,EAAE,OADG;AAEVC,EAAAA,OAAO,EAAE,SAFC;AAGVC,EAAAA,KAAK,EAAE,OAHG;AAIVC,EAAAA,IAAI,EAAE,MAJI;AAKVC,EAAAA,MAAM,EAAE;AALE,CAAZ;AAQA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,UAAU,EAAE,YAFa;AAGzBC,EAAAA,SAAS,EAAE,WAHc;AAIzBC,EAAAA,YAAY,EAAE,cAJW;AAKzBC,EAAAA,MAAM,EAAE,QALiB;AAMzBC,EAAAA,MAAM,EAAE;AANiB,CAA3B;AASA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,QADgB;AAExB,sBAAoB,kBAFI;AAGxB,uBAAqB,mBAHG;AAIxB,yBAAuB,qBAJC;AAKxB,0BAAwB;AALA,CAA1B;AAQA,MAAMC,oBAAoB,GAAG;AAC3BR,EAAAA,GAAG,EAAE,KADsB;AAE3BS,EAAAA,SAAS,EAAE,WAFgB;AAG3BC,EAAAA,QAAQ,EAAE;AAHiB,CAA7B;AAMA,MAAMC,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE,WADE;AAEbC,EAAAA,QAAQ,EAAE;AAFG,CAAf;AAKA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAE,cADE;AAEhBC,EAAAA,iBAAiB,EAAE,mBAFH;AAGhBC,EAAAA,cAAc,EAAE,gBAHA;AAIhBC,EAAAA,oBAAoB,EAAE,sBAJN;AAKhBC,EAAAA,uBAAuB,EAAE,yBALT;AAMhBC,EAAAA,2BAA2B,EAAE,6BANb;AAOhBC,EAAAA,sBAAsB,EAAE,wBAPR;AAQhBC,EAAAA,WAAW,EAAE,aARG;AAShBC,EAAAA,WAAW,EAAE,aATG;AAUhBC,EAAAA,YAAY,EAAE,cAVE;AAWhBC,EAAAA,eAAe,EAAE,iBAXD;AAYhBC,EAAAA,YAAY,EAAE,cAZE;AAahBC,EAAAA,SAAS,EAAE,WAbK;AAchBC,EAAAA,cAAc,EAAE,gBAdA;AAehBC,EAAAA,iBAAiB,EAAE,mBAfH;AAgBhBC,EAAAA,mBAAmB,EAAE,qBAhBL;AAiBhBC,EAAAA,cAAc,EAAE,gBAjBA;AAkBhBC,EAAAA,kBAAkB,EAAE,oBAlBJ;AAmBhBC,EAAAA,iBAAiB,EAAE,mBAnBH;AAoBhBC,EAAAA,cAAc,EAAE,gBApBA;AAqBhBC,EAAAA,aAAa,EAAE,eArBC;AAsBhBC,EAAAA,aAAa,EAAE,eAtBC;AAuBhBC,EAAAA,MAAM,EAAE,QAvBQ;AAwBhBC,EAAAA,yBAAyB,EAAE,2BAxBX;AAyBhBpC,EAAAA,SAAS,EAAE,WAzBK;AA0BhBC,EAAAA,YAAY,EAAE;AA1BE,CAAlB;AA6BA,MAAMoC,kBAAkB,GAAG;AACzBC,EAAAA,OAAO,EAAE,SADgB;AAEzBC,EAAAA,WAAW,EAAE,aAFY;AAGzBC,EAAAA,MAAM,EAAE;AAHiB,CAA3B;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,OADS;AAEnBC,EAAAA,OAAO,EAAE,MAFU;AAGnBC,EAAAA,OAAO,EAAE,MAHU;AAInBC,EAAAA,UAAU,EAAE,SAJO;AAKnBC,EAAAA,QAAQ,EAAE,OALS;AAMnBC,EAAAA,QAAQ,EAAE;AANS,CAArB;AASA,SACE5D,OADF,EAEEC,QAFF,EAGEC,qBAHF,EAIEC,uBAJF,EAKEmB,MALF,EAMElB,GANF,EAOEM,kBAPF,EAQEO,iBARF,EASEE,oBATF,EAUEM,SAVF,EAWEyB,kBAXF,EAYEI,YAZF","sourcesContent":["import { version } from '../config';\n\nconst versions = ['0.0.1'];\n\nconst connectionCodeSchemas = {\n  '0.0.1': ['version', 'key', 'connId']\n};\n\nconst connectionCodeSeparator = '_';\n\nconst rtc = {\n  error: 'error',\n  connect: 'connect',\n  close: 'close',\n  data: 'data',\n  signal: 'signal'\n};\n\nconst iceConnectionState = {\n  new: 'new',\n  connecting: 'connecting',\n  connected: 'connected',\n  disconnected: 'disconnected',\n  failed: 'failed',\n  closed: 'closed'\n};\n\nconst RTCSignalingState = {\n  stable: 'stable',\n  'have-local-offer': 'have-local-offer',\n  'have-remote-offer': 'have-remote-offer',\n  'have-local-pranswer': 'have-local-pranswer',\n  'have-remote-pranswer': 'have-remote-pranswer'\n};\n\nconst RTCIceGatheringState = {\n  new: 'new',\n  gathering: 'gathering',\n  complete: 'complete'\n};\n\nconst stages = {\n  initiator: 'initiator',\n  receiver: 'receiver'\n};\n\nconst lifeCycle = {\n  AuthRejected: 'AuthRejected',\n  RtcInitiatedEvent: 'RtcInitiatedEvent',\n  signatureCheck: 'signatureCheck',\n  SocketConnectedEvent: 'SocketConnectedEvent',\n  confirmationFailedEvent: 'confirmationFailedEvent',\n  confirmationFailedBusyEvent: 'confirmationFailedBusyEvent',\n  invalidConnectionEvent: 'invalidConnectionEvent',\n  codeDisplay: 'codeDisplay',\n  checkNumber: 'checkNumber',\n  ConnectionId: 'ConnectionId',\n  receiverVersion: 'receiverVersion',\n  offerCreated: 'offerCreated',\n  sendOffer: 'sendOffer',\n  answerReceived: 'answerReceived',\n  RtcConnectedEvent: 'RtcConnectedEvent',\n  RtcConnectedEmitted: 'RtcConnectedEmitted',\n  RtcClosedEvent: 'RtcClosedEvent',\n  RtcDisconnectEvent: 'RtcDisconnectEvent',\n  RtcDestroyedEvent: 'RtcDestroyedEvent',\n  RtcFailedEvent: 'RtcFailedEvent',\n  RtcErrorEvent: 'RtcErrorEvent',\n  UsingFallback: 'UsingFallback',\n  Failed: 'failed',\n  attemptedDisconnectedSend: 'attemptedDisconnectedSend',\n  connected: 'connected',\n  disconnected: 'disconnected'\n};\n\nconst communicationTypes = {\n  address: 'address',\n  signMessage: 'signMessage',\n  signTx: 'signTx'\n};\n\nconst loggerLevels = {\n  errorLvl: 'error',\n  warnLvl: 'warn',\n  infoLvl: 'info',\n  verboseLvl: 'verbose',\n  debugLvl: 'debug',\n  sillyLvl: 'silly'\n};\n\nexport {\n  version,\n  versions,\n  connectionCodeSchemas,\n  connectionCodeSeparator,\n  stages,\n  rtc,\n  iceConnectionState,\n  RTCSignalingState,\n  RTCIceGatheringState,\n  lifeCycle,\n  communicationTypes,\n  loggerLevels\n};\n"]},"metadata":{},"sourceType":"module"}