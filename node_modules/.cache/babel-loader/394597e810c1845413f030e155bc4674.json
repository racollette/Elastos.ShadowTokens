{"ast":null,"code":"import { version, versions, connectionCodeSchemas, connectionCodeSeparator, stages, rtc, iceConnectionState, RTCSignalingState, RTCIceGatheringState, lifeCycle, communicationTypes, loggerLevels } from './constants';\nimport { signalV1, signalV2 } from './signals';\nimport { V2endpoint, V1endpoint } from '../config';\nconst signalUrl = {\n  V1: V1endpoint,\n  V2: V2endpoint\n};\nconst signals = {\n  V1: signalV1,\n  V2: signalV2\n};\n\nconst versionIdentify = ver => {\n  const parts = ver.toString().split('.');\n\n  if (parts.length > 0) {\n    ver = parts[0];\n  }\n\n  switch (ver) {\n    case 1:\n    case '1':\n    case 'V1':\n      return 'V1';\n\n    case 2:\n    case '2':\n    case 'V2':\n      return 'V2';\n\n    default:\n      return 'V2';\n  }\n};\n\nconst signalServer = ver => {\n  return signalUrl[versionIdentify(ver)];\n};\n\nconst signal = ver => {\n  return signals[versionIdentify(ver)];\n};\n\nexport { version, versions, signalServer, connectionCodeSchemas, connectionCodeSeparator, signals, signal, stages, rtc, iceConnectionState, RTCSignalingState, RTCIceGatheringState, lifeCycle, communicationTypes, loggerLevels };","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/@myetherwallet/mewconnect-web-client/src/connectClient/constants/index.js"],"names":["version","versions","connectionCodeSchemas","connectionCodeSeparator","stages","rtc","iceConnectionState","RTCSignalingState","RTCIceGatheringState","lifeCycle","communicationTypes","loggerLevels","signalV1","signalV2","V2endpoint","V1endpoint","signalUrl","V1","V2","signals","versionIdentify","ver","parts","toString","split","length","signalServer","signal"],"mappings":"AAAA,SACEA,OADF,EAEEC,QAFF,EAGEC,qBAHF,EAIEC,uBAJF,EAKEC,MALF,EAMEC,GANF,EAOEC,kBAPF,EAQEC,iBARF,EASEC,oBATF,EAUEC,SAVF,EAWEC,kBAXF,EAYEC,YAZF,QAaO,aAbP;AAeA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,WAAnC;AACA,SAAQC,UAAR,EAAoBC,UAApB,QAAqC,WAArC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAEF,UADY;AAEhBG,EAAAA,EAAE,EAAEJ;AAFY,CAAlB;AAKA,MAAMK,OAAO,GAAG;AACdF,EAAAA,EAAE,EAAEL,QADU;AAEdM,EAAAA,EAAE,EAAEL;AAFU,CAAhB;;AAKA,MAAMO,eAAe,GAAGC,GAAG,IAAI;AAC7B,QAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,GAAeC,KAAf,CAAqB,GAArB,CAAd;;AACA,MAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpBJ,IAAAA,GAAG,GAAGC,KAAK,CAAC,CAAD,CAAX;AACD;;AACD,UAAQD,GAAR;AACE,SAAK,CAAL;AACA,SAAK,GAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;;AACF,SAAK,CAAL;AACA,SAAK,GAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAO,IAAP;AAVJ;AAYD,CAjBD;;AAmBA,MAAMK,YAAY,GAAGL,GAAG,IAAI;AAC1B,SAAOL,SAAS,CAACI,eAAe,CAACC,GAAD,CAAhB,CAAhB;AACD,CAFD;;AAIA,MAAMM,MAAM,GAAGN,GAAG,IAAI;AACpB,SAAOF,OAAO,CAACC,eAAe,CAACC,GAAD,CAAhB,CAAd;AACD,CAFD;;AAIA,SACErB,OADF,EAEEC,QAFF,EAGEyB,YAHF,EAIExB,qBAJF,EAKEC,uBALF,EAMEgB,OANF,EAOEQ,MAPF,EAQEvB,MARF,EASEC,GATF,EAUEC,kBAVF,EAWEC,iBAXF,EAYEC,oBAZF,EAaEC,SAbF,EAcEC,kBAdF,EAeEC,YAfF","sourcesContent":["import {\n  version,\n  versions,\n  connectionCodeSchemas,\n  connectionCodeSeparator,\n  stages,\n  rtc,\n  iceConnectionState,\n  RTCSignalingState,\n  RTCIceGatheringState,\n  lifeCycle,\n  communicationTypes,\n  loggerLevels\n} from './constants';\n\nimport { signalV1, signalV2 } from './signals';\nimport {V2endpoint, V1endpoint} from '../config';\n\nconst signalUrl = {\n  V1: V1endpoint,\n  V2: V2endpoint\n};\n\nconst signals = {\n  V1: signalV1,\n  V2: signalV2\n};\n\nconst versionIdentify = ver => {\n  const parts = ver.toString().split('.');\n  if (parts.length > 0) {\n    ver = parts[0];\n  }\n  switch (ver) {\n    case 1:\n    case '1':\n    case 'V1':\n      return 'V1';\n    case 2:\n    case '2':\n    case 'V2':\n      return 'V2';\n    default:\n      return 'V2';\n  }\n};\n\nconst signalServer = ver => {\n  return signalUrl[versionIdentify(ver)];\n};\n\nconst signal = ver => {\n  return signals[versionIdentify(ver)];\n};\n\nexport {\n  version,\n  versions,\n  signalServer,\n  connectionCodeSchemas,\n  connectionCodeSeparator,\n  signals,\n  signal,\n  stages,\n  rtc,\n  iceConnectionState,\n  RTCSignalingState,\n  RTCIceGatheringState,\n  lifeCycle,\n  communicationTypes,\n  loggerLevels\n};\n"]},"metadata":{},"sourceType":"module"}