{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    for (var i = 0; i < networks.length; i++) {\n      var network = networks[i];\n\n      var filteredNet = _.pick(network, keys);\n\n      var netValues = _.values(filteredNet);\n\n      if (~netValues.indexOf(arg)) {\n        return network;\n      }\n    }\n\n    return undefined;\n  }\n\n  return networkMaps[arg];\n}\n/***\n * Derives an array from the given prefix to be used in the computation\n * of the address' checksum.\n *\n * @param {string} prefix Network prefix. E.g.: 'bitcoincash'.\n */\n\n\nfunction prefixToArray(prefix) {\n  var result = [];\n\n  for (var i = 0; i < prefix.length; i++) {\n    result.push(prefix.charCodeAt(i) & 31);\n  }\n\n  return result;\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n  var indexBy = data.indexBy || Object.keys(data);\n\n  if (data.prefix) {\n    _.extend(network, {\n      prefix: data.prefix,\n      prefixArray: prefixToArray(data.prefix)\n    });\n  }\n\n  if (data.networkMagic) {\n    _.extend(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    _.extend(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    _.extend(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  networks.push(network);\n  indexNetworkBy(network, indexBy);\n  return network;\n}\n\nfunction indexNetworkBy(network, keys) {\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var networkValue = network[key];\n\n    if (!_.isUndefined(networkValue) && !_.isObject(networkValue)) {\n      networkMaps[networkValue] = network;\n    }\n  }\n}\n\nfunction unindexNetworkBy(network, values) {\n  for (var index = 0; index < values.length; index++) {\n    var value = values[index];\n\n    if (networkMaps[value] === network) {\n      delete networkMaps[value];\n    }\n  }\n}\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  unindexNetworkBy(network, Object.keys(networkMaps));\n} // from https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp#L212\n\n\nvar dnsSeeds = ['seed.bitcoinabc.org', 'seed-abc.bitcoinforks.org', 'btccash-seeder.bitcoinunlimited.info', 'seeder.jasonbcox.com', 'seed.deadalnix.me', 'seed.bchd.cash'];\nvar liveNetwork = {\n  name: 'livenet',\n  alias: 'mainnet',\n  prefix: 'bitcoincash',\n  pubkeyhash: 28,\n  privatekey: 0x80,\n  scripthash: 40,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xe3e1f3e8,\n  port: 8333,\n  dnsSeeds: dnsSeeds\n};\nvar testNetwork = {\n  name: 'testnet',\n  prefix: 'bchtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xf4e5f3f4,\n  port: 18333,\n  dnsSeeds: dnsSeeds\n};\nvar regtestNetwork = {\n  name: 'regtest',\n  prefix: 'bchreg',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xdab5bffa,\n  port: 18444,\n  dnsSeeds: [],\n  indexBy: ['port', 'name', 'prefix', 'networkMagic']\n}; // Add configurable values for testnet/regtest\n\naddNetwork(testNetwork);\naddNetwork(regtestNetwork);\naddNetwork(liveNetwork);\nvar livenet = get('livenet');\nvar regtest = get('regtest');\nvar testnet = get('testnet');\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib-cash/lib/networks.js"],"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","i","length","network","filteredNet","pick","netValues","values","undefined","prefixToArray","prefix","result","push","charCodeAt","addNetwork","data","defineImmutable","alias","pubkeyhash","privatekey","scripthash","xpubkey","xprivkey","indexBy","Object","extend","prefixArray","networkMagic","integerAsBuffer","port","dnsSeeds","indexNetworkBy","key","networkValue","isUndefined","isObject","unindexNetworkBy","index","value","removeNetwork","splice","liveNetwork","testNetwork","regtestNetwork","livenet","regtest","testnet","enableRegtest","regtestEnabled","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"mappings":"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","sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    for (var i = 0; i < networks.length; i++) {\n      var network = networks[i];\n      var filteredNet = _.pick(network, keys);\n      var netValues = _.values(filteredNet);\n      if(~netValues.indexOf(arg)) {\n\treturn network;\n      }\n    }\n    return undefined;\n  }\n  return networkMaps[arg];\n}\n\n/***\n * Derives an array from the given prefix to be used in the computation\n * of the address' checksum.\n *\n * @param {string} prefix Network prefix. E.g.: 'bitcoincash'.\n */\nfunction prefixToArray(prefix) {\n  var result = [];\n  for (var i=0; i < prefix.length; i++) {\n    result.push(prefix.charCodeAt(i) & 31);\n  }\n  return result;\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey,\n  });\n\n  var indexBy = data.indexBy || Object.keys(data);\n\n  if (data.prefix) {\n    _.extend(network, {\n      prefix: data.prefix,\n      prefixArray: prefixToArray(data.prefix),\n    });\n  }\n\n  if (data.networkMagic) {\n    _.extend(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    _.extend(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    _.extend(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  networks.push(network);\n  indexNetworkBy(network, indexBy);\n  return network;\n}\n\nfunction indexNetworkBy(network, keys) {\n  for(var i = 0; i <  keys.length; i++) {\n    var key = keys[i];\n    var networkValue = network[key];\n    if(!_.isUndefined(networkValue) && !_.isObject(networkValue)) {\n      networkMaps[networkValue] = network;\n    }\n  }\n}\n\nfunction unindexNetworkBy(network, values) {\n  for(var index = 0; index < values.length; index++){\n    var value = values[index];\n    if(networkMaps[value] === network) {\n      delete networkMaps[value];\n    }\n  }\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  unindexNetworkBy(network, Object.keys(networkMaps));\n}\n\n// from https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp#L212\nvar dnsSeeds = [\n  'seed.bitcoinabc.org',\n  'seed-abc.bitcoinforks.org',\n  'btccash-seeder.bitcoinunlimited.info',\n  'seeder.jasonbcox.com',\n  'seed.deadalnix.me',\n  'seed.bchd.cash'\n];\n\nvar liveNetwork = {\n  name: 'livenet',\n  alias: 'mainnet',\n  prefix: 'bitcoincash',\n  pubkeyhash: 28,\n  privatekey: 0x80,\n  scripthash: 40,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xe3e1f3e8,\n  port: 8333,\n  dnsSeeds: dnsSeeds\n};\n\nvar testNetwork = {\n  name: 'testnet',\n  prefix: 'bchtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xf4e5f3f4,\n  port: 18333,\n  dnsSeeds: dnsSeeds\n};\n\nvar regtestNetwork = {\n  name: 'regtest',\n  prefix: 'bchreg',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xdab5bffa,\n  port: 18444,\n  dnsSeeds: [],\n  indexBy: [\n    'port',\n    'name',\n    'prefix',\n    'networkMagic'\n  ]\n};\n\n\n// Add configurable values for testnet/regtest\n\n\naddNetwork(testNetwork);\naddNetwork(regtestNetwork);\naddNetwork(liveNetwork);\n\nvar livenet = get('livenet');\nvar regtest = get('regtest');\nvar testnet = get('testnet');\n\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"]},"metadata":{},"sourceType":"script"}