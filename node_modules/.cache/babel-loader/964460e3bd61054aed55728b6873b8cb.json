{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUTXOs = exports.fixUTXOs = exports.fixUTXO = exports.fixValue = exports.sortUTXOs = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.\n *\n * @example\n * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});\n * // -1, representing that the first parameter should be ordered first.\n *\n * @returns a negative value to represent that a should come before b or a\n * positive value to represent that b should come before a.\n */\n\n\nexports.sortUTXOs = (a, b) => {\n  // Sort greater values first\n  if (a.amount !== b.amount) {\n    return b.amount - a.amount;\n  }\n\n  ; // Sort older UTXOs first\n\n  if (a.confirmations !== b.confirmations) {\n    return a.confirmations - b.confirmations;\n  }\n\n  return a.txHash <= b.txHash ? -1 : 1;\n};\n/**\n * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest\n * unit, e.g. `10000` sats.\n *\n * @example\n * fixValue(0.0001, 8) = 10000;\n *\n * @param value Value in the readable representation, e.g. `0.0001` BTC.\n * @param decimals The number of decimals to shift by, e.g. 8.\n */\n\n\nexports.fixValue = (value, decimals) => new bignumber_js_1.default(value).multipliedBy(new bignumber_js_1.default(10).exponentiatedBy(decimals)).decimalPlaces(0).toNumber();\n/**\n * fixUTXO calls {{fixValue}} on the value of the UTXO.\n */\n\n\nexports.fixUTXO = (utxo, decimals) => Object.assign(Object.assign({}, utxo), {\n  amount: exports.fixValue(utxo.amount, decimals)\n});\n/**\n * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.\n */\n\n\nexports.fixUTXOs = (utxos, decimals) => {\n  return utxos.map(utxo => exports.fixUTXO(utxo, decimals));\n};\n/**\n * Retrieves UTXOs for a BTC, ZEC or BCH address.\n *\n * @param network The Ren Network object\n * @param currencyName \"BTC\", \"ZEC\" or \"BCH\"\n *\n * @param address The BTC, ZEC or BCH address to retrieve the UTXOS for\n * @param confirmations Restrict UTXOs to having at least this many\n *        confirmations. If confirmations is 0, unconfirmed UTXOs are included.\n * @param endpoint An offset to allow trying different endpoints first, in case\n * o      one is out of sync.\n */\n\n\nexports.getUTXOs = (testnet, currencyName, endpoints) => async (address, confirmations, endpoint = 0) => {\n  let firstError;\n\n  for (let i = 0; i < endpoints.length; i++) {\n    try {\n      const utxos = await endpoints[(i + endpoint) % endpoints.length]();\n      return utxos.filter(utxo => utxo.confirmations >= confirmations);\n    } catch (error) {\n      firstError = firstError || error;\n    }\n  }\n\n  throw firstError || new Error(`No endpoints found for retrieving ${currencyName} UTXOs.`);\n};","map":{"version":3,"sources":["../../../src/lib/utxo.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AAUA;;;;;;;;;;;;AAUa,OAAA,CAAA,SAAA,GAAY,CAAC,CAAD,EAAU,CAAV,KAA6B;AAClD;AACA,MAAI,CAAC,CAAC,MAAF,KAAa,CAAC,CAAC,MAAnB,EAA2B;AAAE,WAAO,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAApB;AAA4B;;AAAA,GAFP,CAGlD;;AACA,MAAI,CAAC,CAAC,aAAF,KAAoB,CAAC,CAAC,aAA1B,EAAyC;AAAE,WAAO,CAAC,CAAC,aAAF,GAAkB,CAAC,CAAC,aAA3B;AAA0C;;AACrF,SAAO,CAAC,CAAC,MAAF,IAAY,CAAC,CAAC,MAAd,GAAuB,CAAC,CAAxB,GAA4B,CAAnC;AACH,CANY;AAQb;;;;;;;;;;;;AAUa,OAAA,CAAA,QAAA,GAAW,CAAC,KAAD,EAAgB,QAAhB,KACpB,IAAI,cAAA,CAAA,OAAJ,CAAc,KAAd,EACK,YADL,CACkB,IAAI,cAAA,CAAA,OAAJ,CAAc,EAAd,EAAkB,eAAlB,CAAkC,QAAlC,CADlB,EAEK,aAFL,CAEmB,CAFnB,EAGK,QAHL,EADS;AAMb;;;;;AAGa,OAAA,CAAA,OAAA,GAAU,CAAC,IAAD,EAAa,QAAb,KAAwC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACxD,IADwD,CAAA,EACpD;AACP,EAAA,MAAM,EAAE,OAAA,CAAA,QAAA,CAAS,IAAI,CAAC,MAAd,EAAsB,QAAtB;AADD,CADoD,CAAlD;AAKb;;;;;AAGa,OAAA,CAAA,QAAA,GAAW,CAAC,KAAD,EAAyB,QAAzB,KAA6C;AACjE,SAAO,KAAK,CAAC,GAAN,CAAW,IAAD,IAAU,OAAA,CAAA,OAAA,CAAQ,IAAR,EAAc,QAAd,CAApB,CAAP;AACH,CAFY;AAIb;;;;;;;;;;;;;;AAYa,OAAA,CAAA,QAAA,GAAW,CAAC,OAAD,EAAmB,YAAnB,EAAyC,SAAzC,KAA8F,OAAO,OAAP,EAAwB,aAAxB,EAA+C,QAAQ,GAAG,CAA1D,KAAyF;AAC3M,MAAI,UAAJ;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACvC,QAAI;AACA,YAAM,KAAK,GAAG,MAAM,SAAS,CAAC,CAAC,CAAC,GAAG,QAAL,IAAiB,SAAS,CAAC,MAA5B,CAAT,EAApB;AACA,aAAO,KAAK,CAAC,MAAN,CAAa,IAAI,IAAI,IAAI,CAAC,aAAL,IAAsB,aAA3C,CAAP;AACH,KAHD,CAGE,OAAO,KAAP,EAAc;AACZ,MAAA,UAAU,GAAG,UAAU,IAAI,KAA3B;AACH;AACJ;;AAED,QAAM,UAAU,IAAI,IAAI,KAAJ,CAAU,qCAAqC,YAAY,SAA3D,CAApB;AACH,CAbY","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUTXOs = exports.fixUTXOs = exports.fixUTXO = exports.fixValue = exports.sortUTXOs = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.\n *\n * @example\n * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});\n * // -1, representing that the first parameter should be ordered first.\n *\n * @returns a negative value to represent that a should come before b or a\n * positive value to represent that b should come before a.\n */\nexports.sortUTXOs = (a, b) => {\n    // Sort greater values first\n    if (a.amount !== b.amount) {\n        return b.amount - a.amount;\n    }\n    ;\n    // Sort older UTXOs first\n    if (a.confirmations !== b.confirmations) {\n        return a.confirmations - b.confirmations;\n    }\n    return a.txHash <= b.txHash ? -1 : 1;\n};\n/**\n * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest\n * unit, e.g. `10000` sats.\n *\n * @example\n * fixValue(0.0001, 8) = 10000;\n *\n * @param value Value in the readable representation, e.g. `0.0001` BTC.\n * @param decimals The number of decimals to shift by, e.g. 8.\n */\nexports.fixValue = (value, decimals) => new bignumber_js_1.default(value)\n    .multipliedBy(new bignumber_js_1.default(10).exponentiatedBy(decimals))\n    .decimalPlaces(0)\n    .toNumber();\n/**\n * fixUTXO calls {{fixValue}} on the value of the UTXO.\n */\nexports.fixUTXO = (utxo, decimals) => (Object.assign(Object.assign({}, utxo), { amount: exports.fixValue(utxo.amount, decimals) }));\n/**\n * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.\n */\nexports.fixUTXOs = (utxos, decimals) => {\n    return utxos.map((utxo) => exports.fixUTXO(utxo, decimals));\n};\n/**\n * Retrieves UTXOs for a BTC, ZEC or BCH address.\n *\n * @param network The Ren Network object\n * @param currencyName \"BTC\", \"ZEC\" or \"BCH\"\n *\n * @param address The BTC, ZEC or BCH address to retrieve the UTXOS for\n * @param confirmations Restrict UTXOs to having at least this many\n *        confirmations. If confirmations is 0, unconfirmed UTXOs are included.\n * @param endpoint An offset to allow trying different endpoints first, in case\n * o      one is out of sync.\n */\nexports.getUTXOs = (testnet, currencyName, endpoints) => async (address, confirmations, endpoint = 0) => {\n    let firstError;\n    for (let i = 0; i < endpoints.length; i++) {\n        try {\n            const utxos = await endpoints[(i + endpoint) % endpoints.length]();\n            return utxos.filter(utxo => utxo.confirmations >= confirmations);\n        }\n        catch (error) {\n            firstError = firstError || error;\n        }\n    }\n    throw firstError || new Error(`No endpoints found for retrieving ${currencyName} UTXOs.`);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXR4by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFVckM7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBQyxDQUFPLEVBQUUsQ0FBTyxFQUFVLEVBQUU7SUFDbEQsNEJBQTRCO0lBQzVCLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUE7S0FBRTtJQUFBLENBQUM7SUFDMUQseUJBQXlCO0lBQ3pCLElBQUksQ0FBQyxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUE7S0FBRTtJQUNyRixPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUE7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLFFBQVEsR0FBRyxDQUFDLEtBQWEsRUFBRSxRQUFnQixFQUFFLEVBQUUsQ0FDeEQsSUFBSSxzQkFBUyxDQUFDLEtBQUssQ0FBQztLQUNmLFlBQVksQ0FBQyxJQUFJLHNCQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pELGFBQWEsQ0FBQyxDQUFDLENBQUM7S0FDaEIsUUFBUSxFQUFFLENBQUM7QUFFcEI7O0dBRUc7QUFDVSxRQUFBLE9BQU8sR0FBRyxDQUFDLElBQVUsRUFBRSxRQUFnQixFQUFRLEVBQUUsQ0FBQyxpQ0FDeEQsSUFBSSxLQUNQLE1BQU0sRUFBRSxnQkFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQ3pDLENBQUM7QUFFSDs7R0FFRztBQUNVLFFBQUEsUUFBUSxHQUFHLENBQUMsS0FBc0IsRUFBRSxRQUFnQixFQUFFLEVBQUU7SUFDakUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7O0dBV0c7QUFDVSxRQUFBLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsWUFBb0IsRUFBRSxTQUFnRCxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBNEIsRUFBRTtJQUMzTSxJQUFJLFVBQVUsQ0FBQztJQUVmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLElBQUk7WUFDQSxNQUFNLEtBQUssR0FBRyxNQUFNLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNuRSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxDQUFDO1NBQ3BFO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixVQUFVLEdBQUcsVUFBVSxJQUFJLEtBQUssQ0FBQztTQUNwQztLQUNKO0lBRUQsTUFBTSxVQUFVLElBQUksSUFBSSxLQUFLLENBQUMscUNBQXFDLFlBQVksU0FBUyxDQUFDLENBQUM7QUFDOUYsQ0FBQyxDQUFDIn0="]},"metadata":{},"sourceType":"script"}