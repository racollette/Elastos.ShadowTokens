{"ast":null,"code":"import { bufferToInt } from 'ethereumjs-util';\n\nconst getBufferFromHex = hex => {\n  hex = sanitizeHex(hex);\n\n  const _hex = hex.toLowerCase().replace('0x', '');\n\n  return new Buffer(_hex, 'hex');\n};\n\nconst padLeftEven = hex => {\n  hex = hex.length % 2 != 0 ? '0' + hex : hex;\n  return hex;\n};\n\nconst sanitizeHex = hex => {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '';\n  return '0x' + padLeftEven(hex);\n};\n\nconst bufferToHex = buffer => {\n  return '0x' + buffer.toString('hex');\n};\n\nconst getHexTxObject = tx => {\n  return {\n    to: sanitizeHex(tx.to.toString('hex')),\n    value: sanitizeHex(tx.value.toString('hex')),\n    data: sanitizeHex(tx.data.toString('hex')),\n    chainId: tx.getChainId(),\n    nonce: sanitizeHex(tx.nonce.toString('hex')),\n    gasLimit: sanitizeHex(tx.gasLimit.toString('hex')),\n    gasPrice: sanitizeHex(tx.gasPrice.toString('hex'))\n  };\n};\n\nconst getSignTransactionObject = tx => {\n  return {\n    rawTransaction: bufferToHex(tx.serialize()),\n    tx: {\n      nonce: bufferToHex(tx.nonce),\n      gasPrice: bufferToHex(tx.gasPrice),\n      gas: tx.gasLimit ? bufferToHex(tx.gasLimit) : bufferToHex(tx.gas),\n      to: bufferToHex(tx.to),\n      value: bufferToHex(tx.value),\n      input: bufferToHex(tx.data),\n      v: bufferToHex(tx.v),\n      r: bufferToHex(tx.r),\n      s: bufferToHex(tx.s),\n      hash: bufferToHex(tx.hash())\n    }\n  };\n};\n\nconst calculateChainIdFromV = v => {\n  const sigV = bufferToInt(v);\n  let chainId = Math.floor((sigV - 35) / 2);\n  if (chainId < 0) chainId = 0;\n  return chainId;\n};\n\nexport { getBufferFromHex, bufferToHex, getSignTransactionObject, sanitizeHex, padLeftEven, getHexTxObject, calculateChainIdFromV };","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/utils.js"],"names":["bufferToInt","getBufferFromHex","hex","sanitizeHex","_hex","toLowerCase","replace","Buffer","padLeftEven","length","substring","bufferToHex","buffer","toString","getHexTxObject","tx","to","value","data","chainId","getChainId","nonce","gasLimit","gasPrice","getSignTransactionObject","rawTransaction","serialize","gas","input","v","r","s","hash","calculateChainIdFromV","sigV","Math","floor"],"mappings":"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","sourcesContent":["import { bufferToInt } from 'ethereumjs-util';\n\nconst getBufferFromHex = hex => {\n  hex = sanitizeHex(hex);\n  const _hex = hex.toLowerCase().replace('0x', '');\n  return new Buffer(_hex, 'hex');\n};\nconst padLeftEven = hex => {\n  hex = hex.length % 2 != 0 ? '0' + hex : hex;\n  return hex;\n};\nconst sanitizeHex = hex => {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '';\n  return '0x' + padLeftEven(hex);\n};\nconst bufferToHex = buffer => {\n  return '0x' + buffer.toString('hex');\n};\nconst getHexTxObject = tx => {\n  return {\n    to: sanitizeHex(tx.to.toString('hex')),\n    value: sanitizeHex(tx.value.toString('hex')),\n    data: sanitizeHex(tx.data.toString('hex')),\n    chainId: tx.getChainId(),\n    nonce: sanitizeHex(tx.nonce.toString('hex')),\n    gasLimit: sanitizeHex(tx.gasLimit.toString('hex')),\n    gasPrice: sanitizeHex(tx.gasPrice.toString('hex'))\n  };\n};\nconst getSignTransactionObject = tx => {\n  return {\n    rawTransaction: bufferToHex(tx.serialize()),\n    tx: {\n      nonce: bufferToHex(tx.nonce),\n      gasPrice: bufferToHex(tx.gasPrice),\n      gas: tx.gasLimit ? bufferToHex(tx.gasLimit) : bufferToHex(tx.gas),\n      to: bufferToHex(tx.to),\n      value: bufferToHex(tx.value),\n      input: bufferToHex(tx.data),\n      v: bufferToHex(tx.v),\n      r: bufferToHex(tx.r),\n      s: bufferToHex(tx.s),\n      hash: bufferToHex(tx.hash())\n    }\n  };\n};\nconst calculateChainIdFromV = v => {\n  const sigV = bufferToInt(v);\n  let chainId = Math.floor((sigV - 35) / 2);\n  if (chainId < 0) chainId = 0;\n  return chainId;\n};\nexport {\n  getBufferFromHex,\n  bufferToHex,\n  getSignTransactionObject,\n  sanitizeHex,\n  padLeftEven,\n  getHexTxObject,\n  calculateChainIdFromV\n};\n"]},"metadata":{},"sourceType":"module"}