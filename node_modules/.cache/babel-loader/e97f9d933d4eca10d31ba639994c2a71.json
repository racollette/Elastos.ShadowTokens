{"ast":null,"code":"import { Address, Networks, Opcode, Script } from \"bitcore-lib-zcash\";\nimport Base58Check from \"bitcore-lib-zcash/lib/encoding/base58check\";\nimport { encode } from \"bs58\";\nimport { getConfirmations, getUTXO, getUTXOs } from \"send-crypto/build/main/handlers/ZEC/ZECHandler\";\nimport { validate } from \"wallet-address-validator\";\nimport { anyAddressFrom } from \"./btc\";\nimport { createAddress } from \"./common\";\nimport { Ox, strip0x } from \"./hex\";\nexport const createZECAddress = createAddress(Networks, Opcode, Script);\nexport const getZcashUTXOs = ({\n  isTestnet\n}) => {\n  return async (address, confirmations) => {\n    return getUTXOs(isTestnet, {\n      address,\n      confirmations\n    });\n  };\n};\nexport const getZcashConfirmations = ({\n  isTestnet\n}) => {\n  return async txHash => {\n    return getConfirmations(isTestnet, txHash);\n  };\n};\nexport const getZcashUTXO = ({\n  isTestnet\n}) => {\n  return async (txHash, vOut) => {\n    return getUTXO(isTestnet, txHash, vOut);\n  };\n}; // ZCash shielded addresses (starting with 'z') aren't supported yet.\n// export const zecAddressToHex = (address: string) => Ox(Buffer.from(address));\n\nexport const zecAddressToHex = address => {\n  const addressBuffer = new Address(address).toBuffer(); // Concatenate checksum\n\n  return Ox(Buffer.concat([addressBuffer, Base58Check.checksum(addressBuffer)]));\n};\n\nconst isZECAddress = address => validate(address, \"zec\", \"testnet\") || validate(address, \"zec\", \"prod\");\n\nconst zecTactics = {\n  decoders: [address => Buffer.from(address), address => Buffer.from(address, \"base64\"), address => Buffer.from(strip0x(address), \"hex\")],\n  encoders: [buffer => buffer.toString(), buffer => encode(buffer)]\n};\nexport const zecAddressFrom = anyAddressFrom(isZECAddress, zecTactics);","map":{"version":3,"sources":["../../src/zec.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,QAAlB,EAA4B,MAA5B,EAAoC,MAApC,QAAkD,mBAAlD;AACA,OAAO,WAAP,MAAwB,4CAAxB;AACA,SAAS,MAAT,QAAuB,MAAvB;AACA,SACI,gBADJ,EAEI,OAFJ,EAGI,QAHJ,QAIO,gDAJP;AAKA,SAAS,QAAT,QAAyB,0BAAzB;AAEA,SAAS,cAAT,QAAwC,OAAxC;AACA,SAAS,aAAT,QAA8B,UAA9B;AACA,SAAS,EAAT,EAAa,OAAb,QAA4B,OAA5B;AAEA,OAAO,MAAM,gBAAgB,GAAG,aAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAAtC;AAEP,OAAO,MAAM,aAAa,GAAG,CAAC;AAAE,EAAA;AAAF,CAAD,KAA0C;AACnE,SAAO,OAAO,OAAP,EAAwB,aAAxB,KAAiD;AACpD,WAAO,QAAQ,CAAC,SAAD,EAAY;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,KAAZ,CAAf;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAM,qBAAqB,GAAG,CAAC;AAClC,EAAA;AADkC,CAAD,KAIhC;AACD,SAAO,MAAO,MAAP,IAAyB;AAC5B,WAAO,gBAAgB,CAAC,SAAD,EAAY,MAAZ,CAAvB;AACH,GAFD;AAGH,CARM;AAUP,OAAO,MAAM,YAAY,GAAG,CAAC;AAAE,EAAA;AAAF,CAAD,KAA0C;AAClE,SAAO,OAAO,MAAP,EAAuB,IAAvB,KAAuC;AAC1C,WAAO,OAAO,CAAC,SAAD,EAAY,MAAZ,EAAoB,IAApB,CAAd;AACH,GAFD;AAGH,CAJM,C,CAMP;AACA;;AAEA,OAAO,MAAM,eAAe,GAAI,OAAD,IAAoB;AAC/C,QAAM,aAAa,GAAG,IAAI,OAAJ,CAAY,OAAZ,EAAqB,QAArB,EAAtB,CAD+C,CAE/C;;AACA,SAAO,EAAE,CACL,MAAM,CAAC,MAAP,CAAc,CAAC,aAAD,EAAgB,WAAW,CAAC,QAAZ,CAAqB,aAArB,CAAhB,CAAd,CADK,CAAT;AAGH,CANM;;AAQP,MAAM,YAAY,GAAI,OAAD,IACjB,QAAQ,CAAC,OAAD,EAAU,KAAV,EAAiB,SAAjB,CAAR,IAAuC,QAAQ,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,CADnD;;AAGA,MAAM,UAAU,GAAY;AACxB,EAAA,QAAQ,EAAE,CACL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAZ,CADf,EAEL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,CAFf,EAGL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAAD,CAAnB,EAA8B,KAA9B,CAHf,CADc;AAMxB,EAAA,QAAQ,EAAE,CACL,MAAD,IAAoB,MAAM,CAAC,QAAP,EADd,EAEL,MAAD,IAAoB,MAAM,CAAC,MAAD,CAFpB;AANc,CAA5B;AAYA,OAAO,MAAM,cAAc,GAAG,cAAc,CAAC,YAAD,EAAe,UAAf,CAArC","sourceRoot":"","sourcesContent":["import { Address, Networks, Opcode, Script } from \"bitcore-lib-zcash\";\nimport Base58Check from \"bitcore-lib-zcash/lib/encoding/base58check\";\nimport { encode } from \"bs58\";\nimport { getConfirmations, getUTXO, getUTXOs, } from \"send-crypto/build/main/handlers/ZEC/ZECHandler\";\nimport { validate } from \"wallet-address-validator\";\nimport { anyAddressFrom } from \"./btc\";\nimport { createAddress } from \"./common\";\nimport { Ox, strip0x } from \"./hex\";\nexport const createZECAddress = createAddress(Networks, Opcode, Script);\nexport const getZcashUTXOs = ({ isTestnet }) => {\n    return async (address, confirmations) => {\n        return getUTXOs(isTestnet, { address, confirmations });\n    };\n};\nexport const getZcashConfirmations = ({ isTestnet, }) => {\n    return async (txHash) => {\n        return getConfirmations(isTestnet, txHash);\n    };\n};\nexport const getZcashUTXO = ({ isTestnet }) => {\n    return async (txHash, vOut) => {\n        return getUTXO(isTestnet, txHash, vOut);\n    };\n};\n// ZCash shielded addresses (starting with 'z') aren't supported yet.\n// export const zecAddressToHex = (address: string) => Ox(Buffer.from(address));\nexport const zecAddressToHex = (address) => {\n    const addressBuffer = new Address(address).toBuffer();\n    // Concatenate checksum\n    return Ox(Buffer.concat([addressBuffer, Base58Check.checksum(addressBuffer)]));\n};\nconst isZECAddress = (address) => validate(address, \"zec\", \"testnet\") || validate(address, \"zec\", \"prod\");\nconst zecTactics = {\n    decoders: [\n        (address) => Buffer.from(address),\n        (address) => Buffer.from(address, \"base64\"),\n        (address) => Buffer.from(strip0x(address), \"hex\"),\n    ],\n    encoders: [\n        (buffer) => buffer.toString(),\n        (buffer) => encode(buffer),\n    ],\n};\nexport const zecAddressFrom = anyAddressFrom(isZECAddress, zecTactics);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3plYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEUsT0FBTyxXQUFXLE1BQU0sNENBQTRDLENBQUM7QUFDckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxRQUFRLEdBQ1gsTUFBTSxnREFBZ0QsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGNBQWMsRUFBVyxNQUFNLE9BQU8sQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDbkUsT0FBTyxLQUFLLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsRUFBRTtRQUNwRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEVBQ2xDLFNBQVMsR0FHWixFQUFFLEVBQUU7SUFDRCxPQUFPLEtBQUssRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUM1QixPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBMEIsRUFBRSxFQUFFO0lBQ2xFLE9BQU8sS0FBSyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUMxQyxPQUFPLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLHFFQUFxRTtBQUNyRSxnRkFBZ0Y7QUFFaEYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxhQUFhLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEQsdUJBQXVCO0lBQ3ZCLE9BQU8sRUFBRSxDQUNMLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQ3RFLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQ3JDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRTVFLE1BQU0sVUFBVSxHQUFZO0lBQ3hCLFFBQVEsRUFBRTtRQUNOLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1FBQ25ELENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDNUQ7SUFDRCxRQUFRLEVBQUU7UUFDTixDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUNyQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztLQUNyQztDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyJ9"]},"metadata":{},"sourceType":"module"}