{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nmodule.exports = {\n  isValidAddress: function (address) {\n    if (!/^0x[0-9a-fA-F]{40}$/.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    }\n\n    if (/^0x[0-9a-f]{40}$/.test(address) || /^0x?[0-9A-F]{40}$/.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } // Otherwise check each case\n\n\n    return this.verifyChecksum(address);\n  },\n  verifyChecksum: function (address) {\n    // Check each case\n    address = address.replace('0x', '');\n    var addressHash = cryptoUtils.keccak256(address.toLowerCase());\n\n    for (var i = 0; i < 40; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/wallet-address-validator/src/ethereum_validator.js"],"names":["cryptoUtils","require","module","exports","isValidAddress","address","test","verifyChecksum","replace","addressHash","keccak256","toLowerCase","i","parseInt","toUpperCase"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmB;AAC/B,QAAI,CAAC,sBAAsBC,IAAtB,CAA2BD,OAA3B,CAAL,EAA0C;AACtC;AACA,aAAO,KAAP;AACH;;AAED,QAAI,mBAAmBC,IAAnB,CAAwBD,OAAxB,KAAoC,oBAAoBC,IAApB,CAAyBD,OAAzB,CAAxC,EAA2E;AACvE;AACA,aAAO,IAAP;AACH,KAT8B,CAW/B;;;AACA,WAAO,KAAKE,cAAL,CAAoBF,OAApB,CAAP;AACH,GAdY;AAebE,EAAAA,cAAc,EAAE,UAAUF,OAAV,EAAmB;AAC/B;AACAA,IAAAA,OAAO,GAAGA,OAAO,CAACG,OAAR,CAAgB,IAAhB,EAAqB,EAArB,CAAV;AAEA,QAAIC,WAAW,GAAGT,WAAW,CAACU,SAAZ,CAAsBL,OAAO,CAACM,WAAR,EAAtB,CAAlB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B;AACA,UAAKC,QAAQ,CAACJ,WAAW,CAACG,CAAD,CAAZ,EAAiB,EAAjB,CAAR,GAA+B,CAA/B,IAAoCP,OAAO,CAACO,CAAD,CAAP,CAAWE,WAAX,OAA6BT,OAAO,CAACO,CAAD,CAAzE,IACCC,QAAQ,CAACJ,WAAW,CAACG,CAAD,CAAZ,EAAiB,EAAjB,CAAR,IAAgC,CAAhC,IAAqCP,OAAO,CAACO,CAAD,CAAP,CAAWD,WAAX,OAA6BN,OAAO,CAACO,CAAD,CAD9E,EACoF;AAChF,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AA9BY,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils');\n\nmodule.exports = {\n    isValidAddress: function (address) {\n        if (!/^0x[0-9a-fA-F]{40}$/.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n\n        if (/^0x[0-9a-f]{40}$/.test(address) || /^0x?[0-9A-F]{40}$/.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n\n        // Otherwise check each case\n        return this.verifyChecksum(address);\n    },\n    verifyChecksum: function (address) {\n        // Check each case\n        address = address.replace('0x','');\n\n        var addressHash = cryptoUtils.keccak256(address.toLowerCase());\n\n        for (var i = 0; i < 40; i++ ) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1\n            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n                (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}