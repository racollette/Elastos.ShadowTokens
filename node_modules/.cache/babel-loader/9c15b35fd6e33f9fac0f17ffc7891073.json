{"ast":null,"code":"/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nvar utils = require('./utils');\n\nmodule.exports = {\n  shimRTCIceCandidate: function (window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n\n    window.RTCIceCandidate = function (args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      if (args.candidate && args.candidate.length) {\n        // Augment the native candidate with the parsed fields.\n        var nativeCandidate = new NativeRTCIceCandidate(args);\n        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n        var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate); // Add a serializer that does not serialize the extra attributes.\n\n        augmentedCandidate.toJSON = function () {\n          return {\n            candidate: augmentedCandidate.candidate,\n            sdpMid: augmentedCandidate.sdpMid,\n            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n            usernameFragment: augmentedCandidate.usernameFragment\n          };\n        };\n\n        return augmentedCandidate;\n      }\n\n      return new NativeRTCIceCandidate(args);\n    };\n\n    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype; // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n\n    utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n\n      return e;\n    });\n  },\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n  shimCreateObjectURL: function (window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement && 'srcObject' in window.HTMLMediaElement.prototype && URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(),\n        newId = 0;\n\n    URL.createObjectURL = function (stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + ++newId;\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)', 'elem.srcObject = stream');\n        return url;\n      }\n\n      return nativeCreateObjectURL(stream);\n    };\n\n    URL.revokeObjectURL = function (url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype, 'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function () {\n        return dsc.get.apply(this);\n      },\n      set: function (url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n\n    window.HTMLMediaElement.prototype.setAttribute = function () {\n      if (arguments.length === 2 && ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  },\n  shimMaxMessageSize: function (window) {\n    if (window.RTCSctpTransport || !window.RTCPeerConnection) {\n      return;\n    }\n\n    var browserDetails = utils.detectBrowser(window);\n\n    if (!('sctp' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n        get: function () {\n          return typeof this._sctp === 'undefined' ? null : this._sctp;\n        }\n      });\n    }\n\n    var sctpInDescription = function (description) {\n      var sections = SDPUtils.splitSections(description.sdp);\n      sections.shift();\n      return sections.some(function (mediaSection) {\n        var mLine = SDPUtils.parseMLine(mediaSection);\n        return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\n      });\n    };\n\n    var getRemoteFirefoxVersion = function (description) {\n      // TODO: Is there a better solution for detecting Firefox?\n      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n\n      if (match === null || match.length < 2) {\n        return -1;\n      }\n\n      var version = parseInt(match[1], 10); // Test for NaN (yes, this is ugly)\n\n      return version !== version ? -1 : version;\n    };\n\n    var getCanSendMaxMessageSize = function (remoteIsFirefox) {\n      // Every implementation we know can send at least 64 KiB.\n      // Note: Although Chrome is technically able to send up to 256 KiB, the\n      //       data does not reach the other peer reliably.\n      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n      var canSendMaxMessageSize = 65536;\n\n      if (browserDetails.browser === 'firefox') {\n        if (browserDetails.version < 57) {\n          if (remoteIsFirefox === -1) {\n            // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n            // fragmentation.\n            canSendMaxMessageSize = 16384;\n          } else {\n            // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n            // messages. Thus, supporting ~2 GiB when sending.\n            canSendMaxMessageSize = 2147483637;\n          }\n        } else if (browserDetails.version < 60) {\n          // Currently, all FF >= 57 will reset the remote maximum message size\n          // to the default value when a data channel is created at a later\n          // stage. :(\n          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n          canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\n        } else {\n          // FF >= 60 supports sending ~2 GiB\n          canSendMaxMessageSize = 2147483637;\n        }\n      }\n\n      return canSendMaxMessageSize;\n    };\n\n    var getMaxMessageSize = function (description, remoteIsFirefox) {\n      // Note: 65536 bytes is the default value from the SDP spec. Also,\n      //       every implementation we know supports receiving 65536 bytes.\n      var maxMessageSize = 65536; // FF 57 has a slightly incorrect default remote max message size, so\n      // we need to adjust it here to avoid a failure when sending.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n\n      if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\n        maxMessageSize = 65535;\n      }\n\n      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n\n      if (match.length > 0) {\n        maxMessageSize = parseInt(match[0].substr(19), 10);\n      } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\n        // If the maximum message size is not present in the remote SDP and\n        // both local and remote are Firefox, the remote peer can receive\n        // ~2 GiB.\n        maxMessageSize = 2147483637;\n      }\n\n      return maxMessageSize;\n    };\n\n    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n    window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n      var pc = this;\n      pc._sctp = null;\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        var isFirefox = getRemoteFirefoxVersion(arguments[0]); // Get the maximum message size the local peer is capable of sending\n\n        var canSendMMS = getCanSendMaxMessageSize(isFirefox); // Get the maximum message size of the remote peer.\n\n        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox); // Determine final maximum message size\n\n        var maxMessageSize;\n\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        } // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n\n\n        var sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get: function () {\n            return maxMessageSize;\n          }\n        });\n        pc._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(pc, arguments);\n    };\n  },\n  shimSendThrowTypeError: function (window) {\n    if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\n      return;\n    } // Note: Although Firefox >= 57 has a native implementation, the maximum\n    //       message size can be reset for all data channels at a later stage.\n    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n\n    function wrapDcSend(dc, pc) {\n      var origDataChannelSend = dc.send;\n\n      dc.send = function () {\n        var data = arguments[0];\n        var length = data.length || data.size || data.byteLength;\n\n        if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\n          throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\n        }\n\n        return origDataChannelSend.apply(dc, arguments);\n      };\n    }\n\n    var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\n\n    window.RTCPeerConnection.prototype.createDataChannel = function () {\n      var pc = this;\n      var dataChannel = origCreateDataChannel.apply(pc, arguments);\n      wrapDcSend(dataChannel, pc);\n      return dataChannel;\n    };\n\n    utils.wrapPeerConnectionEvent(window, 'datachannel', function (e) {\n      wrapDcSend(e.channel, e.target);\n      return e;\n    });\n  }\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/node_modules/webrtc-adapter/src/js/common_shim.js"],"names":["SDPUtils","require","utils","module","exports","shimRTCIceCandidate","window","RTCIceCandidate","prototype","NativeRTCIceCandidate","args","candidate","indexOf","JSON","parse","stringify","substr","length","nativeCandidate","parsedCandidate","parseCandidate","augmentedCandidate","Object","assign","toJSON","sdpMid","sdpMLineIndex","usernameFragment","wrapPeerConnectionEvent","e","defineProperty","value","writable","shimCreateObjectURL","URL","HTMLMediaElement","createObjectURL","revokeObjectURL","undefined","nativeCreateObjectURL","bind","nativeRevokeObjectURL","streams","Map","newId","stream","url","set","deprecated","delete","dsc","getOwnPropertyDescriptor","get","apply","srcObject","nativeSetAttribute","setAttribute","arguments","toLowerCase","shimMaxMessageSize","RTCSctpTransport","RTCPeerConnection","browserDetails","detectBrowser","_sctp","sctpInDescription","description","sections","splitSections","sdp","shift","some","mediaSection","mLine","parseMLine","kind","protocol","getRemoteFirefoxVersion","match","version","parseInt","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","browser","getMaxMessageSize","maxMessageSize","matchPrefix","origSetRemoteDescription","setRemoteDescription","pc","isFirefox","canSendMMS","remoteMMS","Number","POSITIVE_INFINITY","Math","max","min","sctp","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","send","data","size","byteLength","readyState","TypeError","origCreateDataChannel","createDataChannel","dataChannel","channel","target"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype)) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      if (args.candidate && args.candidate.length) {\n        // Augment the native candidate with the parsed fields.\n        var nativeCandidate = new NativeRTCIceCandidate(args);\n        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n        var augmentedCandidate = Object.assign(nativeCandidate,\n            parsedCandidate);\n\n        // Add a serializer that does not serialize the extra attributes.\n        augmentedCandidate.toJSON = function() {\n          return {\n            candidate: augmentedCandidate.candidate,\n            sdpMid: augmentedCandidate.sdpMid,\n            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n            usernameFragment: augmentedCandidate.usernameFragment,\n          };\n        };\n        return augmentedCandidate;\n      }\n      return new NativeRTCIceCandidate(args);\n    };\n    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    utils.wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  },\n\n  shimMaxMessageSize: function(window) {\n    if (window.RTCSctpTransport || !window.RTCPeerConnection) {\n      return;\n    }\n    var browserDetails = utils.detectBrowser(window);\n\n    if (!('sctp' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n        get: function() {\n          return typeof this._sctp === 'undefined' ? null : this._sctp;\n        }\n      });\n    }\n\n    var sctpInDescription = function(description) {\n      var sections = SDPUtils.splitSections(description.sdp);\n      sections.shift();\n      return sections.some(function(mediaSection) {\n        var mLine = SDPUtils.parseMLine(mediaSection);\n        return mLine && mLine.kind === 'application'\n            && mLine.protocol.indexOf('SCTP') !== -1;\n      });\n    };\n\n    var getRemoteFirefoxVersion = function(description) {\n      // TODO: Is there a better solution for detecting Firefox?\n      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n      if (match === null || match.length < 2) {\n        return -1;\n      }\n      var version = parseInt(match[1], 10);\n      // Test for NaN (yes, this is ugly)\n      return version !== version ? -1 : version;\n    };\n\n    var getCanSendMaxMessageSize = function(remoteIsFirefox) {\n      // Every implementation we know can send at least 64 KiB.\n      // Note: Although Chrome is technically able to send up to 256 KiB, the\n      //       data does not reach the other peer reliably.\n      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n      var canSendMaxMessageSize = 65536;\n      if (browserDetails.browser === 'firefox') {\n        if (browserDetails.version < 57) {\n          if (remoteIsFirefox === -1) {\n            // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n            // fragmentation.\n            canSendMaxMessageSize = 16384;\n          } else {\n            // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n            // messages. Thus, supporting ~2 GiB when sending.\n            canSendMaxMessageSize = 2147483637;\n          }\n        } else if (browserDetails.version < 60) {\n          // Currently, all FF >= 57 will reset the remote maximum message size\n          // to the default value when a data channel is created at a later\n          // stage. :(\n          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n          canSendMaxMessageSize =\n            browserDetails.version === 57 ? 65535 : 65536;\n        } else {\n          // FF >= 60 supports sending ~2 GiB\n          canSendMaxMessageSize = 2147483637;\n        }\n      }\n      return canSendMaxMessageSize;\n    };\n\n    var getMaxMessageSize = function(description, remoteIsFirefox) {\n      // Note: 65536 bytes is the default value from the SDP spec. Also,\n      //       every implementation we know supports receiving 65536 bytes.\n      var maxMessageSize = 65536;\n\n      // FF 57 has a slightly incorrect default remote max message size, so\n      // we need to adjust it here to avoid a failure when sending.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n      if (browserDetails.browser === 'firefox'\n           && browserDetails.version === 57) {\n        maxMessageSize = 65535;\n      }\n\n      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n      if (match.length > 0) {\n        maxMessageSize = parseInt(match[0].substr(19), 10);\n      } else if (browserDetails.browser === 'firefox' &&\n                  remoteIsFirefox !== -1) {\n        // If the maximum message size is not present in the remote SDP and\n        // both local and remote are Firefox, the remote peer can receive\n        // ~2 GiB.\n        maxMessageSize = 2147483637;\n      }\n      return maxMessageSize;\n    };\n\n    var origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n      var pc = this;\n      pc._sctp = null;\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        var isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        var canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        var maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        var sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get: function() {\n            return maxMessageSize;\n          }\n        });\n        pc._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(pc, arguments);\n    };\n  },\n\n  shimSendThrowTypeError: function(window) {\n    if (!(window.RTCPeerConnection &&\n        'createDataChannel' in window.RTCPeerConnection.prototype)) {\n      return;\n    }\n\n    // Note: Although Firefox >= 57 has a native implementation, the maximum\n    //       message size can be reset for all data channels at a later stage.\n    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n    function wrapDcSend(dc, pc) {\n      var origDataChannelSend = dc.send;\n      dc.send = function() {\n        var data = arguments[0];\n        var length = data.length || data.size || data.byteLength;\n        if (dc.readyState === 'open' &&\n            pc.sctp && length > pc.sctp.maxMessageSize) {\n          throw new TypeError('Message too large (can send a maximum of ' +\n            pc.sctp.maxMessageSize + ' bytes)');\n        }\n        return origDataChannelSend.apply(dc, arguments);\n      };\n    }\n    var origCreateDataChannel =\n      window.RTCPeerConnection.prototype.createDataChannel;\n    window.RTCPeerConnection.prototype.createDataChannel = function() {\n      var pc = this;\n      var dataChannel = origCreateDataChannel.apply(pc, arguments);\n      wrapDcSend(dataChannel, pc);\n      return dataChannel;\n    };\n    utils.wrapPeerConnectionEvent(window, 'datachannel', function(e) {\n      wrapDcSend(e.channel, e.target);\n      return e;\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}