{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar _a = require('ethereum-cryptography/keccak'),\n    keccak224 = _a.keccak224,\n    keccak384 = _a.keccak384,\n    k256 = _a.keccak256,\n    keccak512 = _a.keccak512;\n\nvar createHash = require('create-hash');\n\nvar rlp = require(\"rlp\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsBuffer(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n\n    case 256:\n      {\n        return k256(a);\n      }\n\n    case 384:\n      {\n        return keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsString(a);\n  var buf = Buffer.from(a, 'utf8');\n  return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsHexString(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsArray(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nexports.sha256 = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\n\nexports.sha256FromString = function (a) {\n  helpers_1.assertIsString(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\n\nexports.sha256FromArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\n\nvar _sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  helpers_1.assertIsBuffer(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromString = function (a, padded) {\n  helpers_1.assertIsString(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromArray = function (a, padded) {\n  helpers_1.assertIsArray(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar _ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLengthLeft(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsBuffer(a);\n    switch (bits) {\n        case 224: {\n            return keccak224(a);\n        }\n        case 256: {\n            return k256(a);\n        }\n        case 384: {\n            return keccak384(a);\n        }\n        case 512: {\n            return keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsString(a);\n    var buf = Buffer.from(a, 'utf8');\n    return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromHexString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsHexString(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromArray = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsArray(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexports.sha256 = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexports.sha256FromString = function (a) {\n    helpers_1.assertIsString(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexports.sha256FromArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    helpers_1.assertIsBuffer(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromString = function (a, padded) {\n    helpers_1.assertIsString(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromArray = function (a, padded) {\n    helpers_1.assertIsArray(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLengthLeft(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}