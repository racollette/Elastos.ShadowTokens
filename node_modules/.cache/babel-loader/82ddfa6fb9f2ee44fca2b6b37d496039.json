{"ast":null,"code":"'use strict';\n/**\n * Credits to https://github.com/emilbayes/blake2b\n *\n * Copyright (c) 2017, Emil Bay github@tixz.dk\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\n\nfunction ADD64AA(v, a, b) {\n  var o0 = v[a] + v[b];\n  var o1 = v[a + 1] + v[b + 1];\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\n\n\nfunction ADD64AC(v, a, b0, b1) {\n  var o0 = v[a] + b0;\n\n  if (b0 < 0) {\n    o0 += 0x100000000;\n  }\n\n  var o1 = v[a + 1] + b1;\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // Little-endian byte access\n\n\nfunction B2B_GET32(arr, i) {\n  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n} // G Mixing function\n// The ROTRs are inlined for speed\n\n\nfunction B2B_G(a, b, c, d, ix, iy) {\n  var x0 = m[ix];\n  var x1 = m[ix + 1];\n  var y0 = m[iy];\n  var y1 = m[iy + 1];\n  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n\n  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n\n  var xor0 = v[d] ^ v[a];\n  var xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor1;\n  v[d + 1] = xor0;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor0 >>> 24 ^ xor1 << 8;\n  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n  ADD64AA(v, a, b);\n  ADD64AC(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n\n  xor0 = v[d] ^ v[a];\n  xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor0 >>> 16 ^ xor1 << 16;\n  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor1 >>> 31 ^ xor0 << 1;\n  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n} // Initialization Vector\n\n\nvar BLAKE2B_IV32 = new Uint32Array([0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19]);\nvar SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]; // These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\n\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {\n  return x * 2;\n})); // Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\n\nvar v = new Uint32Array(32);\nvar m = new Uint32Array(32);\n\nfunction blake2bCompress(ctx, last) {\n  var i = 0; // init work variables\n\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i];\n    v[i + 16] = BLAKE2B_IV32[i];\n  } // low 64 bits of offset\n\n\n  v[24] = v[24] ^ ctx.t;\n  v[25] = v[25] ^ ctx.t / 0x100000000; // high 64 bits not supported, offset may not be higher than 2**53-1\n  // last block flag set ?\n\n  if (last) {\n    v[28] = ~v[28];\n    v[29] = ~v[29];\n  } // get little-endian words\n\n\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i);\n  } // twelve rounds of mixing\n\n\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n  }\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n  }\n} // reusable parameter_block\n\n\nvar parameter_block = new Uint8Array([0, 0, 0, 0, //  0: outlen, keylen, fanout, depth\n0, 0, 0, 0, //  4: leaf length, sequential mode\n0, 0, 0, 0, //  8: node offset\n0, 0, 0, 0, // 12: node offset\n0, 0, 0, 0, // 16: node depth, inner length, rfu\n0, 0, 0, 0, // 20: rfu\n0, 0, 0, 0, // 24: rfu\n0, 0, 0, 0, // 28: rfu\n0, 0, 0, 0, // 32: salt\n0, 0, 0, 0, // 36: salt\n0, 0, 0, 0, // 40: salt\n0, 0, 0, 0, // 44: salt\n0, 0, 0, 0, // 48: personal\n0, 0, 0, 0, // 52: personal\n0, 0, 0, 0, // 56: personal\n0, 0, 0, 0 // 60: personal\n]); // Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n\nfunction Blake2b(outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0); // state, 'param block'\n\n  this.b = new Uint8Array(128);\n  this.h = new Uint32Array(16);\n  this.t = 0; // input count\n\n  this.c = 0; // pointer within buffer\n\n  this.outlen = outlen; // output length in bytes\n\n  parameter_block[0] = outlen;\n  if (key) parameter_block[1] = key.length;\n  parameter_block[2] = 1; // fanout\n\n  parameter_block[3] = 1; // depth\n\n  if (salt) parameter_block.set(salt, 32);\n  if (personal) parameter_block.set(personal, 48); // initialize hash state\n\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4);\n  } // key the hash, if applicable\n\n\n  if (key) {\n    blake2bUpdate(this, key); // at the end\n\n    this.c = 128;\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  blake2bUpdate(this, input);\n  return this;\n};\n\nBlake2b.prototype.digest = function (out) {\n  var buf = !out || out === 'binary' || out === 'hex' ? new Uint8Array(this.outlen) : out;\n  blake2bFinal(this, buf);\n  if (out === 'hex') return hexSlice(buf);\n  return buf;\n};\n\nBlake2b.prototype.final = Blake2b.prototype.digest; // Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\n\nfunction blake2bUpdate(ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n\n      blake2bCompress(ctx, false); // compress (not last)\n\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n} // Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\n\n\nfunction blake2bFinal(ctx, out) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n\n  blake2bCompress(ctx, true); // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n  }\n\n  return out;\n}\n\nfunction hexSlice(buf) {\n  var str = '';\n\n  for (var i = 0; i < buf.length; i++) str += toHex(buf[i]);\n\n  return str;\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nmodule.exports = Blake2b;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/wallet-address-validator/src/crypto/blake2b.js"],"names":["ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA8","SIGMA82","Uint8Array","map","x","blake2bCompress","ctx","last","h","t","parameter_block","Blake2b","outlen","key","salt","personal","fill","length","set","blake2bUpdate","prototype","update","input","digest","out","buf","blake2bFinal","hexSlice","final","str","toHex","n","toString","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Credits to https://github.com/emilbayes/blake2b\n *\n * Copyright (c) 2017, Emil Bay github@tixz.dk\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  var o0 = v[a] + v[b]\n  var o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  var o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  var o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return (arr[i] ^\n  (arr[i + 1] << 8) ^\n  (arr[i + 2] << 16) ^\n  (arr[i + 3] << 24))\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  var x0 = m[ix]\n  var x1 = m[ix + 1]\n  var y0 = m[iy]\n  var y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a]\n  var xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\nvar SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32)\nvar m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  var i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n}\n\n// reusable parameter_block\nvar parameter_block = new Uint8Array([\n  0, 0, 0, 0,      //  0: outlen, keylen, fanout, depth\n  0, 0, 0, 0,      //  4: leaf length, sequential mode\n  0, 0, 0, 0,      //  8: node offset\n  0, 0, 0, 0,      // 12: node offset\n  0, 0, 0, 0,      // 16: node depth, inner length, rfu\n  0, 0, 0, 0,      // 20: rfu\n  0, 0, 0, 0,      // 24: rfu\n  0, 0, 0, 0,      // 28: rfu\n  0, 0, 0, 0,      // 32: salt\n  0, 0, 0, 0,      // 36: salt\n  0, 0, 0, 0,      // 40: salt\n  0, 0, 0, 0,      // 44: salt\n  0, 0, 0, 0,      // 48: personal\n  0, 0, 0, 0,      // 52: personal\n  0, 0, 0, 0,      // 56: personal\n  0, 0, 0, 0       // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction Blake2b (outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0)\n  // state, 'param block'\n\n  this.b = new Uint8Array(128)\n  this.h = new Uint32Array(16)\n  this.t = 0 // input count\n  this.c = 0 // pointer within buffer\n  this.outlen = outlen // output length in bytes\n\n  parameter_block[0] = outlen\n  if (key) parameter_block[1] = key.length\n  parameter_block[2] = 1 // fanout\n  parameter_block[3] = 1 // depth\n\n  if (salt) parameter_block.set(salt, 32)\n  if (personal) parameter_block.set(personal, 48)\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(this, key)\n    // at the end\n    this.c = 128\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  blake2bUpdate(this, input)\n  return this\n}\n\nBlake2b.prototype.digest = function (out) {\n  var buf = (!out || out === 'binary' || out === 'hex') ? new Uint8Array(this.outlen) : out\n  blake2bFinal(this, buf)\n  if (out === 'hex') return hexSlice(buf)\n  return buf\n}\n\nBlake2b.prototype.final = Blake2b.prototype.digest\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx, out) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\nfunction hexSlice (buf) {\n  var str = ''\n  for (var i = 0; i < buf.length; i++) str += toHex(buf[i])\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nmodule.exports = Blake2b;"]},"metadata":{},"sourceType":"script"}