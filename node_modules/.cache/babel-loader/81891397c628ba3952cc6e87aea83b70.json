{"ast":null,"code":"import { notifierCSS, connectedNotifierCSS } from './popupStyles';\nimport { noticeHtml, connectedNoticeHtml } from './popupHtml';\nimport { spaceman, closeIconBlack, closeIconWhite } from './images/index';\nimport { getMessage } from './messageCreator'; // import debugLogger from 'debug';\n// TODO add debug logging\n// const debug = debugLogger('MEWconnect:popup-handler');\n\nexport default class PopUpHandler {\n  constructor() {\n    this.index = 0;\n    this.checkCount = 0;\n    this.elementId = 'mew-connect-notice-corner';\n    this.connectedElementId = this.elementId + '-connected';\n    this.initialcheckIfIdExists();\n    this.createNotice();\n    this.timeoutTracker = null;\n    this.lastActiveElement = '';\n    this.connectNoticeVisible = false;\n  }\n\n  initialcheckIfIdExists() {\n    const element = window.document.getElementById(this.elementId);\n\n    if (element) {\n      this.checkCount++;\n      this.elementId = this.elementId + `-${this.checkCount}`;\n      this.connectedElementId = this.elementId + '-connected';\n      this.initialcheckIfIdExists();\n    }\n  }\n\n  showNotice(text, overrides = null) {\n    let timeoutTime = 3800;\n    let timeoutOverride = false;\n\n    if (typeof text === 'object') {\n      text = getMessage(null, text);\n    } else {\n      text = getMessage(text);\n    }\n\n    if (!text) {\n      text = 'Check your phone to continue';\n    }\n\n    if (typeof overrides === 'number') {\n      timeoutTime = overrides;\n      timeoutOverride = true;\n    }\n\n    const element = window.document.getElementById(this.elementId);\n    this.lastActiveElement = element;\n\n    if (!timeoutOverride) {\n      element.className = 'show';\n      const elementText = window.document.getElementById(`${this.elementId}-text`);\n      elementText.innerHTML = text;\n      setTimeout(function () {\n        element.className = element.className.replace('show', '');\n      }, timeoutTime);\n    } else {\n      element.className = 'show-in';\n      const elementText = window.document.getElementById(`${this.elementId}-text`);\n      elementText.innerHTML = text;\n      setTimeout(function () {\n        element.className = element.className.replace('show-in', 'show-out');\n      }, timeoutTime - 500);\n      this.timeoutTracker = setTimeout(function () {\n        element.className = element.className.replace('show-out', '');\n      }, timeoutTime);\n    }\n  }\n\n  showConnectedNotice(text, overrides) {\n    let timeoutTime = 3800;\n    let timeoutOverride = false;\n\n    if (typeof overrides === 'number') {\n      timeoutTime = overrides;\n      timeoutOverride = true;\n    }\n\n    const element = window.document.getElementById(this.connectedElementId);\n    this.lastActiveElement = element;\n\n    if (!timeoutOverride) {\n      element.className = 'show';\n      setTimeout(function () {\n        element.className = element.className.replace('show', '');\n        this.connectNoticeVisible = true;\n      }, timeoutTime);\n    } else {\n      element.className = 'show-in';\n      setTimeout(function () {\n        element.className = element.className.replace('show-in', 'show-out');\n        this.connectNoticeVisible = true;\n      }, timeoutTime - 500);\n      this.timeoutTracker = setTimeout(function () {\n        element.className = element.className.replace('show-out', '');\n        this.connectNoticeVisible = false;\n        this.lastActiveElement = null;\n      }, timeoutTime);\n    }\n  }\n\n  showNoticePersistentEnter(text) {\n    if (typeof text === 'object') {\n      text = getMessage(null, text);\n    } else {\n      text = getMessage(text);\n    }\n\n    const element = window.document.getElementById(this.elementId);\n    element.className = 'show-persistent';\n    const elementText = window.document.getElementById(`${this.elementId}-text`);\n    elementText.innerHTML = text;\n    this.timeoutTracker = setTimeout(function () {\n      element.className = element.className.replace('show-persistent', '');\n    }, 10800);\n  }\n\n  showNoticePersistentExit() {\n    if (this.timeoutTracker) {\n      clearTimeout(this.timeoutTracker);\n      const element = window.document.getElementById(this.elementId);\n      element.className = element.className.replace('show-persistent', 'show-persistent-leave');\n      this.timeoutTracker = setTimeout(function () {\n        element.className = element.className.replace('show-persistent-leave', '');\n      }, 1800);\n    }\n  }\n\n  noShow() {\n    if (this.timeoutTracker) {\n      clearTimeout(this.timeoutTracker);\n    }\n\n    const element = window.document.getElementById(this.elementId);\n    element.className = '';\n  }\n\n  createNotice() {\n    this.index++;\n    const div = window.document.createElement('div');\n    div.id = this.elementId;\n    div.innerHTML = noticeHtml(this.elementId, spaceman, closeIconBlack);\n    window.document.body.appendChild(div);\n    const css = document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = notifierCSS(this.elementId);else css.innerText = notifierCSS(this.elementId);\n    document.body.appendChild(css);\n    const closeEl = document.getElementById(this.elementId + '-close');\n    closeEl.addEventListener('click', () => {\n      const el = document.getElementById(this.elementId);\n\n      if (this.timeoutTracker) {\n        clearTimeout(this.timeoutTracker);\n      }\n\n      el.className = el.className.replace('show', '');\n    }); // create connected notice\n\n    const divConn = window.document.createElement('div');\n    divConn.id = this.connectedElementId;\n    divConn.innerHTML = connectedNoticeHtml(this.connectedElementId, spaceman, closeIconWhite);\n    window.document.body.appendChild(divConn);\n    const cssConn = document.createElement('style');\n    cssConn.type = 'text/css';\n    if ('textContent' in cssConn) cssConn.textContent = connectedNotifierCSS(this.connectedElementId);else cssConn.innerText = connectedNotifierCSS(this.connectedElementId);\n    document.body.appendChild(cssConn);\n    const closeElConn = document.getElementById(this.connectedElementId + '-close');\n    closeElConn.addEventListener('click', () => {\n      const el = document.getElementById(this.connectedElementId);\n\n      if (this.timeoutTracker) {\n        clearTimeout(this.timeoutTracker);\n      }\n\n      el.className = el.className.replace('show', '');\n    });\n  }\n\n  hideNotifier() {\n    const notify = document.getElementById('Notifications');\n\n    if (notify) {\n      notify.className = 'hidden';\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectWindow/popUpHandler.js"],"names":["notifierCSS","connectedNotifierCSS","noticeHtml","connectedNoticeHtml","spaceman","closeIconBlack","closeIconWhite","getMessage","PopUpHandler","constructor","index","checkCount","elementId","connectedElementId","initialcheckIfIdExists","createNotice","timeoutTracker","lastActiveElement","connectNoticeVisible","element","window","document","getElementById","showNotice","text","overrides","timeoutTime","timeoutOverride","className","elementText","innerHTML","setTimeout","replace","showConnectedNotice","showNoticePersistentEnter","showNoticePersistentExit","clearTimeout","noShow","div","createElement","id","body","appendChild","css","type","textContent","innerText","closeEl","addEventListener","el","divConn","cssConn","closeElConn","hideNotifier","notify"],"mappings":"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","sourcesContent":["import { notifierCSS, connectedNotifierCSS } from './popupStyles';\nimport { noticeHtml, connectedNoticeHtml } from './popupHtml';\nimport { spaceman, closeIconBlack, closeIconWhite } from './images/index';\nimport { getMessage } from './messageCreator';\n// import debugLogger from 'debug';\n\n// TODO add debug logging\n// const debug = debugLogger('MEWconnect:popup-handler');\n\n\nexport default class PopUpHandler {\n  constructor() {\n    this.index = 0;\n    this.checkCount = 0;\n    this.elementId = 'mew-connect-notice-corner';\n    this.connectedElementId = this.elementId + '-connected';\n    this.initialcheckIfIdExists();\n    this.createNotice();\n    this.timeoutTracker = null;\n    this.lastActiveElement = '';\n    this.connectNoticeVisible = false;\n  }\n\n  initialcheckIfIdExists() {\n    const element = window.document.getElementById(this.elementId);\n    if (element) {\n      this.checkCount++;\n      this.elementId = this.elementId + `-${this.checkCount}`;\n      this.connectedElementId = this.elementId + '-connected';\n      this.initialcheckIfIdExists();\n    }\n  }\n\n  showNotice(text, overrides = null) {\n    let timeoutTime = 3800;\n    let timeoutOverride = false;\n    if (typeof text === 'object') {\n      text = getMessage(null, text);\n    } else {\n      text = getMessage(text);\n    }\n    if (!text) {\n      text = 'Check your phone to continue';\n    }\n\n    if (typeof overrides === 'number') {\n      timeoutTime = overrides;\n      timeoutOverride = true;\n    }\n\n    const element = window.document.getElementById(this.elementId);\n    this.lastActiveElement = element;\n    if (!timeoutOverride) {\n      element.className = 'show';\n\n      const elementText = window.document.getElementById(\n        `${this.elementId}-text`\n      );\n      elementText.innerHTML = text;\n\n      setTimeout(function() {\n        element.className = element.className.replace('show', '');\n      }, timeoutTime);\n    } else {\n      element.className = 'show-in';\n\n      const elementText = window.document.getElementById(\n        `${this.elementId}-text`\n      );\n      elementText.innerHTML = text;\n\n      setTimeout(function() {\n        element.className = element.className.replace('show-in', 'show-out');\n      }, timeoutTime - 500);\n      this.timeoutTracker = setTimeout(function() {\n        element.className = element.className.replace('show-out', '');\n      }, timeoutTime);\n    }\n  }\n\n  showConnectedNotice(text, overrides) {\n    let timeoutTime = 3800;\n    let timeoutOverride = false;\n\n    if (typeof overrides === 'number') {\n      timeoutTime = overrides;\n      timeoutOverride = true;\n    }\n    const element = window.document.getElementById(this.connectedElementId);\n    this.lastActiveElement = element;\n    if (!timeoutOverride) {\n      element.className = 'show';\n\n      setTimeout(function() {\n        element.className = element.className.replace('show', '');\n        this.connectNoticeVisible = true;\n      }, timeoutTime);\n    } else {\n      element.className = 'show-in';\n\n      setTimeout(function() {\n        element.className = element.className.replace('show-in', 'show-out');\n        this.connectNoticeVisible = true;\n      }, timeoutTime - 500);\n      this.timeoutTracker = setTimeout(function() {\n        element.className = element.className.replace('show-out', '');\n        this.connectNoticeVisible = false;\n        this.lastActiveElement = null;\n      }, timeoutTime);\n    }\n  }\n\n  showNoticePersistentEnter(text) {\n    if (typeof text === 'object') {\n      text = getMessage(null, text);\n    } else {\n      text = getMessage(text);\n    }\n\n    const element = window.document.getElementById(this.elementId);\n\n    element.className = 'show-persistent';\n\n    const elementText = window.document.getElementById(\n      `${this.elementId}-text`\n    );\n    elementText.innerHTML = text;\n\n    this.timeoutTracker = setTimeout(function() {\n      element.className = element.className.replace('show-persistent', '');\n    }, 10800);\n  }\n\n  showNoticePersistentExit() {\n    if (this.timeoutTracker) {\n      clearTimeout(this.timeoutTracker);\n      const element = window.document.getElementById(this.elementId);\n      element.className = element.className.replace(\n        'show-persistent',\n        'show-persistent-leave'\n      );\n\n      this.timeoutTracker = setTimeout(function() {\n        element.className = element.className.replace(\n          'show-persistent-leave',\n          ''\n        );\n      }, 1800);\n    }\n  }\n\n  noShow() {\n    if (this.timeoutTracker) {\n      clearTimeout(this.timeoutTracker);\n    }\n    const element = window.document.getElementById(this.elementId);\n    element.className = '';\n  }\n\n  createNotice() {\n    this.index++;\n\n    const div = window.document.createElement('div');\n    div.id = this.elementId;\n    div.innerHTML = noticeHtml(this.elementId, spaceman, closeIconBlack);\n    window.document.body.appendChild(div);\n\n    const css = document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = notifierCSS(this.elementId);\n    else css.innerText = notifierCSS(this.elementId);\n    document.body.appendChild(css);\n\n    const closeEl = document.getElementById(this.elementId + '-close');\n    closeEl.addEventListener('click', () => {\n      const el = document.getElementById(this.elementId);\n      if (this.timeoutTracker) {\n        clearTimeout(this.timeoutTracker);\n      }\n      el.className = el.className.replace('show', '');\n    });\n\n    // create connected notice\n    const divConn = window.document.createElement('div');\n    divConn.id = this.connectedElementId;\n    divConn.innerHTML = connectedNoticeHtml(\n      this.connectedElementId,\n      spaceman,\n      closeIconWhite\n    );\n    window.document.body.appendChild(divConn);\n\n    const cssConn = document.createElement('style');\n    cssConn.type = 'text/css';\n    if ('textContent' in cssConn)\n      cssConn.textContent = connectedNotifierCSS(this.connectedElementId);\n    else cssConn.innerText = connectedNotifierCSS(this.connectedElementId);\n    document.body.appendChild(cssConn);\n\n    const closeElConn = document.getElementById(\n      this.connectedElementId + '-close'\n    );\n    closeElConn.addEventListener('click', () => {\n      const el = document.getElementById(this.connectedElementId);\n      if (this.timeoutTracker) {\n        clearTimeout(this.timeoutTracker);\n      }\n      el.className = el.className.replace('show', '');\n    });\n  }\n\n  hideNotifier() {\n    const notify = document.getElementById('Notifications');\n    if (notify) {\n      notify.className = 'hidden';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}