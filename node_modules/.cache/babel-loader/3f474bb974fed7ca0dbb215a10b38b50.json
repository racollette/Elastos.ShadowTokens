{"ast":null,"code":"import MEWconnect from '../../../index';\nimport { Transaction } from 'ethereumjs-tx';\nimport WalletInterface from '../WalletInterface';\nimport { MEW_CONNECT as mewConnectType } from '../bip44/index';\nimport { getSignTransactionObject, sanitizeHex, getBufferFromHex, calculateChainIdFromV } from '../utils';\nimport { hashPersonalMessage } from 'ethereumjs-util';\nimport errorHandler from './errorHandler';\nimport commonGenerator from '../helpers/commonGenerator';\nimport Misc from '../helpers/misc';\nimport debugLogger from 'debug'; // TODO add debug logging\n\nconst debug = debugLogger('MEWconnect:wallet'); // const debugConnectionState = debugLogger('MEWconnect:connection-state');\n\nconst V1_SIGNAL_URL = 'https://connect.mewapi.io';\nconst V2_SIGNAL_URL = 'wss://connect2.mewapi.io/staging';\nconst IS_HARDWARE = true;\n\nclass MEWconnectWalletInterface extends WalletInterface {\n  constructor(pubkey, isHardware, identifier, txSigner, msgSigner, mewConnect, popUpHandler) {\n    super(pubkey, true, identifier);\n    this.errorHandler = errorHandler(popUpHandler);\n    this.txSigner = txSigner;\n    this.msgSigner = msgSigner;\n    this.isHardware = isHardware;\n    this.mewConnect = mewConnect();\n  }\n\n  getConnection() {\n    return this.mewConnect;\n  }\n\n  signTransaction(txParams) {\n    return super.signTransaction(txParams, this.txSigner);\n  }\n\n  signMessage(msg) {\n    return super.signMessage(msg, this.msgSigner);\n  }\n\n}\n\nclass MEWconnectWallet {\n  constructor(state, popupCreator, popUpHandler) {\n    this.identifier = mewConnectType;\n    this.isHardware = IS_HARDWARE;\n    this.mewConnect = new MEWconnect.Initiator({\n      v1Url: V1_SIGNAL_URL,\n      v2Url: V2_SIGNAL_URL,\n      showPopup: true,\n      popupCreator: popupCreator\n    });\n    this.state = state || {};\n    this.popUpHandler = popUpHandler;\n    this.txIds = [];\n  }\n\n  static setConnectionState(connectionState) {\n    if (!connectionState) MEWconnect.Initiator.connectionState = 'disconnected';else MEWconnect.Initiator.connectionState = connectionState;\n  }\n\n  static getConnectionState() {\n    if (!MEWconnect.Initiator.connectionState) return 'disconnected';\n    return MEWconnect.Initiator.connectionState;\n  }\n\n  static getPopupWindowRef() {\n    if (!MEWconnect.Initiator.connectionState) return 'disconnected';\n    return MEWconnect.Initiator.connectionState;\n  }\n\n  async init(qrcodeListener = () => {}) {\n    this.mewConnect.on('codeDisplay', qrcodeListener);\n\n    const txSigner = async tx => {\n      let tokenInfo;\n\n      if (tx.data.slice(0, 10) === '0xa9059cbb' || tx.data.slice(0, 10) === '0x095ea7b3') {\n        tokenInfo = this.state.network.type.tokens.find(entry => entry.address.toLowerCase() === tx.to.toLowerCase());\n\n        if (tokenInfo) {\n          tx.currency = {\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            address: tokenInfo.address\n          };\n        }\n      }\n\n      const networkId = tx.chainId;\n      return new Promise((resolve, reject) => {\n        if (!tx.gasLimit) {\n          tx.gasLimit = tx.gas;\n        }\n\n        this.mewConnect.sendRtcMessage('signTx', JSON.stringify(tx));\n        this.mewConnect.once('signTx', result => {\n          this.mewConnect.removeAllListeners('reject');\n          tx = new Transaction(sanitizeHex(result), {\n            common: commonGenerator(this.state.network.type)\n          });\n          const signedChainId = calculateChainIdFromV(tx.v);\n          if (signedChainId !== networkId) throw new Error('Invalid networkId signature returned. Expected: ' + networkId + ', Got: ' + signedChainId, 'InvalidNetworkId');\n          resolve(getSignTransactionObject(tx));\n        });\n        this.mewConnect.once('reject', () => {\n          debug('signTx rejected');\n          this.mewConnect.removeAllListeners('signTx');\n          reject({\n            reject: true\n          });\n        });\n      });\n    };\n\n    const msgSigner = async msg => {\n      return new Promise((resolve, reject) => {\n        const msgHash = hashPersonalMessage(Misc.toBuffer(msg));\n        this.mewConnect.sendRtcMessage('signMessage', {\n          hash: msgHash.toString('hex'),\n          text: msg\n        });\n        this.mewConnect.once('signMessage', data => {\n          this.mewConnect.removeAllListeners('reject');\n          resolve(getBufferFromHex(sanitizeHex(data.sig)));\n        });\n        this.mewConnect.once('reject', () => {\n          debug('signMessage rejected');\n          this.mewConnect.removeAllListeners('signMessage');\n          reject({\n            reject: true\n          });\n        });\n      });\n    };\n\n    const mewConnect = () => {\n      return this.mewConnect;\n    };\n\n    const address = await signalerConnect(V1_SIGNAL_URL, this.mewConnect);\n    return new MEWconnectWalletInterface(sanitizeHex(address), this.isHardware, this.identifier, txSigner, msgSigner, mewConnect, this.popUpHandler);\n  }\n\n}\n\nconst createWallet = async (state, popupCreator, popUpHandler) => {\n  const _MEWconnectWallet = new MEWconnectWallet(state, popupCreator, popUpHandler);\n\n  createWallet.connectionState = _MEWconnectWallet.connectionState;\n\n  const _tWallet = await _MEWconnectWallet.init();\n\n  return _tWallet;\n};\n\ncreateWallet.errorHandler = errorHandler;\n\nconst signalerConnect = (url, mewConnect) => {\n  return new Promise(resolve => {\n    mewConnect.initiatorStart(url); // future extension\n    // mewConnect.on('AuthRejected', () => {\n    //   reject();\n    // });\n\n    mewConnect.on('RtcConnectedEvent', () => {\n      mewConnect.sendRtcMessage('address', '');\n      mewConnect.once('address', data => {\n        resolve(data.address);\n      });\n    });\n    mewConnect.on('RtcDisconnectEvent', () => {\n      MEWconnectWallet.setConnectionState('disconnected');\n      mewConnect;\n    });\n  });\n};\n\ncreateWallet.getConnectionState = MEWconnectWallet.getConnectionState;\ncreateWallet.setConnectionState = MEWconnectWallet.setConnectionState;\nexport default createWallet;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/MEWconnect/index.js"],"names":["MEWconnect","Transaction","WalletInterface","MEW_CONNECT","mewConnectType","getSignTransactionObject","sanitizeHex","getBufferFromHex","calculateChainIdFromV","hashPersonalMessage","errorHandler","commonGenerator","Misc","debugLogger","debug","V1_SIGNAL_URL","V2_SIGNAL_URL","IS_HARDWARE","MEWconnectWalletInterface","constructor","pubkey","isHardware","identifier","txSigner","msgSigner","mewConnect","popUpHandler","getConnection","signTransaction","txParams","signMessage","msg","MEWconnectWallet","state","popupCreator","Initiator","v1Url","v2Url","showPopup","txIds","setConnectionState","connectionState","getConnectionState","getPopupWindowRef","init","qrcodeListener","on","tx","tokenInfo","data","slice","network","type","tokens","find","entry","address","toLowerCase","to","currency","symbol","decimals","networkId","chainId","Promise","resolve","reject","gasLimit","gas","sendRtcMessage","JSON","stringify","once","result","removeAllListeners","common","signedChainId","v","Error","msgHash","toBuffer","hash","toString","text","sig","signalerConnect","createWallet","_MEWconnectWallet","_tWallet","url","initiatorStart"],"mappings":"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","sourcesContent":["import MEWconnect from '../../../index';\nimport { Transaction } from 'ethereumjs-tx';\nimport WalletInterface from '../WalletInterface';\nimport { MEW_CONNECT as mewConnectType } from '../bip44/index';\nimport {\n  getSignTransactionObject,\n  sanitizeHex,\n  getBufferFromHex,\n  calculateChainIdFromV\n} from '../utils';\nimport { hashPersonalMessage } from 'ethereumjs-util';\nimport errorHandler from './errorHandler';\nimport commonGenerator from '../helpers/commonGenerator';\nimport Misc from '../helpers/misc';\nimport debugLogger from 'debug';\n\n// TODO add debug logging\nconst debug = debugLogger('MEWconnect:wallet');\n// const debugConnectionState = debugLogger('MEWconnect:connection-state');\n\nconst V1_SIGNAL_URL = 'https://connect.mewapi.io';\nconst V2_SIGNAL_URL = 'wss://connect2.mewapi.io/staging';\nconst IS_HARDWARE = true;\n\nclass MEWconnectWalletInterface extends WalletInterface {\n  constructor(\n    pubkey,\n    isHardware,\n    identifier,\n    txSigner,\n    msgSigner,\n    mewConnect,\n    popUpHandler\n  ) {\n    super(pubkey, true, identifier);\n    this.errorHandler = errorHandler(popUpHandler);\n    this.txSigner = txSigner;\n    this.msgSigner = msgSigner;\n    this.isHardware = isHardware;\n    this.mewConnect = mewConnect();\n  }\n\n  getConnection() {\n    return this.mewConnect;\n  }\n\n  signTransaction(txParams) {\n    return super.signTransaction(txParams, this.txSigner);\n  }\n\n  signMessage(msg) {\n    return super.signMessage(msg, this.msgSigner);\n  }\n}\n\nclass MEWconnectWallet {\n  constructor(state, popupCreator, popUpHandler) {\n    this.identifier = mewConnectType;\n    this.isHardware = IS_HARDWARE;\n    this.mewConnect = new MEWconnect.Initiator({\n      v1Url: V1_SIGNAL_URL,\n      v2Url: V2_SIGNAL_URL,\n      showPopup: true,\n      popupCreator: popupCreator\n    });\n    this.state = state || {};\n    this.popUpHandler = popUpHandler;\n    this.txIds = [];\n  }\n\n  static setConnectionState(connectionState) {\n    if (!connectionState) MEWconnect.Initiator.connectionState = 'disconnected';\n    else MEWconnect.Initiator.connectionState = connectionState;\n  }\n\n  static getConnectionState() {\n    if (!MEWconnect.Initiator.connectionState) return 'disconnected';\n    return MEWconnect.Initiator.connectionState;\n  }\n\n  static getPopupWindowRef() {\n    if (!MEWconnect.Initiator.connectionState) return 'disconnected';\n    return MEWconnect.Initiator.connectionState;\n  }\n\n  async init(qrcodeListener = () => {}) {\n    this.mewConnect.on('codeDisplay', qrcodeListener);\n    const txSigner = async tx => {\n      let tokenInfo;\n      if (\n        tx.data.slice(0, 10) === '0xa9059cbb' ||\n        tx.data.slice(0, 10) === '0x095ea7b3'\n      ) {\n        tokenInfo = this.state.network.type.tokens.find(\n          entry => entry.address.toLowerCase() === tx.to.toLowerCase()\n        );\n        if (tokenInfo) {\n          tx.currency = {\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            address: tokenInfo.address\n          };\n        }\n      }\n\n      const networkId = tx.chainId;\n      return new Promise((resolve, reject) => {\n        if (!tx.gasLimit) {\n          tx.gasLimit = tx.gas;\n        }\n        this.mewConnect.sendRtcMessage('signTx', JSON.stringify(tx));\n        this.mewConnect.once('signTx', result => {\n          this.mewConnect.removeAllListeners('reject');\n          tx = new Transaction(sanitizeHex(result), {\n            common: commonGenerator(this.state.network.type)\n          });\n          const signedChainId = calculateChainIdFromV(tx.v);\n          if (signedChainId !== networkId)\n            throw new Error(\n              'Invalid networkId signature returned. Expected: ' +\n                networkId +\n                ', Got: ' +\n                signedChainId,\n              'InvalidNetworkId'\n            );\n          resolve(getSignTransactionObject(tx));\n        });\n        this.mewConnect.once('reject', () => {\n          debug('signTx rejected');\n          this.mewConnect.removeAllListeners('signTx');\n          reject({reject: true});\n        });\n      });\n    };\n    const msgSigner = async msg => {\n      return new Promise((resolve, reject) => {\n        const msgHash = hashPersonalMessage(Misc.toBuffer(msg));\n        this.mewConnect.sendRtcMessage('signMessage', {\n          hash: msgHash.toString('hex'),\n          text: msg\n        });\n        this.mewConnect.once('signMessage', data => {\n          this.mewConnect.removeAllListeners('reject');\n          resolve(getBufferFromHex(sanitizeHex(data.sig)));\n        });\n        this.mewConnect.once('reject', () => {\n          debug('signMessage rejected');\n          this.mewConnect.removeAllListeners('signMessage');\n          reject({reject: true});\n        });\n      });\n    };\n\n    const mewConnect = () => {\n      return this.mewConnect;\n    };\n\n    const address = await signalerConnect(V1_SIGNAL_URL, this.mewConnect);\n\n    return new MEWconnectWalletInterface(\n      sanitizeHex(address),\n      this.isHardware,\n      this.identifier,\n      txSigner,\n      msgSigner,\n      mewConnect,\n      this.popUpHandler\n    );\n  }\n}\n\nconst createWallet = async (state, popupCreator, popUpHandler) => {\n  const _MEWconnectWallet = new MEWconnectWallet(\n    state,\n    popupCreator,\n    popUpHandler\n  );\n  createWallet.connectionState = _MEWconnectWallet.connectionState;\n  const _tWallet = await _MEWconnectWallet.init();\n  return _tWallet;\n};\ncreateWallet.errorHandler = errorHandler;\nconst signalerConnect = (url, mewConnect) => {\n  return new Promise(resolve => {\n    mewConnect.initiatorStart(url);\n    // future extension\n    // mewConnect.on('AuthRejected', () => {\n    //   reject();\n    // });\n    mewConnect.on('RtcConnectedEvent', () => {\n      mewConnect.sendRtcMessage('address', '');\n      mewConnect.once('address', data => {\n        resolve(data.address);\n      });\n    });\n\n    mewConnect.on('RtcDisconnectEvent', () => {\n      MEWconnectWallet.setConnectionState('disconnected');\n      mewConnect;\n    });\n  });\n};\n\ncreateWallet.getConnectionState = MEWconnectWallet.getConnectionState;\ncreateWallet.setConnectionState = MEWconnectWallet.setConnectionState;\n\nexport default createWallet;\n"]},"metadata":{},"sourceType":"module"}