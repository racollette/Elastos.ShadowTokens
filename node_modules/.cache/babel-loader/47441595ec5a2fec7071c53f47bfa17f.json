{"ast":null,"code":"// tslint:disable: no-console\nimport { BurnAndReleaseStatus, Chain, EventType, GatewayMessageType, LockAndMintStatus, LogLevel, RenNetwork, SimpleLogger, Tokens } from \"@renproject/interfaces\";\nimport { extractBurnReference, extractError, findTransactionBySigHash, getGatewayAddress, getTokenAddress, newPromiEvent, parseRenContract, randomBytes, resolveSendCall, SECONDS, sleep, stringToNetwork, utils, waitForReceipt, withDefaultAccount } from \"@renproject/utils\";\nimport BlocknativeSdk from \"bnc-sdk\";\nimport Push from \"push.js\";\nimport Web3 from \"web3\";\nimport { RenElementHTML, RenGatewayContainerHTML, RenIFrame } from \"./html\";\nimport { createElementFromHTML, GATEWAY_ENDPOINT_PRODUCTION, GATEWAY_ENDPOINT_STAGING, getElement, prepareParamsForSendMessage, resolveEndpoint } from \"./utils\";\nimport { validateString } from \"./validate\";\nimport { useBrowserWeb3 } from \"./web3\";\nconst ON_CONFIRMATION_HANDLER_LIMIT = 30;\nexport class Gateway {\n  constructor(network, config, uniqueID) {\n    // tslint:disable: readonly-keyword\n    this.isPaused = false;\n    this.isOpen = false;\n    this.currentProvider = undefined;\n    this.web3 = undefined;\n    this.isCancelling = false; // tslint:enable: readonly-keyword\n    // tslint:disable-next-line: readonly-keyword readonly-array no-any\n\n    this.promiEvent = newPromiEvent();\n\n    this.close = () => {\n      try {\n        const renElement = this._getPopup();\n\n        if (renElement.parentElement) {\n          renElement.parentElement.removeChild(renElement);\n        } // tslint:disable-next-line: no-object-mutation\n\n\n        this.isOpen = false;\n      } catch (error) {\n        this.logger.error(error);\n      }\n    };\n\n    this.pause = () => {\n      this._pause();\n\n      this._sendMessage(GatewayMessageType.Pause, {}).catch(this.logger.error);\n\n      return this;\n    };\n\n    this.resume = () => {\n      this._resume();\n\n      this._sendMessage(GatewayMessageType.Resume, {}).catch(this.logger.error);\n\n      return this;\n    };\n\n    this.cancel = async () => {\n      // tslint:disable-next-line: no-object-mutation\n      this.isCancelling = true;\n      await this._sendMessage(GatewayMessageType.Cancel, {});\n      return this;\n    };\n\n    this.getStatus = async () => {\n      return this._sendMessage(GatewayMessageType.GetStatus, {});\n    };\n\n    this._getGateways = async () => // tslint:disable-next-line: promise-must-complete\n    new Promise((resolve, reject) => {\n      const container = this._getOrCreateGatewayContainer();\n\n      const endpoint = resolveEndpoint(this.endpoint, this.network, \"get-transfers\", this.id);\n      const popup = createElementFromHTML(RenIFrame(this.id, endpoint));\n\n      if (popup) {\n        container.insertBefore(popup, container.lastChild);\n      } // tslint:disable-next-line: no-any\n\n\n      let listener;\n\n      const close = () => {\n        if (popup) {\n          this._removeListener(listener);\n\n          container.removeChild(popup);\n        }\n      }; // tslint:disable-next-line: no-any\n\n\n      listener = e => {\n        if (e.data && e.data.from === \"ren\" && e.data.frameID === this.id) {\n          this._acknowledgeMessage(e.data, {}, popup).catch(this.logger.error); // alert(`I got a message: ${JSON.stringify(e.data)}`);\n\n\n          switch (e.data.type) {\n            case GatewayMessageType.Ready:\n              if (popup) {\n                this._sendMessage(GatewayMessageType.GetTransfers, {}, popup).catch(this.logger.error);\n              }\n\n              break;\n\n            case GatewayMessageType.Transfers:\n              if (e.data.error) {\n                close();\n                reject(new Error(e.data.error));\n              } else {\n                close();\n                resolve(e.data.payload);\n              }\n\n              break;\n          }\n        }\n      };\n\n      this._addListener(listener);\n    });\n\n    this.result = () => this.promiEvent;\n\n    this._open = (transferParams, web3Provider) => {\n      (async () => {\n        // Provider can be null if the developer is handling transactions\n        // outside of GatewayJS.\n        const provider = web3Provider || transferParams.web3Provider;\n\n        if (provider !== null) {\n          this.web3 = new Web3(provider);\n\n          try {\n            this.blocknative = new BlocknativeSdk({\n              dappId: \"6b3d07f1-b158-4cf1-99ec-919b11fe3654\",\n              networkId: await this.web3.eth.net.getId()\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        } // tslint:disable-next-line: no-object-mutation\n\n\n        if (transferParams.sendAmount) {\n          // tslint:disable-next-line: no-parameter-reassignment\n          transferParams = resolveSendCall(stringToNetwork(this.network), transferParams);\n        } // Check that GatewayJS isn't already open\n\n\n        let existingPopup;\n\n        try {\n          existingPopup = this._getPopup();\n        } catch (error) {\n          /* Ignore error */\n        }\n\n        if (existingPopup) {\n          throw new Error(\"GatewayJS already open\");\n        }\n\n        const container = this._getOrCreateGatewayContainer();\n\n        const endpoint = resolveEndpoint(this.endpoint, this.network, \"\", this.id);\n        const popup = createElementFromHTML(RenElementHTML(this.id, endpoint, this.isPaused));\n\n        if (popup) {\n          container.insertBefore(popup, container.lastChild); // tslint:disable-next-line: no-object-mutation\n\n          this.isOpen = true;\n        } // tslint:disable-next-line: no-any\n\n\n        let listener;\n\n        const onClose = () => {\n          // Remove listener\n          this._removeListener(listener);\n\n          this.close();\n        }; // tslint:disable-next-line: no-any\n\n\n        listener = this._eventListener(transferParams, onClose);\n\n        this._addListener(listener); // Add handler to overlay\n\n\n        const overlay = this._getOverlay();\n\n        if (overlay) {\n          // tslint:disable-next-line: no-object-mutation no-any\n          overlay.onclick = () => {\n            this.pause();\n          };\n        } // Add handler to settings button\n\n\n        const settingsButton = this._getSettingsButton();\n\n        if (settingsButton) {\n          // tslint:disable-next-line: no-object-mutation no-any\n          settingsButton.onclick = () => {\n            this._toggleSettings();\n          };\n        } // Add handler to settings button\n\n\n        const notificationButton = this._getNotificationButton();\n\n        if (notificationButton) {\n          // tslint:disable-next-line: no-object-mutation no-any\n          notificationButton.onclick = () => {\n            try {\n              if (!Push.Permission.has()) {\n                Push.Permission.request();\n              }\n            } catch (error) {\n              this.logger.error(error);\n            }\n\n            notificationButton.classList.add(\"_ren_notifications-hidden\");\n          };\n        }\n\n        if (Push.Permission.has()) {\n          notificationButton.classList.add(\"_ren_notifications-hidden\");\n        }\n      })().catch(this.promiEvent.reject);\n      return this;\n    };\n\n    this._eventListener = (transferParams, onClose) => e => {\n      if (e.data && e.data.from === \"ren\" && e.data.frameID === this.id) {\n        // alert(`I got a message: ${JSON.stringify(e.data)}`);\n        switch (e.data.type) {\n          case GatewayMessageType.Ready:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            const transferParamsFixed = prepareParamsForSendMessage(transferParams);\n\n            this._sendMessage(GatewayMessageType.TransferDetails, {\n              transferDetails: transferParamsFixed,\n              paused: this.isPaused,\n              cancelled: this.isCancelling\n            }).catch(this.logger.error);\n\n            break;\n\n          case GatewayMessageType.Status:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            const {\n              status,\n              details\n            } = e.data.payload;\n\n            if (status) {\n              this.promiEvent.emit(\"status\", status, details);\n            }\n\n            break;\n\n          case GatewayMessageType.TransferUpdated:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            const {\n              transfer\n            } = e.data.payload;\n            this.promiEvent.emit(\"transferUpdated\", transfer);\n            break;\n\n          case GatewayMessageType.Pause:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            this._pause();\n\n            break;\n\n          case GatewayMessageType.Resume:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            this._resume();\n\n            break;\n\n          case GatewayMessageType.Cancel:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            onClose();\n\n            if (this.isCancelling) {\n              // tslint:disable-next-line: no-object-mutation\n              this.isCancelling = false;\n              return;\n            } else {\n              // tslint:disable-next-line: no-object-mutation\n              this.isCancelling = false;\n              this.promiEvent.reject(new Error(\"Transfer cancelled by user\"));\n              return;\n            }\n\n          case GatewayMessageType.SendEthereumTx:\n            (async () => {\n              try {\n                if (!this.web3) {\n                  throw new Error(`No Web3 defined`);\n                }\n\n                const txConfig = await withDefaultAccount(this.web3, e.data.payload.transactionConfig);\n                const promiEvent = this.web3.eth.sendTransaction(txConfig);\n                const txHash = await new Promise((resolve, reject) => {\n                  promiEvent.on(\"transactionHash\", resolve);\n                  promiEvent.catch(reject);\n                }); // It may be simpler to replace with\n                // `promiEvent.on`, depending on wether or not\n                // .on causes indefinite network requests or\n                // if web3 fetches blocks anyways.\n\n                const listenForConfirmations = () => promiEvent.once(\"confirmation\", confirmations => {\n                  this._sendMessage(GatewayMessageType.SendEthereumTxConfirmations, {\n                    txHash,\n                    confirmations\n                  }).catch(this.logger.error);\n\n                  if (confirmations < ON_CONFIRMATION_HANDLER_LIMIT) {\n                    listenForConfirmations();\n                  }\n                });\n\n                listenForConfirmations();\n\n                this._acknowledgeMessage(e.data, {\n                  txHash\n                }).catch(this.logger.error);\n              } catch (error) {\n                this._acknowledgeMessage(e.data, {\n                  error: extractError(error)\n                }).catch(this.logger.error);\n              }\n            })().catch(this.logger.error);\n            return;\n\n          case GatewayMessageType.GetEthereumTxStatus:\n            (async () => {\n              try {\n                if (!this.web3) {\n                  throw new Error(`No Web3 defined`);\n                }\n\n                const txHash = e.data.payload.txHash;\n                const currentBlock = await this.web3.eth.getBlockNumber();\n                const receipt = await waitForReceipt(this.web3, txHash, this.blocknative);\n                const confirmations = Math.max(currentBlock - receipt.blockNumber, 0);\n\n                this._acknowledgeMessage(e.data, {\n                  confirmations,\n                  reverted: false\n                }).catch(this.logger.error);\n              } catch (error) {\n                // TODO: Check if tx was reverted or getting receipt failed.\n                this._acknowledgeMessage(e.data, {\n                  reverted: true,\n                  error: extractError(error)\n                }).catch(this.logger.error);\n              }\n            })().catch(this.logger.error);\n            return;\n\n          case GatewayMessageType.GetEthereumTxBurn:\n            (async () => {\n              try {\n                if (!this.web3) {\n                  throw new Error(`No Web3 defined`);\n                }\n\n                const txHash = e.data.payload.txHash;\n                const burnReference = await extractBurnReference(this.web3, txHash);\n\n                this._acknowledgeMessage(e.data, {\n                  burnReference\n                }).catch(this.logger.error);\n              } catch (error) {\n                this.logger.error(error);\n\n                this._acknowledgeMessage(e.data, {\n                  error: extractError(error)\n                }).catch(this.logger.error);\n              }\n            })().catch(this.logger.error);\n            return;\n\n          case GatewayMessageType.FindMintTransaction:\n            (async () => {\n              try {\n                if (!this.web3) {\n                  throw new Error(`No Web3 defined`);\n                }\n\n                const {\n                  sigHash,\n                  token\n                } = e.data.payload;\n                const txHash = await findTransactionBySigHash(this.network, this.web3, token, sigHash, this.logger);\n\n                this._acknowledgeMessage(e.data, {\n                  txHash\n                }).catch(this.logger.error);\n              } catch (error) {\n                this.logger.error(error);\n\n                this._acknowledgeMessage(e.data, {\n                  error: extractError(error)\n                }).catch(this.logger.error);\n              }\n            })().catch(this.logger.error);\n            return;\n\n          case GatewayMessageType.Error:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            onClose();\n            this.promiEvent.reject(new Error(e.data.payload.message || \"Error thrown from Gateway iframe.\"));\n            return;\n\n          case GatewayMessageType.Done:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            onClose();\n            this.promiEvent.resolve(e.data.payload);\n            return;\n\n          case GatewayMessageType.RequestNotificationPermission:\n            this._acknowledgeMessage(e.data, {}).catch(this.logger.error);\n\n            if (!Push.Permission.has()) {\n              this._getNotificationButton().classList.add(\"_ren_notifications-blue\");\n            }\n\n            return;\n\n          case GatewayMessageType.ShowNotification:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n            const {\n              title,\n              body\n            } = e.data.payload;\n\n            try {\n              if (Push.Permission.has()) {\n                // tslint:disable-next-line: insecure-random\n                const tag = String(Math.random());\n                Push.create(title, {\n                  body,\n                  icon: \"https://gateway.renproject.io/favicon.ico\",\n                  timeout: 4000,\n                  tag,\n                  onClick: () => {\n                    window.focus();\n                    Push.close(tag);\n                    this.resume();\n                  }\n                }).catch(this.logger.error);\n              }\n            } catch (error) {\n              this.logger.error(error);\n            }\n\n            return;\n\n          default:\n            this._acknowledgeMessage(e.data).catch(this.logger.error);\n\n        }\n      }\n    };\n\n    this._sendMessage = async (type, payload, iframeIn) => // tslint:disable-next-line: no-any\n    new Promise(async resolve => {\n      // TODO: Allow response in acknowledgement.\n      let frame;\n\n      try {\n        frame = iframeIn || this._getIFrame();\n      } catch (error) {\n        this.logger.error(error);\n        return;\n      }\n\n      while (!frame) {\n        await sleep(1 * SECONDS);\n      }\n\n      const messageID = randomBytes(8); // tslint:disable-next-line: no-any\n\n      let listener;\n      let acknowledged = false;\n\n      const removeListener = () => {\n        acknowledged = true;\n\n        this._removeListener(listener);\n      }; // tslint:disable-next-line: no-any\n\n\n      listener = e => {\n        if (e.data && e.data.from === \"ren\" && e.data.type === GatewayMessageType.Acknowledgement && e.data.messageID === messageID) {\n          removeListener();\n          resolve(e.data.payload);\n        }\n      };\n\n      this._addListener(listener); // Repeat message until acknowledged\n\n\n      let count = 0; // tslint:disable-next-line: no-any\n\n      const contentWindow = frame.contentWindow;\n\n      while (!acknowledged && contentWindow) {\n        if (count >= 1000) {\n          throw new Error(`Lost communication with Gateway iFrame - unable post message.`);\n        }\n\n        count++;\n        const gatewayMessage = {\n          from: \"ren\",\n          frameID: this.id,\n          type,\n          payload,\n          messageID\n        };\n        contentWindow.postMessage(gatewayMessage, \"*\"); // Sleep for 1 second\n\n        await sleep(1 * SECONDS);\n      }\n    }); // tslint:disable-next-line: no-any\n\n\n    this._acknowledgeMessage = async (message, payload, iframeIn) => {\n      if (message.type === GatewayMessageType.Acknowledgement) {\n        return;\n      }\n\n      let frame;\n\n      try {\n        frame = iframeIn || this._getIFrame();\n      } catch (error) {\n        this.logger.error(error);\n        return;\n      }\n\n      while (!frame) {\n        await sleep(1 * SECONDS);\n      }\n\n      const response = {\n        from: \"ren\",\n        type: GatewayMessageType.Acknowledgement,\n        frameID: message.frameID,\n        payload: payload || {},\n        messageID: message.messageID\n      }; // tslint:disable-next-line: no-any\n\n      const contentWindow = frame.contentWindow;\n      contentWindow.postMessage(response, \"*\");\n    };\n\n    this._addListener = // tslint:disable-next-line: no-any\n    listener => {\n      window.addEventListener(\"message\", listener);\n    };\n\n    this._removeListener = // tslint:disable-next-line: no-any\n    listener => {\n      window.removeEventListener(\"message\", listener);\n    };\n\n    this._toggleSettings = () => {\n      this._sendMessage(GatewayMessageType.ToggleSettings, {}).catch(this.logger.error);\n    };\n\n    this._pause = () => {\n      // tslint:disable-next-line: no-object-mutation\n      this.isPaused = true;\n\n      try {\n        this._getPopup().classList.add(\"_ren_gateway-minified\");\n      } catch (error) {\n        this.logger.error(error);\n      }\n    };\n\n    this._resume = () => {\n      // tslint:disable-next-line: no-object-mutation\n      this.isPaused = false;\n\n      try {\n        this._getPopup().classList.remove(\"_ren_gateway-minified\");\n      } catch (error) {\n        this.logger.error(error);\n      }\n    };\n\n    this._getSettingsButton = () => getElement(`_ren_settings-${this.id}`);\n\n    this._getNotificationButton = () => getElement(`_ren_notifications-${this.id}`);\n\n    this._getOverlay = () => getElement(`_ren_overlay-${this.id}`);\n\n    this._getPopup = () => getElement(`_ren_gateway-${this.id}`);\n\n    this._getIFrame = () => getElement(`_ren_iframe-${this.id}`);\n\n    this._getOrCreateGatewayContainer = () => {\n      try {\n        return getElement(`_ren_gatewayContainer`);\n      } catch (error) {// Ignore error\n      }\n\n      const body = [...(Array.from(document.getElementsByTagName(\"body\")) || []), ...(Array.from(document.getElementsByTagName(\"html\")) || [])];\n      const popup = createElementFromHTML(RenGatewayContainerHTML());\n\n      if (body[0] && popup) {\n        body[0].insertBefore(popup, body[0].lastChild);\n      }\n\n      return getElement(`_ren_gatewayContainer`);\n    };\n\n    this.logger = config && config.logger || new SimpleLogger(config && config.logLevel || LogLevel.Error);\n    this.network = network;\n\n    if (!config.endpoint) {\n      throw new Error(\"Must provide endpoint in Gateway config\");\n    }\n\n    this.endpoint = config.endpoint;\n    this.id = uniqueID || randomBytes(8);\n  }\n\n}\nexport default class GatewayJS {\n  // tslint:disable-next-line: readonly-keyword\n  constructor(network, config) {\n    /**\n     * Returns a map containing previously opened gateways.\n     */\n    this.getGateways = async options => {\n      const gateways = await new Gateway(this.network, this.config)._getGateways(); // Delete gateways that have been returned\n\n      if (!options || !options.all) {\n        for (const key of gateways.keys()) {\n          const gateway = gateways.get(key);\n\n          if (gateway && gateway.returned) {\n            gateways.delete(key);\n          }\n        }\n      }\n\n      return gateways;\n    };\n    /**\n     * Start a cross-chain transfer onto Ethereum.\n     *\n     * @param {(LockAndMintParams | LockAndMintParamsSimple | SendParams)} params An object specifying the details\n     *        required for the transfer.\n     * @returns {Gateway}\n     */\n\n\n    this.lockAndMint = (params, uniqueID) => {\n      if (params.sendTo && !params.contractFn) {\n        params = resolveSendCall(this.network, params);\n      } else if (params.sendTo) {\n        const {\n          sendTo,\n          contractFn,\n          contractParams,\n          txConfig,\n          ...restOfParams\n        } = params;\n        params = { ...restOfParams,\n          contractCalls: [{\n            sendTo,\n            contractFn,\n            contractParams,\n            txConfig\n          }]\n        };\n      }\n\n      return new Gateway(this.network, this.config, uniqueID)._open(params);\n    };\n    /**\n     * Start a cross-chain transfer away from Ethereum.\n     *\n     * @param {(BurnAndReleaseParams | BurnAndReleaseParamsSimple | SendParams)} params An object specifying the details\n     *        required for the transfer.\n     * @returns {Gateway}\n     */\n\n\n    this.burnAndRelease = (params, uniqueID) => {\n      if (params.sendTo && !params.contractFn) {\n        params = resolveSendCall(this.network, params);\n      } else if (params.sendTo) {\n        const {\n          sendTo,\n          contractFn,\n          contractParams,\n          txConfig,\n          ...restOfParams\n        } = params;\n        params = { ...restOfParams,\n          contractCalls: [{\n            sendTo,\n            contractFn,\n            contractParams,\n            txConfig\n          }]\n        };\n      }\n\n      return new Gateway(this.network, this.config, uniqueID)._open(params);\n    };\n\n    this.open = (params, uniqueID) => {\n      // tslint:disable-next-line: strict-type-predicates\n      if (params.eventType === EventType.LockAndMint) {\n        return this.recoverTransfer(undefined, params);\n      }\n\n      const sendToken = params.sendToken;\n\n      if (sendToken === \"BTC\" || sendToken === \"ZEC\" || sendToken === \"BCH\") {\n        throw new Error(`Ambiguous token ${sendToken} - call \"lockAndMint\" or \"burnAndRelease\" instead of \"open\"`);\n      }\n\n      if (parseRenContract(sendToken).to === Chain.Ethereum) {\n        return this.lockAndMint(params, uniqueID);\n      } else {\n        return this.burnAndRelease(params, uniqueID);\n      }\n    };\n\n    this.send = (params, uniqueID) => {\n      return new Gateway(this.network, this.config, uniqueID)._open(params);\n    };\n\n    this.recoverTransfer = (web3Provider, params, uniqueID) => {\n      return new Gateway(this.network, this.config, uniqueID || params.id)._open(params, web3Provider);\n    };\n\n    this.getTokenAddress = (web3, token) => getTokenAddress(stringToNetwork(this.network), web3, token);\n\n    this.getGatewayAddress = (web3, token) => getGatewayAddress(stringToNetwork(this.network), web3, token);\n\n    const publicNetworks = [RenNetwork.Mainnet, RenNetwork.Chaosnet, RenNetwork.Testnet];\n\n    if (typeof network === \"string\") {\n      validateString(network, `Invalid network. Expected one of ${publicNetworks.join(\", \")}`, Object.values(RenNetwork));\n    }\n\n    this.network = stringToNetwork(network); // NOTE: In a future release, all networks will use the production endpoint.\n\n    this.config = { ...config,\n      endpoint: config && (config.endpoint === \"staging\" ? GATEWAY_ENDPOINT_STAGING : config.endpoint) || GATEWAY_ENDPOINT_PRODUCTION\n    };\n  }\n\n}\nGatewayJS.Tokens = Tokens;\nGatewayJS.Networks = RenNetwork;\nGatewayJS.Chains = Chain;\nGatewayJS.LockAndMintStatus = LockAndMintStatus;\nGatewayJS.BurnAndReleaseStatus = BurnAndReleaseStatus;\nGatewayJS.utils = { ...utils,\n  useBrowserWeb3\n}; ////////////////////////////////////////////////////////////////////////////////\n// EXPORTS                                                                    //\n// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //\n////////////////////////////////////////////////////////////////////////////////\n// tslint:disable: no-any no-object-mutation strict-type-predicates no-typeof-undefined\n// tslint:disable-next-line: no-string-literal\n\nGatewayJS[\"default\"] = GatewayJS.GatewayJS = GatewayJS; // AMD\n\ntry {\n  // @ts-ignore\n  if (typeof define === \"function\" && define.amd) {\n    // @ts-ignore\n    define(() => GatewayJS);\n  }\n} catch (error) {\n  /* ignore */\n} // Node.js and other environments that support module.exports.\n\n\ntry {\n  // @ts-ignore\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = GatewayJS;\n  }\n} catch (error) {\n  /* ignore */\n} // Browser.\n\n\ntry {\n  // @ts-ignore\n  if (typeof window !== \"undefined\" && window) {\n    window.GatewayJS = GatewayJS;\n  }\n} catch (error) {\n  /* ignore */\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// tslint:disable: no-console\nimport { BurnAndReleaseStatus, Chain, EventType, GatewayMessageType, LockAndMintStatus, LogLevel, RenNetwork, SimpleLogger, Tokens, } from \"@renproject/interfaces\";\nimport { extractBurnReference, extractError, findTransactionBySigHash, getGatewayAddress, getTokenAddress, newPromiEvent, parseRenContract, randomBytes, resolveSendCall, SECONDS, sleep, stringToNetwork, utils, waitForReceipt, withDefaultAccount, } from \"@renproject/utils\";\nimport BlocknativeSdk from \"bnc-sdk\";\nimport Push from \"push.js\";\nimport Web3 from \"web3\";\nimport { RenElementHTML, RenGatewayContainerHTML, RenIFrame } from \"./html\";\nimport { createElementFromHTML, GATEWAY_ENDPOINT_PRODUCTION, GATEWAY_ENDPOINT_STAGING, getElement, prepareParamsForSendMessage, resolveEndpoint, } from \"./utils\";\nimport { validateString } from \"./validate\";\nimport { useBrowserWeb3 } from \"./web3\";\nconst ON_CONFIRMATION_HANDLER_LIMIT = 30;\nexport class Gateway {\n    constructor(network, config, uniqueID) {\n        // tslint:disable: readonly-keyword\n        this.isPaused = false;\n        this.isOpen = false;\n        this.currentProvider = undefined;\n        this.web3 = undefined;\n        this.isCancelling = false;\n        // tslint:enable: readonly-keyword\n        // tslint:disable-next-line: readonly-keyword readonly-array no-any\n        this.promiEvent = newPromiEvent();\n        this.close = () => {\n            try {\n                const renElement = this._getPopup();\n                if (renElement.parentElement) {\n                    renElement.parentElement.removeChild(renElement);\n                }\n                // tslint:disable-next-line: no-object-mutation\n                this.isOpen = false;\n            }\n            catch (error) {\n                this.logger.error(error);\n            }\n        };\n        this.pause = () => {\n            this._pause();\n            this._sendMessage(GatewayMessageType.Pause, {}).catch(this.logger.error);\n            return this;\n        };\n        this.resume = () => {\n            this._resume();\n            this._sendMessage(GatewayMessageType.Resume, {}).catch(this.logger.error);\n            return this;\n        };\n        this.cancel = async () => {\n            // tslint:disable-next-line: no-object-mutation\n            this.isCancelling = true;\n            await this._sendMessage(GatewayMessageType.Cancel, {});\n            return this;\n        };\n        this.getStatus = async () => {\n            return this._sendMessage(GatewayMessageType.GetStatus, {});\n        };\n        this._getGateways = async () => \n        // tslint:disable-next-line: promise-must-complete\n        new Promise((resolve, reject) => {\n            const container = this._getOrCreateGatewayContainer();\n            const endpoint = resolveEndpoint(this.endpoint, this.network, \"get-transfers\", this.id);\n            const popup = createElementFromHTML(RenIFrame(this.id, endpoint));\n            if (popup) {\n                container.insertBefore(popup, container.lastChild);\n            }\n            // tslint:disable-next-line: no-any\n            let listener;\n            const close = () => {\n                if (popup) {\n                    this._removeListener(listener);\n                    container.removeChild(popup);\n                }\n            };\n            // tslint:disable-next-line: no-any\n            listener = (e) => {\n                if (e.data &&\n                    e.data.from === \"ren\" &&\n                    e.data.frameID === this.id) {\n                    this._acknowledgeMessage(e.data, {}, popup).catch(this.logger.error);\n                    // alert(`I got a message: ${JSON.stringify(e.data)}`);\n                    switch (e.data.type) {\n                        case GatewayMessageType.Ready:\n                            if (popup) {\n                                this._sendMessage(GatewayMessageType.GetTransfers, {}, popup).catch(this.logger.error);\n                            }\n                            break;\n                        case GatewayMessageType.Transfers:\n                            if (e.data.error) {\n                                close();\n                                reject(new Error(e.data.error));\n                            }\n                            else {\n                                close();\n                                resolve(e.data.payload);\n                            }\n                            break;\n                    }\n                }\n            };\n            this._addListener(listener);\n        });\n        this.result = () => this.promiEvent;\n        this._open = (transferParams, web3Provider) => {\n            (async () => {\n                // Provider can be null if the developer is handling transactions\n                // outside of GatewayJS.\n                const provider = web3Provider || transferParams.web3Provider;\n                if (provider !== null) {\n                    this.web3 = new Web3(provider);\n                    try {\n                        this.blocknative = new BlocknativeSdk({\n                            dappId: \"6b3d07f1-b158-4cf1-99ec-919b11fe3654\",\n                            networkId: await this.web3.eth.net.getId(),\n                        });\n                    }\n                    catch (error) {\n                        console.error(error);\n                    }\n                }\n                // tslint:disable-next-line: no-object-mutation\n                if (transferParams.sendAmount) {\n                    // tslint:disable-next-line: no-parameter-reassignment\n                    transferParams = resolveSendCall(stringToNetwork(this.network), transferParams);\n                }\n                // Check that GatewayJS isn't already open\n                let existingPopup;\n                try {\n                    existingPopup = this._getPopup();\n                }\n                catch (error) {\n                    /* Ignore error */\n                }\n                if (existingPopup) {\n                    throw new Error(\"GatewayJS already open\");\n                }\n                const container = this._getOrCreateGatewayContainer();\n                const endpoint = resolveEndpoint(this.endpoint, this.network, \"\", this.id);\n                const popup = createElementFromHTML(RenElementHTML(this.id, endpoint, this.isPaused));\n                if (popup) {\n                    container.insertBefore(popup, container.lastChild);\n                    // tslint:disable-next-line: no-object-mutation\n                    this.isOpen = true;\n                }\n                // tslint:disable-next-line: no-any\n                let listener;\n                const onClose = () => {\n                    // Remove listener\n                    this._removeListener(listener);\n                    this.close();\n                };\n                // tslint:disable-next-line: no-any\n                listener = this._eventListener(transferParams, onClose);\n                this._addListener(listener);\n                // Add handler to overlay\n                const overlay = this._getOverlay();\n                if (overlay) {\n                    // tslint:disable-next-line: no-object-mutation no-any\n                    overlay.onclick = () => {\n                        this.pause();\n                    };\n                }\n                // Add handler to settings button\n                const settingsButton = this._getSettingsButton();\n                if (settingsButton) {\n                    // tslint:disable-next-line: no-object-mutation no-any\n                    settingsButton.onclick = () => {\n                        this._toggleSettings();\n                    };\n                }\n                // Add handler to settings button\n                const notificationButton = this._getNotificationButton();\n                if (notificationButton) {\n                    // tslint:disable-next-line: no-object-mutation no-any\n                    notificationButton.onclick = () => {\n                        try {\n                            if (!Push.Permission.has()) {\n                                Push.Permission.request();\n                            }\n                        }\n                        catch (error) {\n                            this.logger.error(error);\n                        }\n                        notificationButton.classList.add(\"_ren_notifications-hidden\");\n                    };\n                }\n                if (Push.Permission.has()) {\n                    notificationButton.classList.add(\"_ren_notifications-hidden\");\n                }\n            })().catch(this.promiEvent.reject);\n            return this;\n        };\n        this._eventListener = (transferParams, onClose) => (e) => {\n            if (e.data && e.data.from === \"ren\" && e.data.frameID === this.id) {\n                // alert(`I got a message: ${JSON.stringify(e.data)}`);\n                switch (e.data.type) {\n                    case GatewayMessageType.Ready:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        const transferParamsFixed = prepareParamsForSendMessage(transferParams);\n                        this._sendMessage(GatewayMessageType.TransferDetails, {\n                            transferDetails: transferParamsFixed,\n                            paused: this.isPaused,\n                            cancelled: this.isCancelling,\n                        }).catch(this.logger.error);\n                        break;\n                    case GatewayMessageType.Status:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        const { status, details } = e.data.payload;\n                        if (status) {\n                            this.promiEvent.emit(\"status\", status, details);\n                        }\n                        break;\n                    case GatewayMessageType.TransferUpdated:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        const { transfer } = e.data.payload;\n                        this.promiEvent.emit(\"transferUpdated\", transfer);\n                        break;\n                    case GatewayMessageType.Pause:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        this._pause();\n                        break;\n                    case GatewayMessageType.Resume:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        this._resume();\n                        break;\n                    case GatewayMessageType.Cancel:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        onClose();\n                        if (this.isCancelling) {\n                            // tslint:disable-next-line: no-object-mutation\n                            this.isCancelling = false;\n                            return;\n                        }\n                        else {\n                            // tslint:disable-next-line: no-object-mutation\n                            this.isCancelling = false;\n                            this.promiEvent.reject(new Error(\"Transfer cancelled by user\"));\n                            return;\n                        }\n                    case GatewayMessageType.SendEthereumTx:\n                        (async () => {\n                            try {\n                                if (!this.web3) {\n                                    throw new Error(`No Web3 defined`);\n                                }\n                                const txConfig = await withDefaultAccount(this.web3, e.data.payload.transactionConfig);\n                                const promiEvent = this.web3.eth.sendTransaction(txConfig);\n                                const txHash = await new Promise((resolve, reject) => {\n                                    promiEvent.on(\"transactionHash\", resolve);\n                                    promiEvent.catch(reject);\n                                });\n                                // It may be simpler to replace with\n                                // `promiEvent.on`, depending on wether or not\n                                // .on causes indefinite network requests or\n                                // if web3 fetches blocks anyways.\n                                const listenForConfirmations = () => promiEvent.once(\"confirmation\", (confirmations) => {\n                                    this._sendMessage(GatewayMessageType.SendEthereumTxConfirmations, { txHash, confirmations }).catch(this.logger.error);\n                                    if (confirmations <\n                                        ON_CONFIRMATION_HANDLER_LIMIT) {\n                                        listenForConfirmations();\n                                    }\n                                });\n                                listenForConfirmations();\n                                this._acknowledgeMessage(e.data, { txHash }).catch(this.logger.error);\n                            }\n                            catch (error) {\n                                this._acknowledgeMessage(e.data, {\n                                    error: extractError(error),\n                                }).catch(this.logger.error);\n                            }\n                        })().catch(this.logger.error);\n                        return;\n                    case GatewayMessageType.GetEthereumTxStatus:\n                        (async () => {\n                            try {\n                                if (!this.web3) {\n                                    throw new Error(`No Web3 defined`);\n                                }\n                                const txHash = e.data\n                                    .payload.txHash;\n                                const currentBlock = await this.web3.eth.getBlockNumber();\n                                const receipt = await waitForReceipt(this.web3, txHash, this.blocknative);\n                                const confirmations = Math.max(currentBlock - receipt.blockNumber, 0);\n                                this._acknowledgeMessage(e.data, { confirmations, reverted: false }).catch(this.logger.error);\n                            }\n                            catch (error) {\n                                // TODO: Check if tx was reverted or getting receipt failed.\n                                this._acknowledgeMessage(e.data, {\n                                    reverted: true,\n                                    error: extractError(error),\n                                }).catch(this.logger.error);\n                            }\n                        })().catch(this.logger.error);\n                        return;\n                    case GatewayMessageType.GetEthereumTxBurn:\n                        (async () => {\n                            try {\n                                if (!this.web3) {\n                                    throw new Error(`No Web3 defined`);\n                                }\n                                const txHash = e.data\n                                    .payload.txHash;\n                                const burnReference = await extractBurnReference(this.web3, txHash);\n                                this._acknowledgeMessage(e.data, { burnReference }).catch(this.logger.error);\n                            }\n                            catch (error) {\n                                this.logger.error(error);\n                                this._acknowledgeMessage(e.data, {\n                                    error: extractError(error),\n                                }).catch(this.logger.error);\n                            }\n                        })().catch(this.logger.error);\n                        return;\n                    case GatewayMessageType.FindMintTransaction:\n                        (async () => {\n                            try {\n                                if (!this.web3) {\n                                    throw new Error(`No Web3 defined`);\n                                }\n                                const { sigHash, token } = e.data\n                                    .payload;\n                                const txHash = await findTransactionBySigHash(this.network, this.web3, token, sigHash, this.logger);\n                                this._acknowledgeMessage(e.data, { txHash }).catch(this.logger.error);\n                            }\n                            catch (error) {\n                                this.logger.error(error);\n                                this._acknowledgeMessage(e.data, {\n                                    error: extractError(error),\n                                }).catch(this.logger.error);\n                            }\n                        })().catch(this.logger.error);\n                        return;\n                    case GatewayMessageType.Error:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        onClose();\n                        this.promiEvent.reject(new Error(e.data.payload.message ||\n                            \"Error thrown from Gateway iframe.\"));\n                        return;\n                    case GatewayMessageType.Done:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        onClose();\n                        this.promiEvent.resolve(e.data.payload);\n                        return;\n                    case GatewayMessageType.RequestNotificationPermission:\n                        this._acknowledgeMessage(e.data, {}).catch(this.logger.error);\n                        if (!Push.Permission.has()) {\n                            this._getNotificationButton().classList.add(\"_ren_notifications-blue\");\n                        }\n                        return;\n                    case GatewayMessageType.ShowNotification:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                        const { title, body } = e.data\n                            .payload;\n                        try {\n                            if (Push.Permission.has()) {\n                                // tslint:disable-next-line: insecure-random\n                                const tag = String(Math.random());\n                                Push.create(title, {\n                                    body,\n                                    icon: \"https://gateway.renproject.io/favicon.ico\",\n                                    timeout: 4000,\n                                    tag,\n                                    onClick: () => {\n                                        window.focus();\n                                        Push.close(tag);\n                                        this.resume();\n                                    },\n                                }).catch(this.logger.error);\n                            }\n                        }\n                        catch (error) {\n                            this.logger.error(error);\n                        }\n                        return;\n                    default:\n                        this._acknowledgeMessage(e.data).catch(this.logger.error);\n                }\n            }\n        };\n        this._sendMessage = async (type, payload, iframeIn) => \n        // tslint:disable-next-line: no-any\n        new Promise(async (resolve) => {\n            // TODO: Allow response in acknowledgement.\n            let frame;\n            try {\n                frame = iframeIn || this._getIFrame();\n            }\n            catch (error) {\n                this.logger.error(error);\n                return;\n            }\n            while (!frame) {\n                await sleep(1 * SECONDS);\n            }\n            const messageID = randomBytes(8);\n            // tslint:disable-next-line: no-any\n            let listener;\n            let acknowledged = false;\n            const removeListener = () => {\n                acknowledged = true;\n                this._removeListener(listener);\n            };\n            // tslint:disable-next-line: no-any\n            listener = (e) => {\n                if (e.data &&\n                    e.data.from === \"ren\" &&\n                    e.data.type === GatewayMessageType.Acknowledgement &&\n                    e.data.messageID === messageID) {\n                    removeListener();\n                    resolve(e.data.payload);\n                }\n            };\n            this._addListener(listener);\n            // Repeat message until acknowledged\n            let count = 0;\n            // tslint:disable-next-line: no-any\n            const contentWindow = frame.contentWindow;\n            while (!acknowledged && contentWindow) {\n                if (count >= 1000) {\n                    throw new Error(`Lost communication with Gateway iFrame - unable post message.`);\n                }\n                count++;\n                const gatewayMessage = {\n                    from: \"ren\",\n                    frameID: this.id,\n                    type,\n                    payload,\n                    messageID,\n                };\n                contentWindow.postMessage(gatewayMessage, \"*\");\n                // Sleep for 1 second\n                await sleep(1 * SECONDS);\n            }\n        });\n        // tslint:disable-next-line: no-any\n        this._acknowledgeMessage = async (message, payload, iframeIn) => {\n            if (message.type === GatewayMessageType.Acknowledgement) {\n                return;\n            }\n            let frame;\n            try {\n                frame = iframeIn || this._getIFrame();\n            }\n            catch (error) {\n                this.logger.error(error);\n                return;\n            }\n            while (!frame) {\n                await sleep(1 * SECONDS);\n            }\n            const response = {\n                from: \"ren\",\n                type: GatewayMessageType.Acknowledgement,\n                frameID: message.frameID,\n                payload: payload || {},\n                messageID: message.messageID,\n            };\n            // tslint:disable-next-line: no-any\n            const contentWindow = frame.contentWindow;\n            contentWindow.postMessage(response, \"*\");\n        };\n        this._addListener = (\n        // tslint:disable-next-line: no-any\n        listener) => {\n            window.addEventListener(\"message\", listener);\n        };\n        this._removeListener = (\n        // tslint:disable-next-line: no-any\n        listener) => {\n            window.removeEventListener(\"message\", listener);\n        };\n        this._toggleSettings = () => {\n            this._sendMessage(GatewayMessageType.ToggleSettings, {}).catch(this.logger.error);\n        };\n        this._pause = () => {\n            // tslint:disable-next-line: no-object-mutation\n            this.isPaused = true;\n            try {\n                this._getPopup().classList.add(\"_ren_gateway-minified\");\n            }\n            catch (error) {\n                this.logger.error(error);\n            }\n        };\n        this._resume = () => {\n            // tslint:disable-next-line: no-object-mutation\n            this.isPaused = false;\n            try {\n                this._getPopup().classList.remove(\"_ren_gateway-minified\");\n            }\n            catch (error) {\n                this.logger.error(error);\n            }\n        };\n        this._getSettingsButton = () => getElement(`_ren_settings-${this.id}`);\n        this._getNotificationButton = () => getElement(`_ren_notifications-${this.id}`);\n        this._getOverlay = () => getElement(`_ren_overlay-${this.id}`);\n        this._getPopup = () => getElement(`_ren_gateway-${this.id}`);\n        this._getIFrame = () => getElement(`_ren_iframe-${this.id}`);\n        this._getOrCreateGatewayContainer = () => {\n            try {\n                return getElement(`_ren_gatewayContainer`);\n            }\n            catch (error) {\n                // Ignore error\n            }\n            const body = [\n                ...(Array.from(document.getElementsByTagName(\"body\")) || []),\n                ...(Array.from(document.getElementsByTagName(\"html\")) || []),\n            ];\n            const popup = createElementFromHTML(RenGatewayContainerHTML());\n            if (body[0] && popup) {\n                body[0].insertBefore(popup, body[0].lastChild);\n            }\n            return getElement(`_ren_gatewayContainer`);\n        };\n        this.logger =\n            (config && config.logger) ||\n                new SimpleLogger((config && config.logLevel) || LogLevel.Error);\n        this.network = network;\n        if (!config.endpoint) {\n            throw new Error(\"Must provide endpoint in Gateway config\");\n        }\n        this.endpoint = config.endpoint;\n        this.id = uniqueID || randomBytes(8);\n    }\n}\nexport default class GatewayJS {\n    // tslint:disable-next-line: readonly-keyword\n    constructor(network, config) {\n        /**\n         * Returns a map containing previously opened gateways.\n         */\n        this.getGateways = async (options) => {\n            const gateways = await new Gateway(this.network, this.config)._getGateways();\n            // Delete gateways that have been returned\n            if (!options || !options.all) {\n                for (const key of gateways.keys()) {\n                    const gateway = gateways.get(key);\n                    if (gateway && gateway.returned) {\n                        gateways.delete(key);\n                    }\n                }\n            }\n            return gateways;\n        };\n        /**\n         * Start a cross-chain transfer onto Ethereum.\n         *\n         * @param {(LockAndMintParams | LockAndMintParamsSimple | SendParams)} params An object specifying the details\n         *        required for the transfer.\n         * @returns {Gateway}\n         */\n        this.lockAndMint = (params, uniqueID) => {\n            if (params.sendTo &&\n                !params.contractFn) {\n                params = resolveSendCall(this.network, params);\n            }\n            else if (params.sendTo) {\n                const { sendTo, contractFn, contractParams, txConfig, ...restOfParams } = params;\n                params = {\n                    ...restOfParams,\n                    contractCalls: [\n                        { sendTo, contractFn, contractParams, txConfig },\n                    ],\n                };\n            }\n            return new Gateway(this.network, this.config, uniqueID)._open(params);\n        };\n        /**\n         * Start a cross-chain transfer away from Ethereum.\n         *\n         * @param {(BurnAndReleaseParams | BurnAndReleaseParamsSimple | SendParams)} params An object specifying the details\n         *        required for the transfer.\n         * @returns {Gateway}\n         */\n        this.burnAndRelease = (params, uniqueID) => {\n            if (params.sendTo &&\n                !params.contractFn) {\n                params = resolveSendCall(this.network, params);\n            }\n            else if (params.sendTo) {\n                const { sendTo, contractFn, contractParams, txConfig, ...restOfParams } = params;\n                params = {\n                    ...restOfParams,\n                    contractCalls: [\n                        { sendTo, contractFn, contractParams, txConfig },\n                    ],\n                };\n            }\n            return new Gateway(this.network, this.config, uniqueID)._open(params);\n        };\n        this.open = (params, uniqueID) => {\n            // tslint:disable-next-line: strict-type-predicates\n            if (params.eventType === EventType.LockAndMint) {\n                return this.recoverTransfer(undefined, params);\n            }\n            const sendToken = params.sendToken;\n            if (sendToken === \"BTC\" || sendToken === \"ZEC\" || sendToken === \"BCH\") {\n                throw new Error(`Ambiguous token ${sendToken} - call \"lockAndMint\" or \"burnAndRelease\" instead of \"open\"`);\n            }\n            if (parseRenContract(sendToken).to === Chain.Ethereum) {\n                return this.lockAndMint(params, uniqueID);\n            }\n            else {\n                return this.burnAndRelease(params, uniqueID);\n            }\n        };\n        this.send = (params, uniqueID) => {\n            return new Gateway(this.network, this.config, uniqueID)._open(params);\n        };\n        this.recoverTransfer = (web3Provider, params, uniqueID) => {\n            return new Gateway(this.network, this.config, uniqueID || params.id)._open(params, web3Provider);\n        };\n        this.getTokenAddress = (web3, token) => getTokenAddress(stringToNetwork(this.network), web3, token);\n        this.getGatewayAddress = (web3, token) => getGatewayAddress(stringToNetwork(this.network), web3, token);\n        const publicNetworks = [\n            RenNetwork.Mainnet,\n            RenNetwork.Chaosnet,\n            RenNetwork.Testnet,\n        ];\n        if (typeof network === \"string\") {\n            validateString(network, `Invalid network. Expected one of ${publicNetworks.join(\", \")}`, Object.values(RenNetwork));\n        }\n        this.network = stringToNetwork(network);\n        // NOTE: In a future release, all networks will use the production endpoint.\n        this.config = {\n            ...config,\n            endpoint: (config &&\n                (config.endpoint === \"staging\"\n                    ? GATEWAY_ENDPOINT_STAGING\n                    : config.endpoint)) ||\n                GATEWAY_ENDPOINT_PRODUCTION,\n        };\n    }\n}\nGatewayJS.Tokens = Tokens;\nGatewayJS.Networks = RenNetwork;\nGatewayJS.Chains = Chain;\nGatewayJS.LockAndMintStatus = LockAndMintStatus;\nGatewayJS.BurnAndReleaseStatus = BurnAndReleaseStatus;\nGatewayJS.utils = { ...utils, useBrowserWeb3 };\n////////////////////////////////////////////////////////////////////////////////\n// EXPORTS                                                                    //\n// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //\n////////////////////////////////////////////////////////////////////////////////\n// tslint:disable: no-any no-object-mutation strict-type-predicates no-typeof-undefined\n// tslint:disable-next-line: no-string-literal\nGatewayJS[\"default\"] = GatewayJS.GatewayJS = GatewayJS;\n// AMD\ntry {\n    // @ts-ignore\n    if (typeof define === \"function\" && define.amd) {\n        // @ts-ignore\n        define(() => GatewayJS);\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n// Node.js and other environments that support module.exports.\ntry {\n    // @ts-ignore\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = GatewayJS;\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n// Browser.\ntry {\n    // @ts-ignore\n    if (typeof window !== \"undefined\" && window) {\n        window.GatewayJS = GatewayJS;\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}