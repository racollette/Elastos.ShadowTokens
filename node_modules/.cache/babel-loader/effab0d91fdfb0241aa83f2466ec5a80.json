{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeToConfirmations = void 0;\n\nconst retry_1 = require(\"./retry\");\n\nexports.subscribeToConfirmations = (promiEvent, cancelled, getConfirmations) => {\n  let mutex;\n\n  const watchForConfirmations = async () => {\n    const lock = Symbol();\n    mutex = lock; // Yield to task manager to let the event subscription finish\n\n    await retry_1.sleep(0);\n    let confirmations = 0;\n\n    while (!cancelled() && watchingConfirmations && mutex === lock) {\n      try {\n        const newConfirmations = await getConfirmations();\n\n        if (newConfirmations > confirmations) {\n          confirmations = newConfirmations;\n          promiEvent.emit(\"confirmation\", confirmations);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n\n      await retry_1.sleep(5000);\n    }\n  };\n\n  let watchingConfirmations = 0;\n  promiEvent.on(\"newListener\", eventName => {\n    if (eventName === \"confirmation\") {\n      watchingConfirmations++;\n\n      if (watchingConfirmations === 1) {\n        watchForConfirmations();\n      }\n    }\n  });\n  promiEvent.on(\"removeListener\", eventName => {\n    if (eventName === \"confirmation\") {\n      watchingConfirmations--;\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/lib/confirmations.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,wBAAA,GAA2B,CAAI,UAAJ,EAA+B,SAA/B,EAAyD,gBAAzD,KAAoG;AACxI,MAAI,KAAJ;;AACA,QAAM,qBAAqB,GAAG,YAAW;AACrC,UAAM,IAAI,GAAG,MAAM,EAAnB;AACA,IAAA,KAAK,GAAG,IAAR,CAFqC,CAIrC;;AACA,UAAM,OAAA,CAAA,KAAA,CAAM,CAAN,CAAN;AAEA,QAAI,aAAa,GAAG,CAApB;;AACA,WAAO,CAAC,SAAS,EAAV,IAAgB,qBAAhB,IAAyC,KAAK,KAAK,IAA1D,EAAgE;AAC5D,UAAI;AACA,cAAM,gBAAgB,GAAG,MAAM,gBAAgB,EAA/C;;AACA,YAAI,gBAAgB,GAAG,aAAvB,EAAsC;AAClC,UAAA,aAAa,GAAG,gBAAhB;AACA,UAAA,UAAU,CAAC,IAAX,CAAgB,cAAhB,EAAgC,aAAhC;AACH;AACJ,OAND,CAME,OAAO,KAAP,EAAc;AACZ,QAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACH;;AACD,YAAM,OAAA,CAAA,KAAA,CAAM,IAAN,CAAN;AACH;AACJ,GApBD;;AAsBA,MAAI,qBAAqB,GAAG,CAA5B;AACA,EAAA,UAAU,CAAC,EAAX,CAAc,aAAd,EAA6B,SAAS,IAAG;AACrC,QAAI,SAAS,KAAK,cAAlB,EAAkC;AAC9B,MAAA,qBAAqB;;AACrB,UAAI,qBAAqB,KAAK,CAA9B,EAAiC;AAC7B,QAAA,qBAAqB;AACxB;AACJ;AACJ,GAPD;AASA,EAAA,UAAU,CAAC,EAAX,CAAc,gBAAd,EAAgC,SAAS,IAAG;AACxC,QAAI,SAAS,KAAK,cAAlB,EAAkC;AAC9B,MAAA,qBAAqB;AACxB;AACJ,GAJD;AAKH,CAvCY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.subscribeToConfirmations = void 0;\nconst retry_1 = require(\"./retry\");\nexports.subscribeToConfirmations = (promiEvent, cancelled, getConfirmations) => {\n    let mutex;\n    const watchForConfirmations = async () => {\n        const lock = Symbol();\n        mutex = lock;\n        // Yield to task manager to let the event subscription finish\n        await retry_1.sleep(0);\n        let confirmations = 0;\n        while (!cancelled() && watchingConfirmations && mutex === lock) {\n            try {\n                const newConfirmations = await getConfirmations();\n                if (newConfirmations > confirmations) {\n                    confirmations = newConfirmations;\n                    promiEvent.emit(\"confirmation\", confirmations);\n                }\n            }\n            catch (error) {\n                console.error(error);\n            }\n            await retry_1.sleep(5000);\n        }\n    };\n    let watchingConfirmations = 0;\n    promiEvent.on(\"newListener\", eventName => {\n        if (eventName === \"confirmation\") {\n            watchingConfirmations++;\n            if (watchingConfirmations === 1) {\n                watchForConfirmations();\n            }\n        }\n    });\n    promiEvent.on(\"removeListener\", eventName => {\n        if (eventName === \"confirmation\") {\n            watchingConfirmations--;\n        }\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29uZmlybWF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBZ0M7QUFFbkIsUUFBQSx3QkFBd0IsR0FBRyxDQUFJLFVBQXlCLEVBQUUsU0FBd0IsRUFBRSxnQkFBdUMsRUFBRSxFQUFFO0lBQ3hJLElBQUksS0FBSyxDQUFDO0lBQ1YsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLElBQUksRUFBRTtRQUNyQyxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUN0QixLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWIsNkRBQTZEO1FBQzdELE1BQU0sYUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWYsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxxQkFBcUIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQzVELElBQUk7Z0JBQ0EsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLGdCQUFnQixFQUFFLENBQUM7Z0JBQ2xELElBQUksZ0JBQWdCLEdBQUcsYUFBYSxFQUFFO29CQUNsQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7b0JBQ2pDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2lCQUNsRDthQUNKO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4QjtZQUNELE1BQU0sYUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsSUFBSSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7SUFDOUIsVUFBVSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUU7UUFDckMsSUFBSSxTQUFTLEtBQUssY0FBYyxFQUFFO1lBQzlCLHFCQUFxQixFQUFFLENBQUM7WUFDeEIsSUFBSSxxQkFBcUIsS0FBSyxDQUFDLEVBQUU7Z0JBQzdCLHFCQUFxQixFQUFFLENBQUM7YUFDM0I7U0FDSjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsRUFBRTtRQUN4QyxJQUFJLFNBQVMsS0FBSyxjQUFjLEVBQUU7WUFDOUIscUJBQXFCLEVBQUUsQ0FBQztTQUMzQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBIn0="]},"metadata":{},"sourceType":"script"}