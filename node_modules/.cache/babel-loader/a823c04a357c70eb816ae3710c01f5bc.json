{"ast":null,"code":"var _jsxFileName = \"/home/ryan/dev/defi/shadowtoken2/src/containers/TransferContainer2.tsx\";\nimport React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { SwapCalls } from \"@material-ui/icons\";\nimport classNames from \"classnames\";\nimport { gatherFeeData, MIN_TX_AMOUNTS } from \"../utils/txUtils\";\nimport { MINI_ICON_MAP, SYMBOL_MAP, CONVERT_MAP, NETWORK_MAP } from \"../utils/walletUtils\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport BridgeSelect from \"../components/BridgeSelect\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport CurrencyInput from \"../components/CurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\n\nconst styles = theme => ({\n  container: {\n    background: \"#fff\",\n    border: \"1px solid \" + theme.palette.divider,\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    maxWidth: 600,\n    width: \"100%\",\n    margin: \"0px auto \" + theme.spacing(1) + \"px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  },\n  transferActionTabs: {\n    margin: \"0px auto\",\n    // marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  depositAddressContainer: {},\n  depositAddress: {\n    width: \"100%\"\n  },\n  actionButtonContainer: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    textAlign: \"center\",\n    \"& button\": {\n      \"&.Mui-disabled\": {},\n      margin: \"0px auto\",\n      fontSize: 12,\n      minWidth: 175,\n      padding: theme.spacing(1)\n    }\n  },\n  amountField: {\n    width: \"100%\"\n  },\n  depositButton: {},\n  withdrawButton: {},\n  actions: {\n    paddingTop: theme.spacing(1),\n    padding: theme.spacing(3)\n  },\n  transactionsContainer: {\n    padding: theme.spacing(3),\n    paddingTop: theme.spacing(0),\n    marginTop: theme.spacing(2),\n    borderTop: \"1px solid #EBEBEB\"\n  },\n  actionsContainer: {\n    borderRadius: theme.shape.borderRadius,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0\n  },\n  destChooser: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  fees: {\n    width: \"100%\",\n    border: \"1px solid \" + theme.palette.divider,\n    fontSize: 12,\n    padding: theme.spacing(1),\n    paddingBottom: 0,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& span\": {\n      marginBottom: theme.spacing(1)\n    }\n  },\n  icon: {\n    width: 16,\n    height: 16,\n    marginRight: theme.spacing(0.75)\n  },\n  toggle: {\n    \"& button\": {\n      minHeight: \"auto\",\n      border: \"1px solid transparent\",\n      borderBottom: \"1px solid \" + theme.palette.divider,\n      height: 56,\n      backgroundColor: \"#fff\",\n      \"&:first-child\": {\n        borderRight: \"1px solid \" + theme.palette.divider\n      },\n      \"&.MuiToggleButton-root\": {},\n      \"&.Mui-selected\": {\n        borderBottom: \"1px solid transparent\",\n        color: theme.palette.primary.main,\n        backgroundColor: \"#transparent !important\"\n      },\n      \"& .MuiToggleButton-label\": {\n        fontSize: 16\n      },\n      \"& span\": {\n        textTransform: \"capitalize !important\"\n      }\n    }\n  },\n  title: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(3)\n  },\n  optionsContainer: {\n    border: \"1px solid #EDEFF3\",\n    borderBottom: \"none\",\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  option: {\n    borderBottom: \"1px solid #EDEFF3\",\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    minHeight: 60,\n    fontSize: 14,\n    \"& img\": {\n      height: \"auto\",\n      width: 24,\n      marginRight: theme.spacing(1)\n    },\n    \"& .MuiGrid-root\": {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  },\n  standaloneOption: {\n    border: \"1px solid #DBE0E8\",\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  addressInput: {\n    width: \"100%\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2)\n  },\n  currencySelect: {\n    marginLeft: theme.spacing(-1),\n    width: \"calc(100% + 8px)\",\n    \"& MuiButton-root\": {\n      textTransform: \"none !important\"\n    }\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1)\n  },\n  amountContainer: {\n    paddingTop: theme.spacing(5),\n    paddingBottom: theme.spacing(5)\n  },\n  totalCell: {\n    wordBreak: \"break-word\"\n  },\n  amountError: {\n    textAlign: \"center\",\n    color: \"#FF4545\",\n    fontSize: 12,\n    margin: \"0px auto\"\n  },\n  switchDirection: {\n    marginBottom: theme.spacing(2),\n    marginTop: theme.spacing(2)\n  },\n  disclosure: {\n    width: \"100%\",\n    maxWidth: 370,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"center\",\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    padding: theme.spacing(2),\n    color: theme.palette.primary.main,\n    border: \"1px solid \" + theme.palette.primary.main,\n    fontSize: 12,\n    lineHeight: \"17px\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(3),\n    \"& a\": {\n      color: \"inherit\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  }\n});\n\nclass TransferContainer2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.burnInputRef = React.createRef();\n    this.state = props.store.getState();\n  }\n\n  showDepositModal(tx) {\n    const {\n      store\n    } = this.props;\n    store.set(\"showDepositModal\", true);\n    store.set(\"depositModalTx\", tx);\n  }\n\n  async gatherFeeData() {}\n\n  getBalance(asset) {\n    console.log(\"getBalance\");\n    const {\n      store\n    } = this.props;\n    console.log(store.get(\"ethBalance\"));\n    return store.get(`${asset}Balance`);\n  }\n\n  validateDeposit() {\n    const {\n      store\n    } = this.props;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const amount = store.get(\"convert.amount\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset];\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n      return false;\n    } else {\n      store.set(\"convert.showAmountError\", false);\n      return true;\n    }\n  }\n\n  validateWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const showAddressError = !convertAddressValid;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const selectedFormat = store.get(\"convert.selectedFormat\");\n    const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance);\n\n    if (showAddressError) {\n      store.set(\"convert.showDestinationError\", true);\n    } else {\n      store.set(\"convert.showDestinationError\", false);\n    }\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n    } else {\n      store.set(\"convert.showAmountError\", false);\n    }\n\n    if (showAddressError || !amount || !amountValid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async newDeposit() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const localWeb3Address = store.get(\"localWeb3Address\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      // awaiting: `${asset}-init`,\n      sourceAsset: asset,\n      sourceNetwork: NETWORK_MAP[asset],\n      sourceNetworkVersion: network,\n      destAddress: localWeb3Address,\n      destNetwork: NETWORK_MAP[format],\n      destNetworkVersion: network,\n      destAsset: format,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateDeposit()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"deposit\");\n  }\n\n  async newWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const destination = store.get(\"convert.destination\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      sourceAsset: format,\n      sourceNetwork: NETWORK_MAP[format],\n      sourceNetworkVersion: network,\n      destAddress: destination,\n      destNetwork: NETWORK_MAP[asset],\n      destNetworkVersion: network,\n      destAsset: asset,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateWithdraw()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"withdraw\");\n  }\n\n  async switchOriginChain() {\n    const {\n      classes,\n      store\n    } = this.props; // console.log(\"Swapping direction\");\n\n    const selectedDirection = store.get(\"convert.selectedDirection\"); // console.log(selectedDirection)\n\n    const selectedAsset = store.get(\"selectedAsset\");\n    const asset = CONVERT_MAP[selectedAsset];\n\n    if (selectedDirection === 0) {\n      store.set(\"convert.selectedDirection\", Number(1));\n      store.set(\"convert.selectedFormat\", `${asset.replace(\"w\", \"\")}`);\n      store.set(\"selectedAsset\", asset);\n    }\n\n    if (selectedDirection === 1) {\n      store.set(\"convert.selectedDirection\", Number(0));\n      store.set(\"convert.selectedFormat\", `w${asset}`);\n      store.set(\"selectedAsset\", asset);\n    }\n\n    const selectedFormat = store.get(\"convert.selectedFormat\"); // store.set(\"convert.amount\", \"\");\n    // store.set(\"convert.networkFee\", \"\");\n    // store.set(\"convert.conversionTotal\", \"\");\n    // store.set(\"convert.destination\", \"\");\n    // store.set(\"convert.showAmountError\", false);\n    // store.set(\"convert.showDestinationError\", false);\n  }\n\n  render() {\n    const {\n      classes,\n      store\n    } = this.props;\n    const selectedNetwork = store.get(\"selectedNetwork\");\n    const selectedTab = store.get(\"selectedTab\");\n    const selectedAsset = store.get(\"selectedAsset\"); // console.log('Selected asset', selectedAsset)\n    // 0 = mint, 1 = release\n    // const selectedDirection = store.get(\"convert.selectedDirection\");\n\n    const selectedDirection = store.get(\"convert.selectedDirection\"); // console.log(\"DIRECTION\", selectedDirection);\n\n    const selectedFormat = store.get(\"convert.selectedFormat\"); // console.log('Selected Format', selectedFormat)\n    // console.log(selectedFormat);\n\n    const localWeb3Address = store.get(\"localWeb3Address\"); // console.log(localWeb3Address);\n\n    const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n    const amount = store.get(\"convert.amount\"); // console.log(amount);\n\n    const total = store.get(\"convert.conversionTotal\");\n    const allowance = store.get(\"convert.adapterWbtcAllowance\");\n    const hasAllowance = Number(amount) <= Number(allowance);\n    const allowanceRequesting = store.get(\"convert.adapterWbtcAllowanceRequesting\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n    const canConvertFrom = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance) && convertAddressValid;\n    const showAmountError = store.get(\"convert.showAmountError\");\n    const showDestinationError = store.get(\"convert.showDestinationError\"); // const destAsset = selectedDirection ? selectedAsset : selectedFormat;\n\n    const destAsset = selectedFormat; // console.log('Destination asset', destAsset);\n\n    const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(2);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BridgeSelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ELA\", \"ETH\", \"TRX\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.actionsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 29\n      }\n    }, selectedDirection === 0 &&\n    /*#__PURE__*/\n    /// ETH to ELA\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ETH\", \"wELA\", \"USDT\"],\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n\n        if (asset == \"wela\") {\n          store.set(\"convert.selectedFormat\", `${asset.replace(\"w\", \"\")}`);\n          store.set(\"selectedAsset\", asset);\n        } else {\n          store.set(\"convert.selectedFormat\", `w${asset}`);\n          store.set(\"selectedAsset\", asset);\n        }\n\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencyInput, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      bridgeDirection: \"Send Amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 49\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      className: classes.balanceContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ActionLink, {\n      onClick: () => {\n        store.set(\"convert.amount\", balance);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 49\n      }\n    }, \"Balance: \", balance, \" \", SYMBOL_MAP[selectedAsset]))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.switchDirection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 49\n      }\n    }, NETWORK_MAP[selectedAsset], \" Chain\")), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(SwapCalls, {\n      fontSize: \"large\",\n      onClick: this.switchOriginChain.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 49\n      }\n    }, NETWORK_MAP[destAsset], \" Chain\"))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 49\n      }\n    }), SYMBOL_MAP[destAsset]), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencyInput, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      bridgeDirection: \"Receive Amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 49\n      }\n    })))), selectedDirection === 1 &&\n    /*#__PURE__*/\n    /// ELA to ETH\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"wETH\", \"ELA\", \"wUSDT\"] // renBTCBalance={store.get(\"renBTCBalance\")}\n      // renZECBalance={store.get(\"renZECBalance\")}\n      // renBCHBalance={store.get(\"renBCHBalance\")}\n      // ETHBalance={store.get(\"ethbal\")}\n      ,\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n\n        if (asset == \"ela\") {\n          store.set(\"convert.selectedFormat\", asset);\n          store.set(\"selectedAsset\", `w${asset}`);\n        } else {\n          store.set(\"convert.selectedFormat\", asset);\n          store.set(\"selectedAsset\", asset.replace(\"w\", \"\"));\n        }\n\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencyInput, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      bridgeDirection: \"Send Amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 49\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.switchDirection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 49\n      }\n    }, NETWORK_MAP[selectedAsset], \" Chain\")), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(SwapCalls, {\n      fontSize: \"large\",\n      onClick: this.switchOriginChain.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 49\n      }\n    }, NETWORK_MAP[destAsset], \" Chain\"))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 49\n      }\n    }), SYMBOL_MAP[destAsset]), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CurrencyInput, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      bridgeDirection: \"Receive Amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 49\n      }\n    })))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      className: classes.actionButtonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 33\n      }\n    }, selectedDirection === 0 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      size: \"large\",\n      fullWidth: true,\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newDeposit.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 45\n      }\n    }, \"Next\")), selectedDirection === 1 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      fullWidth: true,\n      size: \"large\",\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newWithdraw.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 45\n      }\n    }, \"Next\")))))));\n  }\n\n}\n\nexport default withStyles(styles)(withStore(TransferContainer2));","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/src/containers/TransferContainer2.tsx"],"names":["React","withStore","withStyles","SwapCalls","classNames","gatherFeeData","MIN_TX_AMOUNTS","MINI_ICON_MAP","SYMBOL_MAP","CONVERT_MAP","NETWORK_MAP","Grid","Button","Typography","BridgeSelect","CurrencySelect","CurrencyInput","ActionLink","styles","theme","container","background","border","palette","divider","borderRadius","boxShadow","maxWidth","width","margin","spacing","breakpoints","down","transferActionTabs","marginBottom","depositAddressContainer","depositAddress","actionButtonContainer","paddingTop","paddingBottom","textAlign","fontSize","minWidth","padding","amountField","depositButton","withdrawButton","actions","transactionsContainer","marginTop","borderTop","actionsContainer","shape","borderTopLeftRadius","borderTopRightRadius","destChooser","fees","display","flexDirection","icon","height","marginRight","toggle","minHeight","borderBottom","backgroundColor","borderRight","color","primary","main","textTransform","title","optionsContainer","option","paddingLeft","paddingRight","alignItems","standaloneOption","addressInput","currencySelect","marginLeft","balanceContainer","amountContainer","totalCell","wordBreak","amountError","switchDirection","disclosure","lineHeight","TransferContainer2","Component","constructor","props","burnInputRef","createRef","state","store","getState","showDepositModal","tx","set","getBalance","asset","console","log","get","validateDeposit","selectedAsset","amount","amountValid","Number","validateWithdraw","convertAddressValid","showAddressError","selectedFormat","balance","newDeposit","localWeb3Address","network","format","id","Math","floor","random","type","instant","sourceAsset","sourceNetwork","sourceNetworkVersion","destAddress","destNetwork","destNetworkVersion","destAsset","error","txHash","newWithdraw","destination","switchOriginChain","classes","selectedDirection","replace","render","selectedNetwork","selectedTab","total","allowance","hasAllowance","allowanceRequesting","canConvertTo","canConvertFrom","showAmountError","showDestinationError","usdValue","toFixed","v","toLowerCase","bind","parseFloat","actionButton"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { Styles, withStyles } from \"@material-ui/styles\";\nimport { SwapCalls } from \"@material-ui/icons\";\nimport classNames from \"classnames\";\nimport AddressValidator from \"wallet-address-validator\";\nimport {\n    addTx,\n    updateTx,\n    removeTx,\n    gatherFeeData,\n    MIN_TX_AMOUNTS,\n} from \"../utils/txUtils\";\nimport {\n    BRIDGE_SYMBOL_MAP,\n    BRIDGE_NAME_MAP,\n    BRIDGE_ICON_MAP,\n    MINI_ICON_MAP,\n    SYMBOL_MAP,\n    CONVERT_MAP,\n    NETWORK_MAP,\n    NAME_MAP,\n    abbreviateAddress,\n    updateBalance,\n} from \"../utils/walletUtils\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport BridgeSelect from \"../components/BridgeSelect\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport BigCurrencyInput from \"../components/BigCurrencyInput\";\nimport CurrencyInput from \"../components/CurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\nimport DarkTooltip from \"../components/DarkTooltip\";\n\nimport theme from \"../theme/theme\";\n\nimport WalletIcon from \"../assets/wallet-icon.svg\";\n\nconst styles: Styles<typeof theme, any> = (theme) => ({\n    container: {\n        background: \"#fff\",\n        border: \"1px solid \" + theme.palette.divider,\n        borderRadius: 4,\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n        maxWidth: 600,\n        width: \"100%\",\n        margin: \"0px auto \" + theme.spacing(1) + \"px\",\n\n        [theme.breakpoints.down(\"sm\")]: {\n            maxWidth: \"100%\",\n        },\n    },\n    transferActionTabs: {\n        margin: \"0px auto\",\n        // marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n        \"& div.MuiToggleButtonGroup-root\": {\n            width: \"100%\",\n        },\n        \"& button\": {\n            width: \"50%\",\n        },\n    },\n    depositAddressContainer: {},\n    depositAddress: {\n        width: \"100%\",\n    },\n    actionButtonContainer: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        textAlign: \"center\",\n        \"& button\": {\n            \"&.Mui-disabled\": {},\n            margin: \"0px auto\",\n            fontSize: 12,\n            minWidth: 175,\n            padding: theme.spacing(1),\n        },\n    },\n    amountField: {\n        width: \"100%\",\n    },\n    depositButton: {},\n    withdrawButton: {},\n    actions: {\n        paddingTop: theme.spacing(1),\n        padding: theme.spacing(3),\n    },\n    transactionsContainer: {\n        padding: theme.spacing(3),\n        paddingTop: theme.spacing(0),\n        marginTop: theme.spacing(2),\n        borderTop: \"1px solid #EBEBEB\",\n    },\n    actionsContainer: {\n        borderRadius: theme.shape.borderRadius,\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n    },\n    destChooser: {\n        width: \"100%\",\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n        \"& div.MuiToggleButtonGroup-root\": {\n            width: \"100%\",\n        },\n        \"& button\": {\n            width: \"50%\",\n        },\n    },\n    fees: {\n        width: \"100%\",\n        border: \"1px solid \" + theme.palette.divider,\n        fontSize: 12,\n        padding: theme.spacing(1),\n        paddingBottom: 0,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(3),\n        display: \"flex\",\n        flexDirection: \"column\",\n        \"& span\": {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    icon: {\n        width: 16,\n        height: 16,\n        marginRight: theme.spacing(0.75),\n    },\n    toggle: {\n        \"& button\": {\n            minHeight: \"auto\",\n            border: \"1px solid transparent\",\n            borderBottom: \"1px solid \" + theme.palette.divider,\n            height: 56,\n            backgroundColor: \"#fff\",\n            \"&:first-child\": {\n                borderRight: \"1px solid \" + theme.palette.divider,\n            },\n            \"&.MuiToggleButton-root\": {},\n            \"&.Mui-selected\": {\n                borderBottom: \"1px solid transparent\",\n                color: theme.palette.primary.main,\n                backgroundColor: \"#transparent !important\",\n            },\n            \"& .MuiToggleButton-label\": {\n                fontSize: 16,\n            },\n            \"& span\": {\n                textTransform: \"capitalize !important\",\n            },\n        },\n    },\n    title: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(3),\n    },\n    optionsContainer: {\n        border: \"1px solid #EDEFF3\",\n        borderBottom: \"none\",\n        borderRadius: 4,\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    },\n    option: {\n        borderBottom: \"1px solid #EDEFF3\",\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        minHeight: 60,\n        fontSize: 14,\n        \"& img\": {\n            height: \"auto\",\n            width: 24,\n            marginRight: theme.spacing(1),\n        },\n        \"& .MuiGrid-root\": {\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n    },\n    standaloneOption: {\n        border: \"1px solid #DBE0E8\",\n        borderRadius: 4,\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    },\n    addressInput: {\n        width: \"100%\",\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    currencySelect: {\n        marginLeft: theme.spacing(-1),\n        width: \"calc(100% + 8px)\",\n        \"& MuiButton-root\": {\n            textTransform: \"none !important\",\n        },\n    },\n    balanceContainer: {\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        marginBottom: theme.spacing(1),\n    },\n    amountContainer: {\n        paddingTop: theme.spacing(5),\n        paddingBottom: theme.spacing(5),\n    },\n    totalCell: {\n        wordBreak: \"break-word\",\n    },\n    amountError: {\n        textAlign: \"center\",\n        color: \"#FF4545\",\n        fontSize: 12,\n        margin: \"0px auto\",\n    },\n    switchDirection: {\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    disclosure: {\n        width: \"100%\",\n        maxWidth: 370,\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        textAlign: \"center\",\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n        padding: theme.spacing(2),\n        color: theme.palette.primary.main,\n        border: \"1px solid \" + theme.palette.primary.main,\n        fontSize: 12,\n        lineHeight: \"17px\",\n        borderRadius: 4,\n        marginBottom: theme.spacing(3),\n        \"& a\": {\n            color: \"inherit\",\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            maxWidth: \"100%\",\n        },\n    },\n});\n\nclass TransferContainer2 extends React.Component<any> {\n    burnInputRef = React.createRef();\n    constructor(props: any) {\n        super(props);\n        this.state = props.store.getState();\n    }\n\n    showDepositModal(tx: any) {\n        const { store } = this.props;\n        store.set(\"showDepositModal\", true);\n        store.set(\"depositModalTx\", tx);\n    }\n\n    async gatherFeeData() { }\n\n    getBalance(asset: string) {\n        console.log(\"getBalance\");\n        const { store } = this.props;\n        console.log(store.get(\"ethBalance\"));\n        return store.get(`${asset}Balance`);\n    }\n\n    validateDeposit() {\n        const { store } = this.props;\n        const selectedAsset = store.get(\"selectedAsset\");\n        const amount = store.get(\"convert.amount\");\n        const amountValid =\n            Number(amount) >=\n            MIN_TX_AMOUNTS[selectedAsset as keyof typeof MIN_TX_AMOUNTS];\n\n        if (!amount || !amountValid) {\n            store.set(\"convert.showAmountError\", true);\n            return false;\n        } else {\n            store.set(\"convert.showAmountError\", false);\n            return true;\n        }\n    }\n\n    validateWithdraw() {\n        const { store } = this.props;\n        const amount = store.get(\"convert.amount\");\n        const convertAddressValid = store.get(\"convert.destinationValid\");\n        const showAddressError = !convertAddressValid;\n        const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n            \"selectedAsset\"\n        );\n        const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n\n        const amountValid =\n            Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n            amount <= Number(balance);\n\n        if (showAddressError) {\n            store.set(\"convert.showDestinationError\", true);\n        } else {\n            store.set(\"convert.showDestinationError\", false);\n        }\n\n        if (!amount || !amountValid) {\n            store.set(\"convert.showAmountError\", true);\n        } else {\n            store.set(\"convert.showAmountError\", false);\n        }\n\n        if (showAddressError || !amount || !amountValid) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    async newDeposit() {\n        const { store } = this.props;\n\n        const amount = store.get(\"convert.amount\");\n        const localWeb3Address = store.get(\"localWeb3Address\");\n        const network = store.get(\"selectedNetwork\");\n        const format: keyof typeof NETWORK_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n        const tx = {\n            id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n            type: \"convert\",\n            instant: false,\n            // awaiting: `${asset}-init`,\n            sourceAsset: asset,\n            sourceNetwork: NETWORK_MAP[asset],\n            sourceNetworkVersion: network,\n            destAddress: localWeb3Address,\n            destNetwork: NETWORK_MAP[format],\n            destNetworkVersion: network,\n            destAsset: format,\n            amount: Number(amount),\n            error: false,\n            txHash: \"\",\n        };\n\n        if (!this.validateDeposit()) {\n            return;\n        }\n\n        store.set(\"confirmTx\", tx);\n        store.set(\"confirmAction\", \"deposit\");\n    }\n\n    async newWithdraw() {\n        const { store } = this.props;\n\n        const amount = store.get(\"convert.amount\");\n        const destination = store.get(\"convert.destination\");\n        const network = store.get(\"selectedNetwork\");\n        const format: keyof typeof NETWORK_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n        const tx = {\n            id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n            type: \"convert\",\n            instant: false,\n            sourceAsset: format,\n            sourceNetwork: NETWORK_MAP[format],\n            sourceNetworkVersion: network,\n            destAddress: destination,\n            destNetwork: NETWORK_MAP[asset],\n            destNetworkVersion: network,\n            destAsset: asset,\n            amount: Number(amount),\n            error: false,\n            txHash: \"\",\n        };\n\n        if (!this.validateWithdraw()) {\n            return;\n        }\n\n        store.set(\"confirmTx\", tx);\n        store.set(\"confirmAction\", \"withdraw\");\n    }\n\n    async switchOriginChain() {\n        const { classes, store } = this.props;\n        // console.log(\"Swapping direction\");\n        const selectedDirection = store.get(\"convert.selectedDirection\");\n        // console.log(selectedDirection)\n        const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n            \"selectedAsset\"\n        );\n        const asset = CONVERT_MAP[selectedAsset]\n\n        if (selectedDirection === 0) {\n            store.set(\"convert.selectedDirection\", Number(1));\n            store.set(\"convert.selectedFormat\", `${asset.replace(\"w\", \"\")}`);\n            store.set(\"selectedAsset\", asset);\n        }\n        if (selectedDirection === 1) {\n            store.set(\"convert.selectedDirection\", Number(0));\n            store.set(\"convert.selectedFormat\", `w${asset}`);\n            store.set(\"selectedAsset\", asset);\n        }\n        const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n\n        // store.set(\"convert.amount\", \"\");\n        // store.set(\"convert.networkFee\", \"\");\n        // store.set(\"convert.conversionTotal\", \"\");\n        // store.set(\"convert.destination\", \"\");\n        // store.set(\"convert.showAmountError\", false);\n        // store.set(\"convert.showDestinationError\", false);\n    }\n\n    render() {\n        const { classes, store } = this.props;\n\n        const selectedNetwork = store.get(\"selectedNetwork\");\n        const selectedTab = store.get(\"selectedTab\");\n        const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n            \"selectedAsset\"\n        );\n        // console.log('Selected asset', selectedAsset)\n\n        // 0 = mint, 1 = release\n        // const selectedDirection = store.get(\"convert.selectedDirection\");\n        const selectedDirection = store.get(\"convert.selectedDirection\");\n        // console.log(\"DIRECTION\", selectedDirection);\n        const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        // console.log('Selected Format', selectedFormat)\n\n        // console.log(selectedFormat);\n        const localWeb3Address = store.get(\"localWeb3Address\");\n        // console.log(localWeb3Address);\n        const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n        const amount = store.get(\"convert.amount\");\n        // console.log(amount);\n        const total = store.get(\"convert.conversionTotal\");\n\n        const allowance = store.get(\"convert.adapterWbtcAllowance\");\n        const hasAllowance = Number(amount) <= Number(allowance);\n        const allowanceRequesting = store.get(\n            \"convert.adapterWbtcAllowanceRequesting\"\n        );\n\n        const convertAddressValid = store.get(\"convert.destinationValid\");\n        const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n        const canConvertFrom =\n            Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n            amount <= Number(balance) &&\n            convertAddressValid;\n        const showAmountError = store.get(\"convert.showAmountError\");\n        const showDestinationError = store.get(\"convert.showDestinationError\");\n        // const destAsset = selectedDirection ? selectedAsset : selectedFormat;\n        const destAsset = selectedFormat;\n        // console.log('Destination asset', destAsset);\n\n        const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(\n            2\n        );\n\n        return (\n            <React.Fragment>\n                <BridgeSelect\n                    active={SYMBOL_MAP[selectedAsset]}\n                    className={classes.currencySelect}\n                    items={[\"ELA\", \"ETH\", \"TRX\"]}\n                />\n                <div className={classes.container}>\n                    {/* {\n                        <Grid container className={classes.transferActionTabs}>\n                            <ToggleButtonGroup\n                                size=\"small\"\n                                className={classes.toggle}\n                                value={String(selectedDirection)}\n                                exclusive\n                                onChange={(event, newValue) => {\n                                    if (newValue) {\n                                        store.set(\"convert.selectedDirection\", Number(newValue));\n                                        store.set(\"convert.amount\", \"\");\n                                        store.set(\"convert.networkFee\", \"\");\n                                        store.set(\"convert.conversionTotal\", \"\");\n                                        store.set(\"convert.destination\", \"\");\n                                        store.set(\"convert.showAmountError\", false);\n                                        store.set(\"convert.showDestinationError\", false);\n                                    }\n                                }}\n                            >\n                                <ToggleButton disableRipple={true} key={0} value={\"0\"}>\n                                    Ethereum Bridge\n                </ToggleButton>\n                                <ToggleButton disableRipple={true} key={1} value={\"1\"}>\n                                    Tron Bridge\n                </ToggleButton>\n                            </ToggleButtonGroup>\n                        </Grid>\n                    } */}\n                    {\n                        <div className={classes.actionsContainer}>\n                            <Grid className={classes.actions}>\n                                {selectedDirection === 0 && (\n                                    /// ETH to ELA\n                                    <React.Fragment>\n                                        <Grid\n                                            container\n                                            className={classNames(\n                                                classes.standaloneOption,\n                                                classes.option\n                                            )}\n                                        >\n                                            <Grid item xs={4}>\n                                                <CurrencySelect\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    items={[\"ETH\", \"wELA\", \"USDT\"]}\n                                                    onCurrencyChange={(v: string) => {\n                                                        const asset = v.toLowerCase();\n                                                        if (asset == \"wela\") {\n                                                            store.set(\"convert.selectedFormat\", `${asset.replace(\"w\", \"\")}`);\n                                                            store.set(\"selectedAsset\", asset);\n                                                        } else {\n                                                            store.set(\"convert.selectedFormat\", `w${asset}`);\n                                                            store.set(\"selectedAsset\", asset);\n                                                        }\n                                                        gatherFeeData();\n                                                    }}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={8}>\n                                                <CurrencyInput\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    bridgeDirection={\"Send Amount\"}\n                                                />\n                                            </Grid>\n                                        </Grid>\n\n                                        <Grid\n                                            container\n                                            justify=\"flex-end\"\n                                            className={classes.balanceContainer}\n                                        >\n                                            <Typography>\n                                                <ActionLink\n                                                    onClick={() => {\n                                                        store.set(\"convert.amount\", balance);\n                                                    }}\n                                                >\n                                                    Balance: {balance} {SYMBOL_MAP[selectedAsset]}\n                                                </ActionLink>\n                                            </Typography>\n                                        </Grid>\n\n                                        {/* Network direction indicator */}\n                                        <Grid className={classes.switchDirection}>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <Typography>{NETWORK_MAP[selectedAsset]} Chain</Typography>\n                                            </Grid>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <SwapCalls\n                                                    fontSize=\"large\"\n                                                    onClick={this.switchOriginChain.bind(this)}\n                                                />\n                                            </Grid>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <Typography>{NETWORK_MAP[destAsset]} Chain</Typography>\n                                            </Grid>\n                                        </Grid>\n\n                                        <Grid\n                                            container\n                                            className={classNames(\n                                                classes.standaloneOption,\n                                                classes.option\n                                            )}\n                                        >\n                                            <Grid item xs={4} className={classes.totalCell}>\n                                                <img src={MINI_ICON_MAP[destAsset]} />\n                                                {SYMBOL_MAP[destAsset]}\n                                            </Grid>\n                                            <Grid item xs={8}>\n                                                <CurrencyInput\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    bridgeDirection={\"Receive Amount\"}\n                                                />\n                                                {/* {total || \"\"} */}\n                                            </Grid>\n                                        </Grid>\n                                    </React.Fragment>\n                                )}\n\n                                {selectedDirection === 1 && (\n                                    /// ELA to ETH\n                                    <React.Fragment>\n                                        <Grid\n                                            container\n                                            className={classNames(\n                                                classes.standaloneOption,\n                                                classes.option\n                                            )}\n                                        >\n                                            <Grid item xs={4}>\n                                                <CurrencySelect\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    items={[\"wETH\", \"ELA\", \"wUSDT\"]}\n                                                    // renBTCBalance={store.get(\"renBTCBalance\")}\n                                                    // renZECBalance={store.get(\"renZECBalance\")}\n                                                    // renBCHBalance={store.get(\"renBCHBalance\")}\n                                                    // ETHBalance={store.get(\"ethbal\")}\n                                                    onCurrencyChange={(v: string) => {\n                                                        const asset = v.toLowerCase();\n                                                        if (asset == \"ela\") {\n                                                            store.set(\"convert.selectedFormat\", asset);\n                                                            store.set(\"selectedAsset\", `w${asset}`);\n                                                        } else {\n                                                            store.set(\"convert.selectedFormat\", asset);\n                                                            store.set(\"selectedAsset\", asset.replace(\"w\", \"\"));\n                                                        }\n                                                        gatherFeeData();\n                                                    }}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={8}>\n                                                <CurrencyInput\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    bridgeDirection={\"Send Amount\"}\n                                                />\n                                            </Grid>\n                                        </Grid>\n\n                                        {/* Network direction indicator */}\n                                        <Grid className={classes.switchDirection}>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <Typography>{NETWORK_MAP[selectedAsset]} Chain</Typography>\n                                            </Grid>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <SwapCalls\n                                                    fontSize=\"large\"\n                                                    onClick={this.switchOriginChain.bind(this)}\n                                                />\n                                            </Grid>\n                                            <Grid\n                                                container\n                                                justify=\"center\"\n                                            >\n                                                <Typography>{NETWORK_MAP[destAsset]} Chain</Typography>\n                                            </Grid>\n                                        </Grid>\n\n                                        <Grid\n                                            container\n                                            className={classNames(\n                                                classes.standaloneOption,\n                                                classes.option\n                                            )}\n                                        >\n                                            <Grid item xs={4} className={classes.totalCell}>\n                                                <img src={MINI_ICON_MAP[destAsset]} />\n                                                {SYMBOL_MAP[destAsset]}\n                                            </Grid>\n                                            <Grid item xs={8}>\n                                                <CurrencyInput\n                                                    active={SYMBOL_MAP[selectedAsset]}\n                                                    className={classes.currencySelect}\n                                                    bridgeDirection={\"Receive Amount\"}\n                                                />\n                                                {/* {total || \"\"} */}\n                                            </Grid>\n                                        </Grid>\n                                    </React.Fragment>\n                                )}\n\n                                {/* <Grid container justify=\"center\">\n                                    <Grid item xs={12}> */}\n                                {/* {selectedDirection === 0 && (\n                                            <React.Fragment>\n                                                <Grid className={classes.amountContainer} container>\n                                                    <BigCurrencyInput\n                                                        symbol={SYMBOL_MAP[selectedAsset]}\n                                                        placeholder={\"0.00 \" + SYMBOL_MAP[selectedAsset]}\n                                                        usdValue={usdValue}\n                                                        value={amount}\n                                                        onChange={(event: any) => {\n                                                            const value = event.value || \"\";\n                                                            store.set(\"convert.amount\", String(value));\n                                                            gatherFeeData();\n                                                        }}\n                                                    />\n                                                    {showAmountError && (\n                                                        <Typography className={classes.amountError}>\n                                                            Minimum mint amount is{\" \"}\n                                                            {MIN_TX_AMOUNTS[selectedAsset]}{\" \"}\n                                                            {SYMBOL_MAP[selectedAsset]}\n                                                        </Typography>\n                                                    )}\n                                                </Grid>\n                                                <Grid\n                                                    className={classes.balanceContainer}\n                                                    container\n                                                    justify=\"space-between\"\n                                                >\n                                                    <Typography variant=\"caption\">\n                                                        {SYMBOL_MAP[selectedAsset]} Balance\n                          </Typography>\n                                                    <Typography>\n                                                        <ActionLink\n                                                            onClick={() => {\n                                                                store.set(\"convert.amount\", balance);\n                                                            }}\n                                                        >\n                                                            {balance} {SYMBOL_MAP[selectedAsset]}\n                                                        </ActionLink>\n                                                    </Typography>\n                                                </Grid>\n\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid item xs={6}>\n                                                        Asset\n                          </Grid>\n                                                    <Grid item xs={6}>\n                                                        <CurrencySelect\n                                                            active={SYMBOL_MAP[selectedAsset]}\n                                                            className={classes.currencySelect}\n                                                            items={[\"ETH\", \"ELA\", \"USDT\"]}\n                                                            onCurrencyChange={(v: string) => {\n                                                                const asset = v.toLowerCase();\n                                                                store.set(\n                                                                    \"convert.selectedFormat\",\n                                                                    `w${asset}`\n                                                                );\n                                                                store.set(\"selectedAsset\", asset);\n                                                                gatherFeeData();\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n\n                                                <Grid\n                                                    className={classes.optionsContainer}\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            Destination\n                            </Grid>\n                                                        <Grid item xs={6}>\n                                                            <DarkTooltip\n                                                                placement=\"top\"\n                                                                title={localWeb3Address}\n                                                                arrow\n                                                            >\n                                                                <div>\n                                                                    <img src={WalletIcon} />\n                                                                    {abbreviateAddress(localWeb3Address)}\n                                                                </div>\n                                                            </DarkTooltip>\n                                                        </Grid>\n                                                    </Grid>\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            You will receive\n                            </Grid>\n                                                        <Grid item xs={6} className={classes.totalCell}>\n                                                            <img src={MINI_ICON_MAP[destAsset]} />\n                                                            {total || \"\"} {SYMBOL_MAP[destAsset]}\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </React.Fragment>\n                                        )} */}\n                                {/* \n                                        {selectedDirection === 1 && (\n                                            <React.Fragment>\n                                                <Grid className={classes.amountContainer} container>\n                                                    <BigCurrencyInput\n                                                        symbol={SYMBOL_MAP[selectedFormat]}\n                                                        value={amount}\n                                                        placeholder={\"0.00 \" + SYMBOL_MAP[selectedFormat]}\n                                                        usdValue={usdValue}\n                                                        onChange={(event: any) => {\n                                                            const value = event.value || \"\";\n                                                            store.set(\"convert.amount\", String(value));\n                                                            gatherFeeData();\n                                                        }}\n                                                    />\n                                                    {showAmountError && (\n                                                        <Typography className={classes.amountError}>\n                                                            Please enter a valid amount to release\n                            </Typography>\n                                                    )}\n                                                </Grid>\n                                                <Grid\n                                                    className={classes.balanceContainer}\n                                                    container\n                                                    justify=\"space-between\"\n                                                >\n                                                    <Typography variant=\"caption\">\n                                                        {SYMBOL_MAP[selectedFormat]} Balance\n                          </Typography>\n                                                    <Typography>\n                                                        <ActionLink\n                                                            onClick={() => {\n                                                                store.set(\"convert.amount\", balance);\n                                                            }}\n                                                        >\n                                                            {balance} {SYMBOL_MAP[selectedFormat]}\n                                                        </ActionLink>\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid item xs={6}>\n                                                        Asset\n                          </Grid>\n                                                    <Grid item xs={6} onClick={updateBalance}>\n                                                        <CurrencySelect\n                                                            active={SYMBOL_MAP[selectedFormat]}\n                                                            className={classes.currencySelect}\n                                                            items={[\"wETH\", \"wELA\", \"wUSDT\"]}\n                                                            // renBTCBalance={store.get(\"renBTCBalance\")}\n                                                            // renZECBalance={store.get(\"renZECBalance\")}\n                                                            // renBCHBalance={store.get(\"renBCHBalance\")}\n                                                            // ETHBalance={store.get(\"ethbal\")}\n                                                            onCurrencyChange={(v: string) => {\n                                                                const asset = v.toLowerCase();\n                                                                store.set(\"convert.selectedFormat\", asset);\n                                                                store.set(\n                                                                    \"selectedAsset\",\n                                                                    asset.replace(\"w\", \"\")\n                                                                );\n                                                                gatherFeeData();\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            Destination\n                            </Grid>\n                                                        <Grid item xs={6}>\n                                                            <DarkTooltip\n                                                                placement=\"top\"\n                                                                title={localWeb3Address}\n                                                                arrow\n                                                            >\n                                                                <div>\n                                                                    <img src={WalletIcon} />\n                                                                    {abbreviateAddress(localWeb3Address)}\n                                                                </div>\n                                                            </DarkTooltip>\n                                                        </Grid>\n                                                    </Grid>\n                                                    <Grid xs={12}>\n                                                        <div className={classes.addressInput}>\n                                                            <TextField\n                                                                label=\"Destination\"\n                                                                placeholder={`Enter ${NAME_MAP[selectedAsset]} Address`}\n                                                                size=\"medium\"\n                                                                fullWidth={true}\n                                                                error={showDestinationError}\n                                                                helperText={\n                                                                    showDestinationError\n                                                                        ? `Please enter a valid ${NAME_MAP[selectedAsset]} address`\n                                                                        : \"\"\n                                                                }\n                                                                InputProps={{\n                                                                    disableUnderline: true,\n                                                                }}\n                                                                InputLabelProps={{\n                                                                    shrink: true,\n                                                                }}\n                                                                inputProps={{\n                                                                    onFocus: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            true\n                                                                        );\n                                                                    },\n                                                                    onBlur: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            false\n                                                                        );\n                                                                    },\n                                                                }}\n                                                                onChange={(event) => {\n                                                                    const value = event.target.value;\n                                                                    store.set(\"convert.destination\", value);\n                                                                    store.set(\n                                                                        \"convert.destinationValid\",\n                                                                        AddressValidator.validate(\n                                                                            value,\n                                                                            selectedAsset.toUpperCase(),\n                                                                            selectedNetwork === \"testnet\"\n                                                                                ? \"testnet\"\n                                                                                : \"prod\"\n                                                                        )\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </Grid>\n                                                </Grid>\n\n                                                <Grid\n                                                    className={classes.optionsContainer}\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            You will receive\n                            </Grid>\n                                                        <Grid item xs={6} className={classes.totalCell}>\n                                                            <img src={MINI_ICON_MAP[destAsset]} />\n                                                            {total || \"\"} {SYMBOL_MAP[destAsset]}\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </React.Fragment>\n                                        )} */}\n                                {/* </Grid>\n                                </Grid> */}\n\n                                <Grid\n                                    container\n                                    justify=\"center\"\n                                    className={classes.actionButtonContainer}\n                                >\n                                    {selectedDirection === 0 && (\n                                        <Grid item xs={12}>\n                                            <Button\n                                                disabled={!total || parseFloat(total) < 0.0000001}\n                                                variant={\"contained\"}\n                                                disableRipple\n                                                color=\"primary\"\n                                                size=\"large\"\n                                                fullWidth\n                                                className={classNames(\n                                                    classes.margin,\n                                                    classes.actionButton\n                                                )}\n                                                onClick={this.newDeposit.bind(this)}\n                                            >\n                                                Next\n                      </Button>\n                                        </Grid>\n                                    )}\n                                    {selectedDirection === 1 && (\n                                        <Grid item xs={12}>\n                                            <Button\n                                                disabled={!total || parseFloat(total) < 0.0000001}\n                                                variant={\"contained\"}\n                                                disableRipple\n                                                color=\"primary\"\n                                                fullWidth\n                                                size=\"large\"\n                                                className={classNames(\n                                                    classes.margin,\n                                                    classes.actionButton\n                                                )}\n                                                onClick={this.newWithdraw.bind(this)}\n                                            >\n                                                Next\n                      </Button>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles)(withStore(TransferContainer2));\n"]},"metadata":{},"sourceType":"module"}