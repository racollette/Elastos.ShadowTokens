{"ast":null,"code":"import { isMainnetAddress, isTestnetAddress, toCashAddress } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport { getConfirmations, getUTXO, getUTXOs } from \"send-crypto/build/main/handlers/BCH/BCHHandler\";\nimport { anyAddressFrom } from \"./btc\";\nimport { createAddress } from \"./common\";\nimport { Ox, strip0x } from \"./hex\";\nexport const createBCHAddress = createAddress(Networks, Opcode, Script);\nexport const getBitcoinCashUTXOs = ({\n  isTestnet\n}) => {\n  return async (address, confirmations) => {\n    return getUTXOs(isTestnet, {\n      address,\n      confirmations\n    });\n  };\n};\nexport const getBitcoinCashConfirmations = ({\n  isTestnet\n}) => {\n  return async txHash => {\n    return getConfirmations(isTestnet, txHash);\n  };\n};\nexport const getBitcoinCashUTXO = ({\n  isTestnet\n}) => {\n  return async (txHash, vOut) => {\n    return getUTXO(isTestnet, txHash, vOut);\n  };\n};\nexport const bchAddressToHex = address => Ox(Buffer.from(address));\n\nconst isBCHAddress = (address, options) => {\n  try {\n    return options ? options.isTestnet ? isTestnetAddress(address) : isMainnetAddress(address) : isTestnetAddress(address) || isMainnetAddress(address);\n  } catch (error) {\n    return false;\n  }\n};\n\nconst bchTactics = {\n  decoders: [address => Buffer.from(address), address => Buffer.from(address, \"base64\"), address => Buffer.from(strip0x(address), \"hex\")],\n  encoders: [buffer => toCashAddress(buffer.toString())]\n};\nexport const bchAddressFrom = anyAddressFrom(isBCHAddress, bchTactics);","map":{"version":3,"sources":["../../src/bch.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,EAA2B,gBAA3B,EAA6C,aAA7C,QAAkE,WAAlE;AACA,SAAS,QAAT,EAAmB,MAAnB,EAA2B,MAA3B,QAAyC,kBAAzC;AACA,SACI,gBADJ,EAEI,OAFJ,EAGI,QAHJ,QAIO,gDAJP;AAMA,SAAS,cAAT,QAAwC,OAAxC;AACA,SAAS,aAAT,QAA8B,UAA9B;AACA,SAAS,EAAT,EAAa,OAAb,QAA4B,OAA5B;AAEA,OAAO,MAAM,gBAAgB,GAAG,aAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAAtC;AAEP,OAAO,MAAM,mBAAmB,GAAG,CAAC;AAAE,EAAA;AAAF,CAAD,KAA0C;AACzE,SAAO,OAAO,OAAP,EAAwB,aAAxB,KAAiD;AACpD,WAAO,QAAQ,CAAC,SAAD,EAAY;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,KAAZ,CAAf;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAM,2BAA2B,GAAG,CAAC;AACxC,EAAA;AADwC,CAAD,KAItC;AACD,SAAO,MAAO,MAAP,IAAyB;AAC5B,WAAO,gBAAgB,CAAC,SAAD,EAAY,MAAZ,CAAvB;AACH,GAFD;AAGH,CARM;AAUP,OAAO,MAAM,kBAAkB,GAAG,CAAC;AAAE,EAAA;AAAF,CAAD,KAA0C;AACxE,SAAO,OAAO,MAAP,EAAuB,IAAvB,KAAuC;AAC1C,WAAO,OAAO,CAAC,SAAD,EAAY,MAAZ,EAAoB,IAApB,CAAd;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAM,eAAe,GAAI,OAAD,IAAqB,EAAE,CAAC,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAD,CAA/C;;AAEP,MAAM,YAAY,GAAG,CAAC,OAAD,EAAkB,OAAlB,KAAuD;AACxE,MAAI;AACA,WAAO,OAAO,GACR,OAAO,CAAC,SAAR,GACI,gBAAgB,CAAC,OAAD,CADpB,GAEI,gBAAgB,CAAC,OAAD,CAHZ,GAIR,gBAAgB,CAAC,OAAD,CAAhB,IAA6B,gBAAgB,CAAC,OAAD,CAJnD;AAKH,GAND,CAME,OAAO,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CAVD;;AAYA,MAAM,UAAU,GAAY;AACxB,EAAA,QAAQ,EAAE,CACL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAZ,CADf,EAEL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,CAFf,EAGL,OAAD,IAAqB,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAAD,CAAnB,EAA8B,KAA9B,CAHf,CADc;AAMxB,EAAA,QAAQ,EAAE,CAAE,MAAD,IAAoB,aAAa,CAAC,MAAM,CAAC,QAAP,EAAD,CAAlC;AANc,CAA5B;AASA,OAAO,MAAM,cAAc,GAAG,cAAc,CAAC,YAAD,EAAe,UAAf,CAArC","sourceRoot":"","sourcesContent":["import { isMainnetAddress, isTestnetAddress, toCashAddress } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport { getConfirmations, getUTXO, getUTXOs, } from \"send-crypto/build/main/handlers/BCH/BCHHandler\";\nimport { anyAddressFrom } from \"./btc\";\nimport { createAddress } from \"./common\";\nimport { Ox, strip0x } from \"./hex\";\nexport const createBCHAddress = createAddress(Networks, Opcode, Script);\nexport const getBitcoinCashUTXOs = ({ isTestnet }) => {\n    return async (address, confirmations) => {\n        return getUTXOs(isTestnet, { address, confirmations });\n    };\n};\nexport const getBitcoinCashConfirmations = ({ isTestnet, }) => {\n    return async (txHash) => {\n        return getConfirmations(isTestnet, txHash);\n    };\n};\nexport const getBitcoinCashUTXO = ({ isTestnet }) => {\n    return async (txHash, vOut) => {\n        return getUTXO(isTestnet, txHash, vOut);\n    };\n};\nexport const bchAddressToHex = (address) => Ox(Buffer.from(address));\nconst isBCHAddress = (address, options) => {\n    try {\n        return options\n            ? options.isTestnet\n                ? isTestnetAddress(address)\n                : isMainnetAddress(address)\n            : isTestnetAddress(address) || isMainnetAddress(address);\n    }\n    catch (error) {\n        return false;\n    }\n};\nconst bchTactics = {\n    decoders: [\n        (address) => Buffer.from(address),\n        (address) => Buffer.from(address, \"base64\"),\n        (address) => Buffer.from(strip0x(address), \"hex\"),\n    ],\n    encoders: [(buffer) => toCashAddress(buffer.toString())],\n};\nexport const bchAddressFrom = anyAddressFrom(isBCHAddress, bchTactics);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVELE9BQU8sRUFDSCxnQkFBZ0IsRUFDaEIsT0FBTyxFQUNQLFFBQVEsR0FDWCxNQUFNLGdEQUFnRCxDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQVcsTUFBTSxPQUFPLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUV4RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDekUsT0FBTyxLQUFLLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsRUFBRTtRQUNwRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEVBQ3hDLFNBQVMsR0FHWixFQUFFLEVBQUU7SUFDRCxPQUFPLEtBQUssRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUM1QixPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUEwQixFQUFFLEVBQUU7SUFDeEUsT0FBTyxLQUFLLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzFDLE9BQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTdFLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWlDLEVBQUUsRUFBRTtJQUN4RSxJQUFJO1FBQ0EsT0FBTyxPQUFPO1lBQ1YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTO2dCQUNmLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7WUFDL0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFZO0lBQ3hCLFFBQVEsRUFBRTtRQUNOLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1FBQ25ELENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDNUQ7SUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0NBQ25FLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyJ9"]},"metadata":{},"sourceType":"module"}