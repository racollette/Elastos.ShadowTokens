{"ast":null,"code":"/* eslint-disable */\nimport EthCalls from '../web3Calls';\nimport EventNames from '../events';\nimport { toPayload, toError } from '../jsonrpc';\nimport { getSanitizedTx } from './utils';\nimport BigNumber from 'bignumber.js';\nimport Misc from '../../helpers/misc';\nimport debugLogger from 'debug';\nconst debug = debugLogger('MEWconnectWeb3');\nconst debugErrors = debugLogger('MEWconnectError');\n\nconst setEvents = (promiObj, tx, eventHub) => {\n  promiObj.once('transactionHash', hash => {\n    eventHub.emit('Hash', hash);\n  }).once('receipt', res => {\n    eventHub.emit('Receipt', res);\n  }).on('error', err => {\n    eventHub.emit('Error', err);\n  });\n};\n\nexport default (async ({\n  payload,\n  store,\n  requestManager,\n  eventHub\n}, res, next) => {\n  if (payload.method !== 'eth_sendTransaction') return next();\n  const tx = Object.assign({}, payload.params[0]);\n  const localTx = Object.assign({}, tx);\n  delete localTx['gas'];\n  delete localTx['nonce'];\n  const ethCalls = new EthCalls(requestManager);\n\n  try {\n    tx.nonce = !tx.nonce ? await store.state.web3.eth.getTransactionCount(store.state.wallet.getAddressString()) : tx.nonce;\n    tx.gas = !tx.gas ? await ethCalls.estimateGas(localTx) : tx.gas;\n    tx.gasPrice = !tx.gasPrice ? await store.state.web3.eth.getGasPrice() : tx.gasPrice;\n  } catch (e) {\n    res(e);\n    return;\n  }\n\n  tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n  getSanitizedTx(tx).then(_tx => {\n    eventHub.emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n      if (_response.reject) {\n        debug('USER DECLINED SIGN TRANSACTION & SEND');\n        res(toError(payload.id, 'User Rejected Request', 4001));\n        return;\n      }\n\n      debug('broadcasting', payload.method, _response.rawTransaction);\n\n      const _promiObj = store.state.web3.eth.sendSignedTransaction(_response.rawTransaction);\n\n      _promiObj.once('transactionHash', hash => {\n        if (store.state.wallet !== null) {\n          const localStoredObj = store.nonceCache;\n          store.nonceCache = {\n            nonce: Misc.sanitizeHex(new BigNumber(localStoredObj.nonce).plus(1).toString(16)),\n            timestamp: localStoredObj.timestamp\n          };\n        }\n\n        res(null, toPayload(payload.id, hash));\n      }).on('error', err => {\n        debugErrors('Error: eth_sendTransaction', err);\n        res(err);\n      });\n\n      setEvents(_promiObj, _tx, eventHub);\n    });\n  }).catch(e => {\n    res(e);\n  });\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/eth_sendTransaction.js"],"names":["EthCalls","EventNames","toPayload","toError","getSanitizedTx","BigNumber","Misc","debugLogger","debug","debugErrors","setEvents","promiObj","tx","eventHub","once","hash","emit","res","on","err","payload","store","requestManager","next","method","Object","assign","params","localTx","ethCalls","nonce","state","web3","eth","getTransactionCount","wallet","getAddressString","gas","estimateGas","gasPrice","getGasPrice","e","chainId","network","type","chainID","then","_tx","SHOW_TX_CONFIRM_MODAL","_response","reject","id","rawTransaction","_promiObj","sendSignedTransaction","localStoredObj","nonceCache","sanitizeHex","plus","toString","timestamp","catch"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport EthCalls from '../web3Calls';\nimport EventNames from '../events';\nimport { toPayload, toError } from '../jsonrpc';\nimport { getSanitizedTx } from './utils';\nimport BigNumber from 'bignumber.js';\nimport Misc from '../../helpers/misc';\nimport debugLogger from 'debug';\nconst debug = debugLogger('MEWconnectWeb3');\nconst debugErrors = debugLogger('MEWconnectError');\n\nconst setEvents = (promiObj, tx, eventHub) => {\n  promiObj\n    .once('transactionHash', hash => {\n      eventHub.emit('Hash', hash);\n    })\n    .once('receipt', res => {\n      eventHub.emit('Receipt', res);\n    })\n    .on('error', err => {\n      eventHub.emit('Error', err);\n    });\n};\nexport default async (\n  { payload, store, requestManager, eventHub },\n  res,\n  next\n) => {\n  if (payload.method !== 'eth_sendTransaction') return next();\n  const tx = Object.assign({}, payload.params[0]);\n  const localTx = Object.assign({}, tx);\n  delete localTx['gas'];\n  delete localTx['nonce'];\n  const ethCalls = new EthCalls(requestManager);\n  try {\n    tx.nonce = !tx.nonce\n      ? await store.state.web3.eth.getTransactionCount(\n          store.state.wallet.getAddressString()\n        )\n      : tx.nonce;\n    tx.gas = !tx.gas ? await ethCalls.estimateGas(localTx) : tx.gas;\n    tx.gasPrice = !tx.gasPrice ? await store.state.web3.eth.getGasPrice() : tx.gasPrice\n  } catch (e) {\n    res(e);\n    return;\n  }\n  tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n  getSanitizedTx(tx)\n    .then(_tx => {\n      eventHub.emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n        if(_response.reject){\n          debug('USER DECLINED SIGN TRANSACTION & SEND');\n          res(toError(payload.id, 'User Rejected Request', 4001));\n          return;\n        }\n        debug('broadcasting', payload.method, _response.rawTransaction)\n        const _promiObj = store.state.web3.eth.sendSignedTransaction(\n          _response.rawTransaction\n        );\n\n        _promiObj\n          .once('transactionHash', hash => {\n            if (store.state.wallet !== null) {\n              const localStoredObj = store.nonceCache;\n              store.nonceCache = {\n                nonce: Misc.sanitizeHex(\n                  new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n                ),\n                timestamp: localStoredObj.timestamp\n              };\n            }\n            res(null, toPayload(payload.id, hash));\n          })\n          .on('error', err => {\n            debugErrors('Error: eth_sendTransaction', err);\n            res(err);\n          });\n        setEvents(_promiObj, _tx, eventHub);\n      });\n    })\n    .catch(e => {\n      res(e);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}