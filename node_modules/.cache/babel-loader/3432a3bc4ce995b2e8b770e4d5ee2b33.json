{"ast":null,"code":"// Coins supported by bitgo-bitcoinjs-lib\nconst typeforce = require('typeforce');\n\nconst networks = require('./networks');\n/**\n * @returns {Network[]} all known networks as array\n */\n\n\nfunction getNetworkList() {\n  return Object.keys(networks).map(n => networks[n]);\n}\n/**\n * @param {Network} network\n * @returns {string} the name of the network. Returns undefined if network is not a value\n *                   of `networks`\n */\n\n\nfunction getNetworkName(network) {\n  return Object.keys(networks).find(n => networks[n] === network);\n}\n/**\n * @param {Network} network\n * @returns {Object} the mainnet corresponding to a testnet\n */\n\n\nfunction getMainnet(network) {\n  switch (network) {\n    case networks.bitcoin:\n    case networks.testnet:\n      return networks.bitcoin;\n\n    case networks.bitcoincash:\n    case networks.bitcoincashTestnet:\n      return networks.bitcoincash;\n\n    case networks.bitcoingold:\n      // FIXME(https://github.com/BitGo/bitgo-utxo-lib/issues/50): define bitcoingoldTest\n      return networks.bitcoingold;\n\n    case networks.bitcoinsv:\n    case networks.bitcoinsvTestnet:\n      return networks.bitcoinsv;\n\n    case networks.dash:\n    case networks.dashTest:\n      return networks.dash;\n\n    case networks.litecoin:\n    case networks.litecoinTest:\n      return networks.litecoin;\n\n    case networks.zcash:\n    case networks.zcashTest:\n      return networks.zcash;\n  }\n\n  throw new TypeError(`invalid network`);\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a mainnet\n */\n\n\nfunction isMainnet(network) {\n  return getMainnet(network) === network;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a testnet\n */\n\n\nfunction isTestnet(network) {\n  return getMainnet(network) !== network;\n}\n/**\n *\n * @param {Network} network\n * @param {Network} otherNetwork\n * @returns {boolean} true iff both networks are for the same coin\n */\n\n\nfunction isSameCoin(network, otherNetwork) {\n  return getMainnet(network) === getMainnet(otherNetwork);\n}\n\nconst mainnets = getNetworkList().filter(isMainnet);\nconst testnets = getNetworkList().filter(isTestnet);\n/**\n * Map where keys are mainnet networks and values are testnet networks\n * @type {Map<Network, Network[]>}\n */\n\nconst mainnetTestnetPairs = new Map(mainnets.map(m => [m, testnets.filter(t => getMainnet(t) === m)]));\n/**\n * @param {Network} network\n * @returns {Network|undefined} - The testnet corresponding to a mainnet.\n *                               Returns undefined if a network has no testnet.\n */\n\nfunction getTestnet(network) {\n  if (isTestnet(network)) {\n    return network;\n  }\n\n  const testnets = mainnetTestnetPairs.get(network);\n\n  if (testnets === undefined) {\n    throw new Error(`invalid argument`);\n  }\n\n  if (testnets.length === 0) {\n    return;\n  }\n\n  if (testnets.length === 1) {\n    return testnets[0];\n  }\n\n  throw new Error(`more than one testnet for ${getNetworkName(network)}`);\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network bitcoin or testnet\n */\n\n\nfunction isBitcoin(network) {\n  return getMainnet(network) === networks.bitcoin;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoincash or bitcoincashTestnet\n */\n\n\nfunction isBitcoinCash(network) {\n  return getMainnet(network) === networks.bitcoincash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoingold\n */\n\n\nfunction isBitcoinGold(network) {\n  return getMainnet(network) === networks.bitcoingold;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoinsv or bitcoinsvTestnet\n */\n\n\nfunction isBitcoinSV(network) {\n  return getMainnet(network) === networks.bitcoinsv;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is dash or dashTest\n */\n\n\nfunction isDash(network) {\n  return getMainnet(network) === networks.dash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is litecoin or litecoinTest\n */\n\n\nfunction isLitecoin(network) {\n  return getMainnet(network) === networks.litecoin;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash or zcashTest\n */\n\n\nfunction isZcash(network) {\n  return getMainnet(network) === networks.zcash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} returns true iff network is any of the network stated in the argument\n */\n\n\nconst isValidNetwork = typeforce.oneOf(isBitcoin, isBitcoinCash, isBitcoinGold, isBitcoinSV, isDash, isLitecoin, isZcash);\nmodule.exports = {\n  BTC: networks.bitcoin.coin,\n  BCH: networks.bitcoincash.coin,\n  BSV: networks.bitcoinsv.coin,\n  BTG: networks.bitcoingold.coin,\n  DASH: networks.dash.coin,\n  LTC: networks.litecoin.coin,\n  ZEC: networks.zcash.coin,\n  getNetworkList,\n  getNetworkName,\n  getMainnet,\n  isMainnet,\n  getTestnet,\n  isTestnet,\n  isSameCoin,\n  isBitcoin,\n  isBitcoinCash,\n  isBitcoinGold,\n  isBitcoinSV,\n  isDash,\n  isLitecoin,\n  isZcash,\n  isValidNetwork,\n\n  /**\n   * @deprecated: use isValidNetwork\n   */\n  isValidCoin: isValidNetwork\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/bitgo-utxo-lib/src/coins.js"],"names":["typeforce","require","networks","getNetworkList","Object","keys","map","n","getNetworkName","network","find","getMainnet","bitcoin","testnet","bitcoincash","bitcoincashTestnet","bitcoingold","bitcoinsv","bitcoinsvTestnet","dash","dashTest","litecoin","litecoinTest","zcash","zcashTest","TypeError","isMainnet","isTestnet","isSameCoin","otherNetwork","mainnets","filter","testnets","mainnetTestnetPairs","Map","m","t","getTestnet","get","undefined","Error","length","isBitcoin","isBitcoinCash","isBitcoinGold","isBitcoinSV","isDash","isLitecoin","isZcash","isValidNetwork","oneOf","module","exports","BTC","coin","BCH","BSV","BTG","DASH","LTC","ZEC","isValidCoin"],"mappings":"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","sourcesContent":["// Coins supported by bitgo-bitcoinjs-lib\nconst typeforce = require('typeforce')\n\nconst networks = require('./networks')\n\n/**\n * @returns {Network[]} all known networks as array\n */\nfunction getNetworkList () {\n  return Object.keys(networks).map(n => networks[n])\n}\n\n/**\n * @param {Network} network\n * @returns {string} the name of the network. Returns undefined if network is not a value\n *                   of `networks`\n */\nfunction getNetworkName (network) {\n  return Object.keys(networks).find(n => networks[n] === network)\n}\n\n/**\n * @param {Network} network\n * @returns {Object} the mainnet corresponding to a testnet\n */\nfunction getMainnet (network) {\n  switch (network) {\n    case networks.bitcoin:\n    case networks.testnet:\n      return networks.bitcoin\n\n    case networks.bitcoincash:\n    case networks.bitcoincashTestnet:\n      return networks.bitcoincash\n\n    case networks.bitcoingold:\n    // FIXME(https://github.com/BitGo/bitgo-utxo-lib/issues/50): define bitcoingoldTest\n      return networks.bitcoingold\n\n    case networks.bitcoinsv:\n    case networks.bitcoinsvTestnet:\n      return networks.bitcoinsv\n\n    case networks.dash:\n    case networks.dashTest:\n      return networks.dash\n\n    case networks.litecoin:\n    case networks.litecoinTest:\n      return networks.litecoin\n\n    case networks.zcash:\n    case networks.zcashTest:\n      return networks.zcash\n  }\n  throw new TypeError(`invalid network`)\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a mainnet\n */\nfunction isMainnet (network) {\n  return getMainnet(network) === network\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a testnet\n */\nfunction isTestnet (network) {\n  return getMainnet(network) !== network\n}\n\n/**\n *\n * @param {Network} network\n * @param {Network} otherNetwork\n * @returns {boolean} true iff both networks are for the same coin\n */\nfunction isSameCoin (network, otherNetwork) {\n  return getMainnet(network) === getMainnet(otherNetwork)\n}\n\nconst mainnets = getNetworkList().filter(isMainnet)\nconst testnets = getNetworkList().filter(isTestnet)\n\n/**\n * Map where keys are mainnet networks and values are testnet networks\n * @type {Map<Network, Network[]>}\n */\nconst mainnetTestnetPairs = new Map(\n  mainnets.map(m => [m, testnets.filter(t => getMainnet(t) === m)])\n)\n\n/**\n * @param {Network} network\n * @returns {Network|undefined} - The testnet corresponding to a mainnet.\n *                               Returns undefined if a network has no testnet.\n */\nfunction getTestnet (network) {\n  if (isTestnet(network)) {\n    return network\n  }\n  const testnets = mainnetTestnetPairs.get(network)\n  if (testnets === undefined) {\n    throw new Error(`invalid argument`)\n  }\n  if (testnets.length === 0) {\n    return\n  }\n  if (testnets.length === 1) {\n    return testnets[0]\n  }\n  throw new Error(`more than one testnet for ${getNetworkName(network)}`)\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network bitcoin or testnet\n */\nfunction isBitcoin (network) {\n  return getMainnet(network) === networks.bitcoin\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoincash or bitcoincashTestnet\n */\nfunction isBitcoinCash (network) {\n  return getMainnet(network) === networks.bitcoincash\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoingold\n */\nfunction isBitcoinGold (network) {\n  return getMainnet(network) === networks.bitcoingold\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoinsv or bitcoinsvTestnet\n */\nfunction isBitcoinSV (network) {\n  return getMainnet(network) === networks.bitcoinsv\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is dash or dashTest\n */\nfunction isDash (network) {\n  return getMainnet(network) === networks.dash\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is litecoin or litecoinTest\n */\nfunction isLitecoin (network) {\n  return getMainnet(network) === networks.litecoin\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash or zcashTest\n */\nfunction isZcash (network) {\n  return getMainnet(network) === networks.zcash\n}\n\n/**\n * @param {Network} network\n * @returns {boolean} returns true iff network is any of the network stated in the argument\n */\nconst isValidNetwork = typeforce.oneOf(\n  isBitcoin,\n  isBitcoinCash,\n  isBitcoinGold,\n  isBitcoinSV,\n  isDash,\n  isLitecoin,\n  isZcash\n)\n\nmodule.exports = {\n  BTC: networks.bitcoin.coin,\n  BCH: networks.bitcoincash.coin,\n  BSV: networks.bitcoinsv.coin,\n  BTG: networks.bitcoingold.coin,\n  DASH: networks.dash.coin,\n  LTC: networks.litecoin.coin,\n  ZEC: networks.zcash.coin,\n\n  getNetworkList,\n  getNetworkName,\n\n  getMainnet,\n  isMainnet,\n  getTestnet,\n  isTestnet,\n  isSameCoin,\n\n  isBitcoin,\n  isBitcoinCash,\n  isBitcoinGold,\n  isBitcoinSV,\n  isDash,\n  isLitecoin,\n  isZcash,\n\n  isValidNetwork,\n  /**\n   * @deprecated: use isValidNetwork\n   */\n  isValidCoin: isValidNetwork\n}\n"]},"metadata":{},"sourceType":"script"}