{"ast":null,"code":"import Method from 'web3-core-method';\nimport utils from 'web3-utils';\nimport { formatters } from 'web3-core-helpers';\n\nclass Web3Calls {\n  constructor(requestManager) {\n    const ethereumCalls = [new Method({\n      name: 'getId',\n      call: 'net_version',\n      params: 0,\n      outputFormatter: utils.hexToNumber\n    }), new Method({\n      name: 'getGasPrice',\n      call: 'eth_gasPrice',\n      params: 0\n    }), new Method({\n      name: 'getBlockNumber',\n      call: 'eth_blockNumber',\n      params: 0\n    }), new Method({\n      name: 'getBlockByNumber',\n      call: 'eth_getBlockByNumber',\n      params: 2\n    }), new Method({\n      name: 'estimateGas',\n      call: 'eth_estimateGas',\n      params: 1,\n      inputFormatter: [formatters.inputCallFormatter],\n      outputFormatter: utils.hexToNumber\n    }), new Method({\n      name: 'sendSignedTransaction',\n      call: 'eth_sendRawTransaction',\n      params: 1,\n      inputFormatter: [null]\n    }), new Method({\n      name: 'getTransactionReceipt',\n      call: 'eth_getTransactionReceipt',\n      params: 1,\n      inputFormatter: [null]\n    }), new Method({\n      name: 'getTransactionCount',\n      call: 'eth_getTransactionCount',\n      params: 2,\n      inputFormatter: [function (address) {\n        if (utils.isAddress(address.toLowerCase())) {\n          return address;\n        }\n\n        throw new Error('Address ' + address + ' is not a valid address to get the \"transactionCount\".');\n      }, function () {\n        return 'latest';\n      }]\n    })];\n    this.ethereumCalls = {};\n    ethereumCalls.forEach(call => {\n      call.attachToObject(this.ethereumCalls);\n      call.setRequestManager(requestManager);\n    });\n    return this.ethereumCalls;\n  }\n\n}\n\nexport default Web3Calls;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/web3Calls.js"],"names":["Method","utils","formatters","Web3Calls","constructor","requestManager","ethereumCalls","name","call","params","outputFormatter","hexToNumber","inputFormatter","inputCallFormatter","address","isAddress","toLowerCase","Error","forEach","attachToObject","setRequestManager"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAC1B,UAAMC,aAAa,GAAG,CACpB,IAAIN,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,OADG;AAETC,MAAAA,IAAI,EAAE,aAFG;AAGTC,MAAAA,MAAM,EAAE,CAHC;AAITC,MAAAA,eAAe,EAAET,KAAK,CAACU;AAJd,KAAX,CADoB,EAOpB,IAAIX,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,aADG;AAETC,MAAAA,IAAI,EAAE,cAFG;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAX,CAPoB,EAYpB,IAAIT,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,gBADG;AAETC,MAAAA,IAAI,EAAE,iBAFG;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAX,CAZoB,EAiBpB,IAAIT,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,kBADG;AAETC,MAAAA,IAAI,EAAE,sBAFG;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAX,CAjBoB,EAsBpB,IAAIT,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,aADG;AAETC,MAAAA,IAAI,EAAE,iBAFG;AAGTC,MAAAA,MAAM,EAAE,CAHC;AAITG,MAAAA,cAAc,EAAE,CAACV,UAAU,CAACW,kBAAZ,CAJP;AAKTH,MAAAA,eAAe,EAAET,KAAK,CAACU;AALd,KAAX,CAtBoB,EA6BpB,IAAIX,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,uBADG;AAETC,MAAAA,IAAI,EAAE,wBAFG;AAGTC,MAAAA,MAAM,EAAE,CAHC;AAITG,MAAAA,cAAc,EAAE,CAAC,IAAD;AAJP,KAAX,CA7BoB,EAmCpB,IAAIZ,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,uBADG;AAETC,MAAAA,IAAI,EAAE,2BAFG;AAGTC,MAAAA,MAAM,EAAE,CAHC;AAITG,MAAAA,cAAc,EAAE,CAAC,IAAD;AAJP,KAAX,CAnCoB,EAyCpB,IAAIZ,MAAJ,CAAW;AACTO,MAAAA,IAAI,EAAE,qBADG;AAETC,MAAAA,IAAI,EAAE,yBAFG;AAGTC,MAAAA,MAAM,EAAE,CAHC;AAITG,MAAAA,cAAc,EAAE,CACd,UAASE,OAAT,EAAkB;AAChB,YAAIb,KAAK,CAACc,SAAN,CAAgBD,OAAO,CAACE,WAAR,EAAhB,CAAJ,EAA4C;AAC1C,iBAAOF,OAAP;AACD;;AACD,cAAM,IAAIG,KAAJ,CACJ,aACEH,OADF,GAEE,wDAHE,CAAN;AAKD,OAVa,EAWd,YAAW;AACT,eAAO,QAAP;AACD,OAba;AAJP,KAAX,CAzCoB,CAAtB;AA8DA,SAAKR,aAAL,GAAqB,EAArB;AACAA,IAAAA,aAAa,CAACY,OAAd,CAAsBV,IAAI,IAAI;AAC5BA,MAAAA,IAAI,CAACW,cAAL,CAAoB,KAAKb,aAAzB;AACAE,MAAAA,IAAI,CAACY,iBAAL,CAAuBf,cAAvB;AACD,KAHD;AAIA,WAAO,KAAKC,aAAZ;AACD;;AAtEa;;AAyEhB,eAAeH,SAAf","sourcesContent":["import Method from 'web3-core-method';\nimport utils from 'web3-utils';\nimport { formatters } from 'web3-core-helpers';\n\nclass Web3Calls {\n  constructor(requestManager) {\n    const ethereumCalls = [\n      new Method({\n        name: 'getId',\n        call: 'net_version',\n        params: 0,\n        outputFormatter: utils.hexToNumber\n      }),\n      new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }),\n      new Method({\n        name: 'getBlockNumber',\n        call: 'eth_blockNumber',\n        params: 0\n      }),\n      new Method({\n        name: 'getBlockByNumber',\n        call: 'eth_getBlockByNumber',\n        params: 2\n      }),\n      new Method({\n        name: 'estimateGas',\n        call: 'eth_estimateGas',\n        params: 1,\n        inputFormatter: [formatters.inputCallFormatter],\n        outputFormatter: utils.hexToNumber\n      }),\n      new Method({\n        name: 'sendSignedTransaction',\n        call: 'eth_sendRawTransaction',\n        params: 1,\n        inputFormatter: [null]\n      }),\n      new Method({\n        name: 'getTransactionReceipt',\n        call: 'eth_getTransactionReceipt',\n        params: 1,\n        inputFormatter: [null]\n      }),\n      new Method({\n        name: 'getTransactionCount',\n        call: 'eth_getTransactionCount',\n        params: 2,\n        inputFormatter: [\n          function(address) {\n            if (utils.isAddress(address.toLowerCase())) {\n              return address;\n            }\n            throw new Error(\n              'Address ' +\n                address +\n                ' is not a valid address to get the \"transactionCount\".'\n            );\n          },\n          function() {\n            return 'latest';\n          }\n        ]\n      })\n    ];\n    this.ethereumCalls = {};\n    ethereumCalls.forEach(call => {\n      call.attachToObject(this.ethereumCalls);\n      call.setRequestManager(requestManager);\n    });\n    return this.ethereumCalls;\n  }\n}\n\nexport default Web3Calls;\n"]},"metadata":{},"sourceType":"module"}