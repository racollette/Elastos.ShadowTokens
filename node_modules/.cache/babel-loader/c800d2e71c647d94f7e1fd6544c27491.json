{"ast":null,"code":"/**\n * Forward the events emitted by a Web3 PromiEvent to another PromiEvent.\n */\nexport const forwardWeb3Events = (src, dest\n/*, filterFn = (_name: string) => true*/\n) => {\n  src.on(\"transactionHash\", eventReceipt => {\n    dest.emit(\"transactionHash\", eventReceipt);\n    dest.emit(\"eth_transactionHash\", eventReceipt);\n  });\n  src.on(\"receipt\", eventReceipt => {\n    dest.emit(\"receipt\", eventReceipt);\n    dest.emit(\"eth_receipt\", eventReceipt);\n  });\n  src.on(\"confirmation\", (confNumber, eventReceipt) => {\n    dest.emit(\"confirmation\", confNumber, eventReceipt);\n    dest.emit(\"eth_confirmation\", confNumber, eventReceipt);\n  });\n  src.on(\"error\", error => {\n    dest.emit(\"error\", error);\n  });\n};\n/**\n * Bind a promiEvent to an Ethereum transaction hash, sending confirmation\n * events. Web3 may export a similar function, which should be used instead if\n * it exists.\n *\n * @param web3 A Web3 instance for watching for confirmations.\n * @param txHash The Ethereum transaction has as a hex string.\n * @param promiEvent The existing promiEvent to forward events to.\n */\n\nexport const manualPromiEvent = async (web3, txHash, promiEvent) => {\n  const receipt = await web3.eth.getTransactionReceipt(txHash);\n  promiEvent.emit(\"transactionHash\", txHash);\n\n  const emitConfirmation = async () => {\n    const currentBlock = await web3.eth.getBlockNumber(); // tslint:disable-next-line: no-any\n\n    promiEvent.emit(\"confirmation\", Math.max(0, currentBlock - receipt.blockNumber), receipt);\n  }; // The following section should be revised to properly\n  // register the event emitter to the transaction's\n  // confirmations, so that on(\"confirmation\") works\n  // as expected. This code branch only occurs if a\n  // completed transfer is passed to RenJS again, which\n  // should not usually happen.\n  // Emit confirmation now and in 1s, since a common use\n  // case may be to have the following code, which doesn't\n  // work if we emit the txHash and confirmations\n  // with no time in between:\n  //\n  // ```js\n  // const txHash = await new Promise((resolve, reject) => lockAndMint.on(\"transactionHash\", resolve).catch(reject));\n  // lockAndMint.on(\"confirmation\", () => { /* do something */ });\n  // ```\n\n\n  await emitConfirmation();\n  setTimeout(emitConfirmation, 1000);\n  return receipt;\n};","map":{"version":3,"sources":["../../src/web3PromiEvent.ts"],"names":[],"mappings":"AAmBA;;;AAGA,OAAO,MAAM,iBAAiB,GAAG,CAA+E,GAA/E,EAA4G;AAA4B;AAAxI,KAAoL;AACjN,EAAA,GAAG,CAAC,EAAJ,CAAO,iBAAP,EAA2B,YAAD,IAAyB;AAAG,IAAA,IAAI,CAAC,IAAL,CAAU,iBAAV,EAA6B,YAA7B;AAA4C,IAAA,IAAI,CAAC,IAAL,CAAU,qBAAV,EAAiC,YAAjC;AAAiD,GAAnJ;AACA,EAAA,GAAG,CAAC,EAAJ,CAAO,SAAP,EAAmB,YAAD,IAAqC;AAAG,IAAA,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,YAArB;AAAoC,IAAA,IAAI,CAAC,IAAL,CAAU,aAAV,EAAyB,YAAzB;AAAyC,GAAvI;AACA,EAAA,GAAG,CAAC,EAAJ,CAAO,cAAP,EAAuB,CAAC,UAAD,EAAqB,YAArB,KAAyD;AAAG,IAAA,IAAI,CAAC,IAAL,CAAU,cAAV,EAA0B,UAA1B,EAAsC,YAAtC;AAAqD,IAAA,IAAI,CAAC,IAAL,CAAU,kBAAV,EAA8B,UAA9B,EAA0C,YAA1C;AAA0D,GAAlM;AACA,EAAA,GAAG,CAAC,EAAJ,CAAO,OAAP,EAAiB,KAAD,IAAiB;AAAG,IAAA,IAAI,CAAC,IAAL,CAAU,OAAV,EAAmB,KAAnB;AAA4B,GAAhE;AACH,CALM;AAQP;;;;;;;;;;AASA,OAAO,MAAM,gBAAgB,GAAG,OAAO,IAAP,EAAmB,MAAnB,EAAmC,UAAnC,KAA6G;AACzI,QAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAA/B,CAAtB;AACA,EAAA,UAAU,CAAC,IAAX,CAAgB,iBAAhB,EAAmC,MAAnC;;AAEA,QAAM,gBAAgB,GAAG,YAAW;AAChC,UAAM,YAAY,GAAG,MAAM,IAAI,CAAC,GAAL,CAAS,cAAT,EAA3B,CADgC,CAEhC;;AACA,IAAA,UAAU,CAAC,IAAX,CAAgB,cAAhB,EAAgC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,YAAY,GAAG,OAAO,CAAC,WAAnC,CAAhC,EAAiF,OAAjF;AACH,GAJD,CAJyI,CAUzI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAM,gBAAgB,EAAtB;AACA,EAAA,UAAU,CAAC,gBAAD,EAAmB,IAAnB,CAAV;AACA,SAAO,OAAP;AACH,CA7BM","sourceRoot":"","sourcesContent":["/**\n * Forward the events emitted by a Web3 PromiEvent to another PromiEvent.\n */\nexport const forwardWeb3Events = (src, dest /*, filterFn = (_name: string) => true*/) => {\n    src.on(\"transactionHash\", (eventReceipt) => { dest.emit(\"transactionHash\", eventReceipt); dest.emit(\"eth_transactionHash\", eventReceipt); });\n    src.on(\"receipt\", (eventReceipt) => { dest.emit(\"receipt\", eventReceipt); dest.emit(\"eth_receipt\", eventReceipt); });\n    src.on(\"confirmation\", (confNumber, eventReceipt) => { dest.emit(\"confirmation\", confNumber, eventReceipt); dest.emit(\"eth_confirmation\", confNumber, eventReceipt); });\n    src.on(\"error\", (error) => { dest.emit(\"error\", error); });\n};\n/**\n * Bind a promiEvent to an Ethereum transaction hash, sending confirmation\n * events. Web3 may export a similar function, which should be used instead if\n * it exists.\n *\n * @param web3 A Web3 instance for watching for confirmations.\n * @param txHash The Ethereum transaction has as a hex string.\n * @param promiEvent The existing promiEvent to forward events to.\n */\nexport const manualPromiEvent = async (web3, txHash, promiEvent) => {\n    const receipt = await web3.eth.getTransactionReceipt(txHash);\n    promiEvent.emit(\"transactionHash\", txHash);\n    const emitConfirmation = async () => {\n        const currentBlock = await web3.eth.getBlockNumber();\n        // tslint:disable-next-line: no-any\n        promiEvent.emit(\"confirmation\", Math.max(0, currentBlock - receipt.blockNumber), receipt);\n    };\n    // The following section should be revised to properly\n    // register the event emitter to the transaction's\n    // confirmations, so that on(\"confirmation\") works\n    // as expected. This code branch only occurs if a\n    // completed transfer is passed to RenJS again, which\n    // should not usually happen.\n    // Emit confirmation now and in 1s, since a common use\n    // case may be to have the following code, which doesn't\n    // work if we emit the txHash and confirmations\n    // with no time in between:\n    //\n    // ```js\n    // const txHash = await new Promise((resolve, reject) => lockAndMint.on(\"transactionHash\", resolve).catch(reject));\n    // lockAndMint.on(\"confirmation\", () => { /* do something */ });\n    // ```\n    await emitConfirmation();\n    setTimeout(emitConfirmation, 1000);\n    return receipt;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViM1Byb21pRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2ViM1Byb21pRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBK0UsR0FBMkIsRUFBRSxJQUE0QixDQUFBLHdDQUF3QyxFQUFFLEVBQUU7SUFDak4sR0FBRyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFlBQW9CLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckosR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFnQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekksR0FBRyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxVQUFrQixFQUFFLFlBQWdDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcE0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDO0FBR0Y7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLEVBQUUsSUFBVSxFQUFFLE1BQWMsRUFBRSxVQUFzRSxFQUFFLEVBQUU7SUFDekksTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdELFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFM0MsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLElBQUksRUFBRTtRQUNoQyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDckQsbUNBQW1DO1FBQ25DLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsT0FBYyxDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDO0lBRUYsc0RBQXNEO0lBQ3RELGtEQUFrRDtJQUNsRCxrREFBa0Q7SUFDbEQsaURBQWlEO0lBQ2pELHFEQUFxRDtJQUNyRCw2QkFBNkI7SUFFN0Isc0RBQXNEO0lBQ3RELHdEQUF3RDtJQUN4RCwrQ0FBK0M7SUFDL0MsMkJBQTJCO0lBQzNCLEVBQUU7SUFDRixRQUFRO0lBQ1IsbUhBQW1IO0lBQ25ILGdFQUFnRTtJQUNoRSxNQUFNO0lBQ04sTUFBTSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3pCLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuQyxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUMifQ=="]},"metadata":{},"sourceType":"module"}