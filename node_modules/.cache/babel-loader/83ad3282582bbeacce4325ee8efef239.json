{"ast":null,"code":"// OP_RETURN {data}\nvar bscript = require('../script');\n\nvar types = require('../types');\n\nvar typeforce = require('typeforce');\n\nvar OPS = require('bitcoin-ops');\n\nfunction check(script) {\n  var buffer = bscript.compile(script);\n  return buffer.length > 1 && buffer[0] === OPS.OP_RETURN;\n}\n\ncheck.toJSON = function () {\n  return 'null data output';\n};\n\nfunction encode(data) {\n  // Allow arrays types since decompile returns an array too\n  typeforce(typeforce.oneOf(types.Buffer, types.Array), data);\n  return bscript.compile([OPS.OP_RETURN].concat(data));\n}\n\nfunction decode(buffer) {\n  typeforce(check, buffer);\n  var chunks = bscript.decompile(buffer);\n  chunks.shift();\n  return chunks.length === 1 ? chunks[0] : chunks;\n}\n\nmodule.exports = {\n  output: {\n    check: check,\n    decode: decode,\n    encode: encode\n  }\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/bitgo-utxo-lib/src/templates/nulldata.js"],"names":["bscript","require","types","typeforce","OPS","check","script","buffer","compile","length","OP_RETURN","toJSON","encode","data","oneOf","Buffer","Array","concat","decode","chunks","decompile","shift","module","exports","output"],"mappings":"AAAA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,aAAD,CAAjB;;AAEA,SAASI,KAAT,CAAgBC,MAAhB,EAAwB;AACtB,MAAIC,MAAM,GAAGP,OAAO,CAACQ,OAAR,CAAgBF,MAAhB,CAAb;AAEA,SAAOC,MAAM,CAACE,MAAP,GAAgB,CAAhB,IACLF,MAAM,CAAC,CAAD,CAAN,KAAcH,GAAG,CAACM,SADpB;AAED;;AACDL,KAAK,CAACM,MAAN,GAAe,YAAY;AAAE,SAAO,kBAAP;AAA2B,CAAxD;;AAEA,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AACrB;AACAV,EAAAA,SAAS,CAACA,SAAS,CAACW,KAAV,CAAgBZ,KAAK,CAACa,MAAtB,EAA8Bb,KAAK,CAACc,KAApC,CAAD,EAA6CH,IAA7C,CAAT;AAEA,SAAOb,OAAO,CAACQ,OAAR,CAAgB,CAACJ,GAAG,CAACM,SAAL,EAAgBO,MAAhB,CAAuBJ,IAAvB,CAAhB,CAAP;AACD;;AAED,SAASK,MAAT,CAAiBX,MAAjB,EAAyB;AACvBJ,EAAAA,SAAS,CAACE,KAAD,EAAQE,MAAR,CAAT;AAEA,MAAIY,MAAM,GAAGnB,OAAO,CAACoB,SAAR,CAAkBb,MAAlB,CAAb;AAEAY,EAAAA,MAAM,CAACE,KAAP;AAEA,SAAOF,MAAM,CAACV,MAAP,KAAkB,CAAlB,GAAsBU,MAAM,CAAC,CAAD,CAA5B,GAAkCA,MAAzC;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAE;AACNnB,IAAAA,KAAK,EAAEA,KADD;AAENa,IAAAA,MAAM,EAAEA,MAFF;AAGNN,IAAAA,MAAM,EAAEA;AAHF;AADO,CAAjB","sourcesContent":["// OP_RETURN {data}\n\nvar bscript = require('../script')\nvar types = require('../types')\nvar typeforce = require('typeforce')\nvar OPS = require('bitcoin-ops')\n\nfunction check (script) {\n  var buffer = bscript.compile(script)\n\n  return buffer.length > 1 &&\n    buffer[0] === OPS.OP_RETURN\n}\ncheck.toJSON = function () { return 'null data output' }\n\nfunction encode (data) {\n  // Allow arrays types since decompile returns an array too\n  typeforce(typeforce.oneOf(types.Buffer, types.Array), data)\n\n  return bscript.compile([OPS.OP_RETURN].concat(data))\n}\n\nfunction decode (buffer) {\n  typeforce(check, buffer)\n\n  var chunks = bscript.decompile(buffer)\n\n  chunks.shift()\n\n  return chunks.length === 1 ? chunks[0] : chunks\n}\n\nmodule.exports = {\n  output: {\n    check: check,\n    decode: decode,\n    encode: encode\n  }\n}\n"]},"metadata":{},"sourceType":"script"}