{"ast":null,"code":"var XRPValidator = require('./ripple_validator');\n\nvar ETHValidator = require('./ethereum_validator');\n\nvar BTCValidator = require('./bitcoin_validator');\n\nvar XMRValidator = require('./monero_validator');\n\nvar NANOValidator = require('./nano_validator'); // defines P2PKH and P2SH address types for standard (prod) and testnet networks\n\n\nvar CURRENCIES = [{\n  name: 'bitcoin',\n  symbol: 'btc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoincash',\n  symbol: 'bch',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'litecoin',\n  symbol: 'ltc',\n  addressTypes: {\n    prod: ['30', '05', '32'],\n    testnet: ['6f', 'c4', '3a']\n  },\n  validator: BTCValidator\n}, {\n  name: 'peercoin',\n  symbol: 'ppc',\n  addressTypes: {\n    prod: ['37', '75'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'dogecoin',\n  symbol: 'doge',\n  addressTypes: {\n    prod: ['1e', '16'],\n    testnet: ['71', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'beavercoin',\n  symbol: 'bvc',\n  addressTypes: {\n    prod: ['19', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'freicoin',\n  symbol: 'frc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'protoshares',\n  symbol: 'pts',\n  addressTypes: {\n    prod: ['38', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'megacoin',\n  symbol: 'mec',\n  addressTypes: {\n    prod: ['32', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'primecoin',\n  symbol: 'xpm',\n  addressTypes: {\n    prod: ['17', '53'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'auroracoin',\n  symbol: 'aur',\n  addressTypes: {\n    prod: ['17', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'namecoin',\n  symbol: 'nmc',\n  addressTypes: {\n    prod: ['34'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'biocoin',\n  symbol: 'bio',\n  addressTypes: {\n    prod: ['19', '14'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'garlicoin',\n  symbol: 'grlc',\n  addressTypes: {\n    prod: ['26', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'vertcoin',\n  symbol: 'vtc',\n  addressTypes: {\n    prod: ['0x', '47'],\n    testnet: ['6f', 'c4']\n  },\n  segwitHrp: 'vtc',\n  validator: BTCValidator\n}, {\n  name: 'bitcoingold',\n  symbol: 'btg',\n  addressTypes: {\n    prod: ['26', '17'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'komodo',\n  symbol: 'kmd',\n  addressTypes: {\n    prod: ['3c', '55'],\n    testnet: ['0', '5']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoinz',\n  symbol: 'btcz',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoinprivate',\n  symbol: 'btcp',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1325', '13af'],\n    testnet: ['1957', '19e0']\n  },\n  validator: BTCValidator\n}, {\n  name: 'hush',\n  symbol: 'hush',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'snowgem',\n  symbol: 'sng',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1c28', '1c2d'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zcash',\n  symbol: 'zec',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zclassic',\n  symbol: 'zcl',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zencash',\n  symbol: 'zen',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['2089', '2096'],\n    testnet: ['2092', '2098']\n  },\n  validator: BTCValidator\n}, {\n  name: 'votecoin',\n  symbol: 'vot',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'decred',\n  symbol: 'dcr',\n  addressTypes: {\n    prod: ['073f', '071a'],\n    testnet: ['0f21', '0efc']\n  },\n  hashFunction: 'blake256',\n  expectedLength: 26,\n  validator: BTCValidator\n}, {\n  name: 'digibyte',\n  symbol: 'dgb',\n  addressTypes: {\n    prod: ['1e'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'ethereum',\n  symbol: 'eth',\n  validator: ETHValidator\n}, {\n  name: 'etherzero',\n  symbol: 'etz',\n  validator: ETHValidator\n}, {\n  name: 'ethereumclassic',\n  symbol: 'etc',\n  validator: ETHValidator\n}, {\n  name: 'callisto',\n  symbol: 'clo',\n  validator: ETHValidator\n}, {\n  name: 'ripple',\n  symbol: 'xrp',\n  validator: XRPValidator\n}, {\n  name: 'dash',\n  symbol: 'dash',\n  addressTypes: {\n    prod: ['4c', '10'],\n    testnet: ['8c', '13']\n  },\n  validator: BTCValidator\n}, {\n  name: 'neo',\n  symbol: 'neo',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'neogas',\n  symbol: 'gas',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'qtum',\n  symbol: 'qtum',\n  addressTypes: {\n    prod: ['3a', '32'],\n    testnet: ['78', '6e']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bankex',\n  symbol: 'bkx',\n  validator: ETHValidator\n}, {\n  name: 'monero',\n  symbol: 'xmr',\n  addressTypes: {\n    prod: ['18'],\n    testnet: ['53']\n  },\n  iAddressTypes: {\n    prod: ['19'],\n    testnet: ['54']\n  },\n  validator: XMRValidator\n}, {\n  name: 'nano',\n  symbol: 'nano',\n  validator: NANOValidator\n}, {\n  name: 'raiblocks',\n  symbol: 'xrb',\n  validator: NANOValidator\n}];\nmodule.exports = {\n  getByNameOrSymbol: function (currencyNameOrSymbol) {\n    var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n\n    for (var i = 0; i < CURRENCIES.length; i++) {\n      var currency = CURRENCIES[i];\n\n      if (currency.name === nameOrSymbol || currency.symbol === nameOrSymbol) {\n        return currency;\n      }\n    }\n\n    return null;\n  }\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/wallet-address-validator/src/currencies.js"],"names":["XRPValidator","require","ETHValidator","BTCValidator","XMRValidator","NANOValidator","CURRENCIES","name","symbol","addressTypes","prod","testnet","validator","segwitHrp","expectedLength","hashFunction","iAddressTypes","module","exports","getByNameOrSymbol","currencyNameOrSymbol","nameOrSymbol","toLowerCase","i","length","currency"],"mappings":"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","sourcesContent":["var XRPValidator = require('./ripple_validator');\nvar ETHValidator = require('./ethereum_validator');\nvar BTCValidator = require('./bitcoin_validator');\nvar XMRValidator = require('./monero_validator');\nvar NANOValidator = require('./nano_validator');\n\n// defines P2PKH and P2SH address types for standard (prod) and testnet networks\nvar CURRENCIES = [{\n    name: 'bitcoin',\n    symbol: 'btc',\n    addressTypes: {prod: ['00', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'bitcoincash',\n    symbol: 'bch',\n    addressTypes: {prod: ['00', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'litecoin',\n    symbol: 'ltc',\n    addressTypes: {prod: ['30', '05', '32'], testnet: ['6f', 'c4', '3a']},\n    validator: BTCValidator\n},{\n    name: 'peercoin',\n    symbol: 'ppc',\n    addressTypes: {prod: ['37', '75'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'dogecoin',\n    symbol: 'doge',\n    addressTypes: {prod: ['1e', '16'], testnet: ['71', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'beavercoin',\n    symbol: 'bvc',\n    addressTypes: {prod: ['19', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator,\n},{\n    name: 'freicoin',\n    symbol: 'frc',\n    addressTypes: {prod: ['00', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'protoshares',\n    symbol: 'pts',\n    addressTypes: {prod: ['38', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'megacoin',\n    symbol: 'mec',\n    addressTypes: {prod: ['32', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'primecoin',\n    symbol: 'xpm',\n    addressTypes: {prod: ['17', '53'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'auroracoin',\n    symbol: 'aur',\n    addressTypes: {prod: ['17', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'namecoin',\n    symbol: 'nmc',\n    addressTypes: {prod: ['34'], testnet: []},\n    validator: BTCValidator\n},{\n    name: 'biocoin',\n    symbol: 'bio',\n    addressTypes: {prod: ['19', '14'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'garlicoin',\n    symbol: 'grlc',\n    addressTypes: {prod: ['26', '05'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'vertcoin',\n    symbol: 'vtc',\n    addressTypes: {prod: ['0x', '47'], testnet: ['6f', 'c4']},\n    segwitHrp: 'vtc',\n    validator: BTCValidator\n},{\n    name: 'bitcoingold',\n    symbol: 'btg',\n    addressTypes: {prod: ['26', '17'], testnet: ['6f', 'c4']},\n    validator: BTCValidator\n},{\n    name: 'komodo',\n    symbol: 'kmd',\n    addressTypes: {prod: ['3c', '55'], testnet: ['0','5']},\n    validator: BTCValidator\n},{\n    name: 'bitcoinz',\n    symbol: 'btcz',\n    expectedLength: 26,\n    addressTypes: {prod: ['1cb8','1cbd'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'bitcoinprivate',\n    symbol: 'btcp',\n    expectedLength: 26,\n    addressTypes: {prod: ['1325','13af'], testnet: ['1957', '19e0']},\n    validator: BTCValidator\n},{\n    name: 'hush',\n    symbol: 'hush',\n    expectedLength: 26,\n    addressTypes: {prod: ['1cb8','1cbd'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'snowgem',\n    symbol: 'sng',\n    expectedLength: 26,\n    addressTypes: {prod: ['1c28','1c2d'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'zcash',\n    symbol: 'zec',\n    expectedLength: 26,\n    addressTypes: {prod: ['1cb8','1cbd'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'zclassic',\n    symbol: 'zcl',\n    expectedLength: 26,\n    addressTypes: {prod: ['1cb8','1cbd'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'zencash',\n    symbol: 'zen',\n    expectedLength: 26,\n    addressTypes: {prod: ['2089','2096'], testnet: ['2092','2098']},\n    validator: BTCValidator\n},{\n    name: 'votecoin',\n    symbol: 'vot',\n    expectedLength: 26,\n    addressTypes: {prod: ['1cb8','1cbd'], testnet: ['1d25', '1cba']},\n    validator: BTCValidator\n},{\n    name: 'decred',\n    symbol: 'dcr',\n    addressTypes: {prod: ['073f', '071a'], testnet: ['0f21', '0efc']},\n    hashFunction: 'blake256',\n    expectedLength: 26,\n    validator: BTCValidator\n},{\n    name: 'digibyte',\n    symbol: 'dgb',\n    addressTypes: {prod: ['1e'], testnet: []},\n    validator: BTCValidator\n},{\n    name: 'ethereum',\n    symbol: 'eth',\n    validator: ETHValidator,\n},{\n    name: 'etherzero',\n    symbol: 'etz',\n    validator: ETHValidator,\n},{\n    name: 'ethereumclassic',\n    symbol: 'etc',\n    validator: ETHValidator,\n},{\n    name: 'callisto',\n    symbol: 'clo',\n    validator: ETHValidator,\n},{\n    name: 'ripple',\n    symbol: 'xrp',\n    validator: XRPValidator,\n},{\n    name: 'dash',\n    symbol: 'dash',\n    addressTypes: {prod: ['4c', '10'], testnet: ['8c', '13']},\n    validator: BTCValidator\n},{\n    name: 'neo',\n    symbol: 'neo',\n    addressTypes: {prod: ['17'], testnet: []},\n    validator: BTCValidator\n},{\n    name: 'neogas',\n    symbol: 'gas',\n    addressTypes: {prod: ['17'], testnet: []},\n    validator: BTCValidator\n},{\n    name: 'qtum',\n    symbol: 'qtum',\n    addressTypes: {prod: ['3a', '32'], testnet: ['78', '6e']},\n    validator: BTCValidator\n},{\n    name: 'bankex',\n    symbol: 'bkx',\n    validator: ETHValidator\n},{\n    name: 'monero',\n    symbol: 'xmr',\n    addressTypes: {prod: ['18'], testnet: ['53']},\n    iAddressTypes: {prod: ['19'], testnet: ['54']},\n    validator: XMRValidator\n},{\n    name: 'nano',\n    symbol: 'nano',\n    validator: NANOValidator,\n},{\n    name: 'raiblocks',\n    symbol: 'xrb',\n    validator: NANOValidator,\n}];\n\n\nmodule.exports = {\n    getByNameOrSymbol: function (currencyNameOrSymbol) {\n        var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n        for (var i = 0; i < CURRENCIES.length; i++) {\n            var currency = CURRENCIES[i];\n            if(currency.name === nameOrSymbol || currency.symbol === nameOrSymbol) {\n                return currency;\n            }\n        }\n        return null;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}