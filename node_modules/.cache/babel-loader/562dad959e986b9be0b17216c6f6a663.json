{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar inherits = require('inherits');\n\nvar Input = require('./input');\n\nvar Output = require('../output');\n\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\n\nvar Signature = require('../../crypto/signature');\n\nvar Sighash = require('../sighash');\n\nvar PublicKey = require('../../publickey');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar TransactionSignature = require('../signature');\n/**\n * @constructor\n */\n\n\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {\n  /* jshint maxstatements:20 */\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys;\n  } else {\n    this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold, opts);\n  $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script), 'Provided public keys don\\'t hash to the provided output');\n  this.publicKeyIndex = {};\n\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n\n  this.threshold = threshold; // Empty array of signatures\n\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n  this.checkBitsField = new Uint8Array(this.publicKeys.length);\n}\n\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n  var self = this;\n  var results = [];\n\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript, self.output.satoshisBN, undefined, signingMethod),\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function (transaction, signature, signingMethod) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this.checkBitsField[this.publicKeyIndex[signature.publicKey.toString()]] = signature !== undefined ? 1 : 0;\n\n  this._updateScript(signingMethod, this.checkBitsField);\n\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function (signingMethod, checkBitsField) {\n  this.setScript(Script.buildP2SHMultisigIn(this.publicKeys, this.threshold, this._createSignatures(signingMethod), {\n    cachedMultisig: this.redeemScript,\n    checkBits: checkBitsField,\n    signingMethod\n  }));\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function (signingMethod) {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }), function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(signingMethod), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function (transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signingMethod = signingMethod || \"ecdsa\";\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.redeemScript, this.output.satoshisBN, undefined, signingMethod);\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\n\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\n\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function () {\n  return MultiSigScriptHashInput.OPCODES_SIZE + this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE + this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib-cash/lib/transaction/input/multisigscripthash.js"],"names":["_","require","inherits","Input","Output","$","Script","Signature","Sighash","PublicKey","BufferUtil","TransactionSignature","MultiSigScriptHashInput","input","pubkeys","threshold","signatures","opts","apply","arguments","self","publicKeys","noSorting","sortBy","publicKey","toString","redeemScript","buildMultisigOut","checkState","buildScriptHashOut","equals","output","script","publicKeyIndex","each","index","_deserializeSignatures","Array","length","checkBitsField","Uint8Array","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getSignatures","transaction","privateKey","sigtype","hashData","signingMethod","SIGHASH_ALL","SIGHASH_FORKID","results","push","prevTxId","outputIndex","inputIndex","sign","satoshisBN","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","setScript","buildP2SHMultisigIn","_createSignatures","cachedMultisig","checkBits","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","OPCODES_SIZE","SIGNATURE_SIZE","PUBKEY_SIZE","_estimateSize","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {\n  /* jshint maxstatements:20 */\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys\n  } else  {\n    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  }\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold, opts);\n  $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script),\n               'Provided public keys don\\'t hash to the provided output');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n  this.checkBitsField = new Uint8Array(this.publicKeys.length);\n}\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || (Signature.SIGHASH_ALL |  Signature.SIGHASH_FORKID);\n\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function(publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript, self.output.satoshisBN, undefined, signingMethod),\n        sigtype: sigtype\n      }));\n    }\n  });\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),\n                  'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this.checkBitsField[this.publicKeyIndex[signature.publicKey.toString()]] = (signature !== undefined) ? 1 : 0;\n  this._updateScript(signingMethod, this.checkBitsField);\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function(signingMethod, checkBitsField) {\n  this.setScript(Script.buildP2SHMultisigIn(\n    this.publicKeys,\n    this.threshold,\n    this._createSignatures(signingMethod),\n    { cachedMultisig: this.redeemScript, checkBits: checkBitsField, signingMethod }\n  ));\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function(signingMethod) {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(signingMethod),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signingMethod = signingMethod || \"ecdsa\";\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.redeemScript,\n      this.output.satoshisBN,\n      undefined,\n      signingMethod\n  );\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function() {\n  return MultiSigScriptHashInput.OPCODES_SIZE +\n    this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE +\n    this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;\n"]},"metadata":{},"sourceType":"script"}