{"ast":null,"code":"const typeforce = require('typeforce');\n\nconst types = require('../../types');\n\nconst version = require('./version');\n\nconst {\n  BufferReader,\n  BufferWriter\n} = require('../../bufferutils');\n\nconst NUM_JOINSPLITS_INPUTS = 2;\nconst NUM_JOINSPLITS_OUTPUTS = 2;\nconst NOTECIPHERTEXT_SIZE = 1 + 8 + 32 + 32 + 512 + 16;\nconst G1_PREFIX_MASK = 0x02;\nconst G2_PREFIX_MASK = 0x0a;\n\nclass ZcashBufferReader extends BufferReader {\n  constructor(buffer, offset, txVersion) {\n    super(buffer, offset);\n    typeforce(types.maybe(types.Int32), txVersion);\n    this.txVersion = txVersion;\n  }\n\n  readInt64() {\n    const a = this.buffer.readUInt32LE(this.offset);\n    let b = this.buffer.readInt32LE(this.offset + 4);\n    b *= 0x100000000;\n    this.offset += 8;\n    return b + a;\n  }\n\n  readCompressedG1() {\n    var yLsb = this.readUInt8() & 1;\n    var x = this.readSlice(32);\n    return {\n      x: x,\n      yLsb: yLsb\n    };\n  }\n\n  readCompressedG2() {\n    var yLsb = this.readUInt8() & 1;\n    var x = this.readSlice(64);\n    return {\n      x: x,\n      yLsb: yLsb\n    };\n  }\n\n  readZKProof() {\n    var zkproof;\n\n    if (this.txVersion >= version.SAPLING) {\n      zkproof = {\n        sA: this.readSlice(48),\n        sB: this.readSlice(96),\n        sC: this.readSlice(48)\n      };\n    } else {\n      zkproof = {\n        gA: this.readCompressedG1(),\n        gAPrime: this.readCompressedG1(),\n        gB: this.readCompressedG2(),\n        gBPrime: this.readCompressedG1(),\n        gC: this.readCompressedG1(),\n        gCPrime: this.readCompressedG1(),\n        gK: this.readCompressedG1(),\n        gH: this.readCompressedG1()\n      };\n    }\n\n    return zkproof;\n  }\n\n  readJoinSplit() {\n    var vpubOld = this.readUInt64();\n    var vpubNew = this.readUInt64();\n    var anchor = this.readSlice(32);\n    var nullifiers = [];\n\n    for (var j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n      nullifiers.push(this.readSlice(32));\n    }\n\n    var commitments = [];\n\n    for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n      commitments.push(this.readSlice(32));\n    }\n\n    var ephemeralKey = this.readSlice(32);\n    var randomSeed = this.readSlice(32);\n    var macs = [];\n\n    for (j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n      macs.push(this.readSlice(32));\n    }\n\n    var zkproof = this.readZKProof();\n    var ciphertexts = [];\n\n    for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n      ciphertexts.push(this.readSlice(NOTECIPHERTEXT_SIZE));\n    }\n\n    return {\n      vpubOld: vpubOld,\n      vpubNew: vpubNew,\n      anchor: anchor,\n      nullifiers: nullifiers,\n      commitments: commitments,\n      ephemeralKey: ephemeralKey,\n      randomSeed: randomSeed,\n      macs: macs,\n      zkproof: zkproof,\n      ciphertexts: ciphertexts\n    };\n  }\n\n  readShieldedSpend() {\n    var cv = this.readSlice(32);\n    var anchor = this.readSlice(32);\n    var nullifier = this.readSlice(32);\n    var rk = this.readSlice(32);\n    var zkproof = this.readZKProof();\n    var spendAuthSig = this.readSlice(64);\n    return {\n      cv: cv,\n      anchor: anchor,\n      nullifier: nullifier,\n      rk: rk,\n      zkproof: zkproof,\n      spendAuthSig: spendAuthSig\n    };\n  }\n\n  readShieldedOutput() {\n    var cv = this.readSlice(32);\n    var cmu = this.readSlice(32);\n    var ephemeralKey = this.readSlice(32);\n    var encCiphertext = this.readSlice(580);\n    var outCiphertext = this.readSlice(80);\n    var zkproof = this.readZKProof();\n    return {\n      cv: cv,\n      cmu: cmu,\n      ephemeralKey: ephemeralKey,\n      encCiphertext: encCiphertext,\n      outCiphertext: outCiphertext,\n      zkproof: zkproof\n    };\n  }\n\n}\n\nclass ZcashBufferWriter extends BufferWriter {\n  writeCompressedG1(i) {\n    this.writeUInt8(G1_PREFIX_MASK | i.yLsb);\n    this.writeSlice(i.x);\n  }\n\n  writeCompressedG2(i) {\n    this.writeUInt8(G2_PREFIX_MASK | i.yLsb);\n    this.writeSlice(i.x);\n  }\n\n}\n\nmodule.exports = {\n  ZcashBufferReader,\n  ZcashBufferWriter\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/bitgo-utxo-lib/src/forks/zcash/bufferutils.js"],"names":["typeforce","require","types","version","BufferReader","BufferWriter","NUM_JOINSPLITS_INPUTS","NUM_JOINSPLITS_OUTPUTS","NOTECIPHERTEXT_SIZE","G1_PREFIX_MASK","G2_PREFIX_MASK","ZcashBufferReader","constructor","buffer","offset","txVersion","maybe","Int32","readInt64","a","readUInt32LE","b","readInt32LE","readCompressedG1","yLsb","readUInt8","x","readSlice","readCompressedG2","readZKProof","zkproof","SAPLING","sA","sB","sC","gA","gAPrime","gB","gBPrime","gC","gCPrime","gK","gH","readJoinSplit","vpubOld","readUInt64","vpubNew","anchor","nullifiers","j","push","commitments","ephemeralKey","randomSeed","macs","ciphertexts","readShieldedSpend","cv","nullifier","rk","spendAuthSig","readShieldedOutput","cmu","encCiphertext","outCiphertext","ZcashBufferWriter","writeCompressedG1","i","writeUInt8","writeSlice","writeCompressedG2","module","exports"],"mappings":"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","sourcesContent":["const typeforce = require('typeforce')\nconst types = require('../../types')\nconst version = require('./version')\n\nconst { BufferReader, BufferWriter } = require('../../bufferutils')\n\nconst NUM_JOINSPLITS_INPUTS = 2\nconst NUM_JOINSPLITS_OUTPUTS = 2\nconst NOTECIPHERTEXT_SIZE = 1 + 8 + 32 + 32 + 512 + 16\n\nconst G1_PREFIX_MASK = 0x02\nconst G2_PREFIX_MASK = 0x0a\n\nclass ZcashBufferReader extends BufferReader {\n  constructor (buffer, offset, txVersion) {\n    super(buffer, offset)\n    typeforce(types.maybe(types.Int32), txVersion)\n    this.txVersion = txVersion\n  }\n\n  readInt64 () {\n    const a = this.buffer.readUInt32LE(this.offset)\n    let b = this.buffer.readInt32LE(this.offset + 4)\n    b *= 0x100000000\n    this.offset += 8\n    return b + a\n  }\n\n  readCompressedG1 () {\n    var yLsb = this.readUInt8() & 1\n    var x = this.readSlice(32)\n    return {\n      x: x,\n      yLsb: yLsb\n    }\n  }\n\n  readCompressedG2 () {\n    var yLsb = this.readUInt8() & 1\n    var x = this.readSlice(64)\n    return {\n      x: x,\n      yLsb: yLsb\n    }\n  }\n\n  readZKProof () {\n    var zkproof\n    if (this.txVersion >= version.SAPLING) {\n      zkproof = {\n        sA: this.readSlice(48),\n        sB: this.readSlice(96),\n        sC: this.readSlice(48)\n      }\n    } else {\n      zkproof = {\n        gA: this.readCompressedG1(),\n        gAPrime: this.readCompressedG1(),\n        gB: this.readCompressedG2(),\n        gBPrime: this.readCompressedG1(),\n        gC: this.readCompressedG1(),\n        gCPrime: this.readCompressedG1(),\n        gK: this.readCompressedG1(),\n        gH: this.readCompressedG1()\n      }\n    }\n    return zkproof\n  }\n\n  readJoinSplit () {\n    var vpubOld = this.readUInt64()\n    var vpubNew = this.readUInt64()\n    var anchor = this.readSlice(32)\n    var nullifiers = []\n    for (var j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n      nullifiers.push(this.readSlice(32))\n    }\n    var commitments = []\n    for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n      commitments.push(this.readSlice(32))\n    }\n    var ephemeralKey = this.readSlice(32)\n    var randomSeed = this.readSlice(32)\n    var macs = []\n    for (j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n      macs.push(this.readSlice(32))\n    }\n\n    var zkproof = this.readZKProof()\n    var ciphertexts = []\n    for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n      ciphertexts.push(this.readSlice(NOTECIPHERTEXT_SIZE))\n    }\n    return {\n      vpubOld: vpubOld,\n      vpubNew: vpubNew,\n      anchor: anchor,\n      nullifiers: nullifiers,\n      commitments: commitments,\n      ephemeralKey: ephemeralKey,\n      randomSeed: randomSeed,\n      macs: macs,\n      zkproof: zkproof,\n      ciphertexts: ciphertexts\n    }\n  }\n\n  readShieldedSpend () {\n    var cv = this.readSlice(32)\n    var anchor = this.readSlice(32)\n    var nullifier = this.readSlice(32)\n    var rk = this.readSlice(32)\n    var zkproof = this.readZKProof()\n    var spendAuthSig = this.readSlice(64)\n    return {\n      cv: cv,\n      anchor: anchor,\n      nullifier: nullifier,\n      rk: rk,\n      zkproof: zkproof,\n      spendAuthSig: spendAuthSig\n    }\n  }\n\n  readShieldedOutput () {\n    var cv = this.readSlice(32)\n    var cmu = this.readSlice(32)\n    var ephemeralKey = this.readSlice(32)\n    var encCiphertext = this.readSlice(580)\n    var outCiphertext = this.readSlice(80)\n    var zkproof = this.readZKProof()\n\n    return {\n      cv: cv,\n      cmu: cmu,\n      ephemeralKey: ephemeralKey,\n      encCiphertext: encCiphertext,\n      outCiphertext: outCiphertext,\n      zkproof: zkproof\n    }\n  }\n}\n\nclass ZcashBufferWriter extends BufferWriter {\n  writeCompressedG1 (i) {\n    this.writeUInt8(G1_PREFIX_MASK | i.yLsb)\n    this.writeSlice(i.x)\n  }\n\n  writeCompressedG2 (i) {\n    this.writeUInt8(G2_PREFIX_MASK | i.yLsb)\n    this.writeSlice(i.x)\n  }\n}\n\nmodule.exports = { ZcashBufferReader, ZcashBufferWriter }\n"]},"metadata":{},"sourceType":"script"}