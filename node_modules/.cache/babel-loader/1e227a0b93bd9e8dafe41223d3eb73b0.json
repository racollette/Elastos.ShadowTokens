{"ast":null,"code":"/* eslint-disable no-undef */\nimport createLogger from 'logging';\nimport EventEmitter from 'events';\nimport { isBrowser } from 'browser-or-node';\nimport { detect } from 'detect-browser';\nimport { versions, connectionCodeSchemas, connectionCodeSeparator, signalServer, signals, signal, rtc, iceConnectionState, stages, lifeCycle, communicationTypes } from './constants/index';\nimport { stunServers } from './config';\nconst logger = createLogger('MewConnectCommon');\nexport default class MewConnectCommon extends EventEmitter {\n  constructor(version = -1) {\n    super();\n    this.isBrowser = isBrowser;\n    this.jsonDetails = {\n      stunSrvers: [...stunServers],\n      signalServer: signalServer(version),\n      signals: { ...signal(version)\n      },\n      signalsV1: { ...signals.V1\n      },\n      signalsV2: { ...signals.V2\n      },\n      stages: { ...stages\n      },\n      lifeCycle: { ...lifeCycle\n      },\n      rtc: { ...rtc\n      },\n      communicationTypes: { ...communicationTypes\n      },\n      iceConnectionState: { ...iceConnectionState\n      },\n      connectionCodeSeparator,\n      version,\n      versions,\n      connectionCodeSchemas\n    };\n  }\n\n  isJSON(arg) {\n    try {\n      JSON.parse(arg);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static getBrowserRTC() {\n    if (typeof window === 'undefined') return null;\n    const wrtc = {\n      RTCPeerConnection: // eslint-disable-next-line no-undef\n      window.RTCPeerConnection || // eslint-disable-next-line no-undef\n      window.mozRTCPeerConnection || // eslint-disable-next-line no-undef\n      window.webkitRTCPeerConnection,\n      RTCSessionDescription: // eslint-disable-next-line no-undef\n      window.RTCSessionDescription || // eslint-disable-next-line no-undef\n      window.mozRTCSessionDescription || // eslint-disable-next-line no-undef\n      window.webkitRTCSessionDescription,\n      RTCIceCandidate: // eslint-disable-next-line no-undef\n      window.RTCIceCandidate || // eslint-disable-next-line no-undef\n      window.mozRTCIceCandidate || // eslint-disable-next-line no-undef\n      window.webkitRTCIceCandidate\n    };\n    if (!wrtc.RTCPeerConnection) return null;\n    return wrtc;\n  }\n\n  static checkWebRTCAvailable() {\n    const doesNotHaveWebRTC = MewConnectCommon.getBrowserRTC() == null;\n    return !doesNotHaveWebRTC; // return false\n  }\n\n  static checkBrowser() {\n    let browser = detect();\n\n    if (browser === null) {\n      browser = {\n        version: {\n          split: () => [1]\n        }\n      };\n    }\n\n    const browserVersion = browser.version.split(0, 1)[0];\n    /*\n     * Chrome > 23\n     * Firefox > 22\n     * Opera > 18\n     * Safari > 11 (caveats exist)\n     * Edge - none (RTCDataChannel not supported)\n     * IE - none\n     * */\n\n    if (typeof window !== 'undefined') {\n      if (browser.name === 'safari') {\n        // eslint-disable-next-line global-require\n        require('webrtc-adapter');\n\n        return MewConnectCommon.buildBrowserResult(true, 'Safari', `version: ${browser.version}`);\n      }\n\n      if (browser.name === 'ie') {\n        return MewConnectCommon.buildBrowserResult(true, 'Internet Explorer', '', true);\n      }\n\n      if (browser.name === 'edge') {\n        return MewConnectCommon.buildBrowserResult(true, 'Edge', `version: ${browser.version}`, true);\n      }\n\n      let name = '';\n      let minVersion = 0;\n\n      if (browser.name === 'opera') {\n        name = 'Opera';\n        minVersion = 18;\n      } else if (browser.name === 'firefox') {\n        name = 'Firefox';\n        minVersion = 22;\n      } else if (browser.name === 'chrome') {\n        name = 'Chrome';\n        minVersion = 23;\n      } else {\n        return MewConnectCommon.buildBrowserResult(false, '', '', true);\n      }\n\n      try {\n        if (minVersion >= +browserVersion) {\n          return MewConnectCommon.buildBrowserResult(true, name, `version: ${browserVersion}`);\n        }\n\n        return MewConnectCommon.buildBrowserResult(false, '', '');\n      } catch (e) {\n        logger.error(e);\n      }\n    }\n  }\n\n  static buildBrowserResult(status, browser, browserVersion, noSupport) {\n    return {\n      status,\n      browser,\n      browserVersion,\n      noSupport: noSupport || false\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectClient/MewConnectCommon.js"],"names":["createLogger","EventEmitter","isBrowser","detect","versions","connectionCodeSchemas","connectionCodeSeparator","signalServer","signals","signal","rtc","iceConnectionState","stages","lifeCycle","communicationTypes","stunServers","logger","MewConnectCommon","constructor","version","jsonDetails","stunSrvers","signalsV1","V1","signalsV2","V2","isJSON","arg","JSON","parse","e","getBrowserRTC","window","wrtc","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","RTCSessionDescription","mozRTCSessionDescription","webkitRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","webkitRTCIceCandidate","checkWebRTCAvailable","doesNotHaveWebRTC","checkBrowser","browser","split","browserVersion","name","require","buildBrowserResult","minVersion","error","status","noSupport"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport createLogger from 'logging';\nimport EventEmitter from 'events';\nimport { isBrowser } from 'browser-or-node';\nimport { detect } from 'detect-browser';\n\nimport {\n  versions,\n  connectionCodeSchemas,\n  connectionCodeSeparator,\n  signalServer,\n  signals,\n  signal,\n  rtc,\n  iceConnectionState,\n  stages,\n  lifeCycle,\n  communicationTypes\n} from './constants/index';\nimport { stunServers } from './config';\n\nconst logger = createLogger('MewConnectCommon');\n\nexport default class MewConnectCommon extends EventEmitter {\n  constructor(version = -1) {\n    super();\n\n    this.isBrowser = isBrowser;\n\n    this.jsonDetails = {\n      stunSrvers: [...stunServers],\n      signalServer: signalServer(version),\n      signals: {\n        ...signal(version)\n      },\n      signalsV1: {\n        ...signals.V1\n      },\n      signalsV2: {\n        ...signals.V2\n      },\n      stages: {\n        ...stages\n      },\n      lifeCycle: {\n        ...lifeCycle\n      },\n      rtc: {\n        ...rtc\n      },\n      communicationTypes: {\n        ...communicationTypes\n      },\n      iceConnectionState: {\n        ...iceConnectionState\n      },\n      connectionCodeSeparator,\n      version,\n      versions,\n      connectionCodeSchemas\n    };\n  }\n\n  isJSON(arg) {\n    try {\n      JSON.parse(arg);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static getBrowserRTC() {\n    if (typeof window === 'undefined') return null;\n    const wrtc = {\n      RTCPeerConnection:\n        // eslint-disable-next-line no-undef\n        window.RTCPeerConnection ||\n        // eslint-disable-next-line no-undef\n        window.mozRTCPeerConnection ||\n        // eslint-disable-next-line no-undef\n        window.webkitRTCPeerConnection,\n      RTCSessionDescription:\n        // eslint-disable-next-line no-undef\n        window.RTCSessionDescription ||\n        // eslint-disable-next-line no-undef\n        window.mozRTCSessionDescription ||\n        // eslint-disable-next-line no-undef\n        window.webkitRTCSessionDescription,\n      RTCIceCandidate:\n        // eslint-disable-next-line no-undef\n        window.RTCIceCandidate ||\n        // eslint-disable-next-line no-undef\n        window.mozRTCIceCandidate ||\n        // eslint-disable-next-line no-undef\n        window.webkitRTCIceCandidate\n    };\n    if (!wrtc.RTCPeerConnection) return null;\n    return wrtc;\n  }\n\n  static checkWebRTCAvailable() {\n    const doesNotHaveWebRTC = MewConnectCommon.getBrowserRTC() == null;\n    return !doesNotHaveWebRTC;\n    // return false\n  }\n\n  static checkBrowser() {\n    let browser = detect();\n    if (browser === null) {\n      browser = { version: { split: () => [1] } };\n    }\n    const browserVersion = browser.version.split(0, 1)[0];\n    /*\n     * Chrome > 23\n     * Firefox > 22\n     * Opera > 18\n     * Safari > 11 (caveats exist)\n     * Edge - none (RTCDataChannel not supported)\n     * IE - none\n     * */\n    if (typeof window !== 'undefined') {\n      if (browser.name === 'safari') {\n        // eslint-disable-next-line global-require\n        require('webrtc-adapter');\n        return MewConnectCommon.buildBrowserResult(\n          true,\n          'Safari',\n          `version: ${browser.version}`\n        );\n      }\n      if (browser.name === 'ie') {\n        return MewConnectCommon.buildBrowserResult(\n          true,\n          'Internet Explorer',\n          '',\n          true\n        );\n      }\n      if (browser.name === 'edge') {\n        return MewConnectCommon.buildBrowserResult(\n          true,\n          'Edge',\n          `version: ${browser.version}`,\n          true\n        );\n      }\n      let name = '';\n      let minVersion = 0;\n\n      if (browser.name === 'opera') {\n        name = 'Opera';\n        minVersion = 18;\n      } else if (browser.name === 'firefox') {\n        name = 'Firefox';\n        minVersion = 22;\n      } else if (browser.name === 'chrome') {\n        name = 'Chrome';\n        minVersion = 23;\n      } else {\n        return MewConnectCommon.buildBrowserResult(false, '', '', true);\n      }\n\n      try {\n        if (minVersion >= +browserVersion) {\n          return MewConnectCommon.buildBrowserResult(\n            true,\n            name,\n            `version: ${browserVersion}`\n          );\n        }\n        return MewConnectCommon.buildBrowserResult(false, '', '');\n      } catch (e) {\n        logger.error(e);\n      }\n    }\n  }\n\n  static buildBrowserResult(status, browser, browserVersion, noSupport) {\n    return {\n      status,\n      browser,\n      browserVersion,\n      noSupport: noSupport || false\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}