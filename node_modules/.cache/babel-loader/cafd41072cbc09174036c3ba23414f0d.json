{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar URL = require('url');\n\nvar Address = require('./address');\n\nvar Networks = require('./networks');\n\nvar Unit = require('./unit');\n/**\n * Bitcore URI\n *\n * Instantiate an URI from a bitcoin URI String or an Object. An URI instance\n * can be created with a bitcoin uri string or an object. All instances of\n * URI are valid, the static method isValid allows checking before instantiation.\n *\n * All standard parameters can be found as members of the class, the address\n * is represented using an {Address} instance and the amount is represented in\n * satoshis. Any other non-standard parameters can be found under the extra member.\n *\n * @example\n * ```javascript\n *\n * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');\n * console.log(uri.address, uri.amount);\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n * @returns {URI} A new valid and frozen instance of URI\n * @constructor\n */\n\n\nvar URI = function (data, knownParams) {\n  if (!(this instanceof URI)) {\n    return new URI(data, knownParams);\n  }\n\n  this.extras = {};\n  this.knownParams = knownParams || [];\n  this.address = this.network = this.amount = this.message = null;\n\n  if (typeof data === 'string') {\n    var params = URI.parse(data);\n\n    if (params.amount) {\n      params.amount = this._parseAmount(params.amount);\n    }\n\n    this._fromObject(params);\n  } else if (typeof data === 'object') {\n    this._fromObject(data);\n  } else {\n    throw new TypeError('Unrecognized data format.');\n  }\n};\n/**\n * Instantiate a URI from a String\n *\n * @param {string} str - JSON string or object of the URI\n * @returns {URI} A new instance of a URI\n */\n\n\nURI.fromString = function fromString(str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  return new URI(str);\n};\n/**\n * Instantiate a URI from an Object\n *\n * @param {Object} data - object of the URI\n * @returns {URI} A new instance of a URI\n */\n\n\nURI.fromObject = function fromObject(json) {\n  return new URI(json);\n};\n/**\n * Check if an bitcoin URI string is valid\n *\n * @example\n * ```javascript\n *\n * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');\n * // true\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @returns {boolean} Result of uri validation\n */\n\n\nURI.isValid = function (arg, knownParams) {\n  try {\n    new URI(arg, knownParams);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Convert a bitcoin URI string into a simple object.\n *\n * @param {string} uri - A bitcoin URI string\n * @throws {TypeError} Invalid bitcoin URI\n * @returns {Object} An object with the parsed params\n */\n\n\nURI.parse = function (uri) {\n  var info = URL.parse(uri, true);\n\n  if (Networks.get(info.protocol.replace(':', ''), 'prefix')) {\n    // workaround to host insensitiveness\n    var group = /[^:]*:\\/?\\/?([^?]*)/.exec(uri);\n    info.query.address = group && group[1] || undefined;\n    return info.query;\n  } else {\n    throw new TypeError('Invalid bitcoin URI');\n  }\n};\n\nURI.Members = ['address', 'amount', 'message', 'label', 'r'];\n/**\n * Internal function to load the URI instance with an object.\n *\n * @param {Object} obj - Object with the information\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n */\n\nURI.prototype._fromObject = function (obj) {\n  /* jshint maxcomplexity: 10 */\n  if (!Address.isValid(obj.address)) {\n    throw new TypeError('Invalid bitcoin address');\n  }\n\n  this.address = new Address(obj.address);\n  this.network = this.address.network;\n  this.amount = obj.amount;\n\n  for (var key in obj) {\n    if (key === 'address' || key === 'amount') {\n      continue;\n    }\n\n    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {\n      throw Error('Unknown required argument ' + key);\n    }\n\n    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;\n    destination[key] = obj[key];\n  }\n};\n/**\n * Internal function to transform a BTC string amount into satoshis\n *\n * @param {string} amount - Amount BTC string\n * @throws {TypeError} Invalid amount\n * @returns {Object} Amount represented in satoshis\n */\n\n\nURI.prototype._parseAmount = function (amount) {\n  amount = Number(amount);\n\n  if (isNaN(amount)) {\n    throw new TypeError('Invalid amount');\n  }\n\n  return Unit.fromBTC(amount).toSatoshis();\n};\n\nURI.prototype.toObject = URI.prototype.toJSON = function toObject() {\n  var json = {};\n\n  for (var i = 0; i < URI.Members.length; i++) {\n    var m = URI.Members[i];\n\n    if (this.hasOwnProperty(m) && typeof this[m] !== 'undefined') {\n      json[m] = this[m].toString();\n    }\n  }\n\n  _.extend(json, this.extras);\n\n  return json;\n};\n/**\n * Will return a the string representation of the URI\n *\n * @returns {string} Bitcoin URI string\n */\n\n\nURI.prototype.toString = function () {\n  var query = {};\n\n  if (this.amount) {\n    query.amount = Unit.fromSatoshis(this.amount).toBTC();\n  }\n\n  if (this.message) {\n    query.message = this.message;\n  }\n\n  if (this.label) {\n    query.label = this.label;\n  }\n\n  if (this.r) {\n    query.r = this.r;\n  }\n\n  _.extend(query, this.extras);\n\n  return URL.format({\n    protocol: Networks.get(this.network, 'name').prefix + ':',\n    host: this.address.toString(true),\n    query: query\n  });\n};\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin URI\n */\n\n\nURI.prototype.inspect = function () {\n  return '<URI: ' + this.toString() + '>';\n};\n\nmodule.exports = URI;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib-cash/lib/uri.js"],"names":["_","require","URL","Address","Networks","Unit","URI","data","knownParams","extras","address","network","amount","message","params","parse","_parseAmount","_fromObject","TypeError","fromString","str","fromObject","json","isValid","arg","err","uri","info","get","protocol","replace","group","exec","query","undefined","Members","prototype","obj","key","indexOf","Error","destination","Number","isNaN","fromBTC","toSatoshis","toObject","toJSON","i","length","m","hasOwnProperty","toString","extend","fromSatoshis","toBTC","label","r","format","prefix","host","inspect","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar URL = require('url');\n\nvar Address = require('./address');\nvar Networks = require('./networks');\nvar Unit = require('./unit');\n\n/**\n * Bitcore URI\n *\n * Instantiate an URI from a bitcoin URI String or an Object. An URI instance\n * can be created with a bitcoin uri string or an object. All instances of\n * URI are valid, the static method isValid allows checking before instantiation.\n *\n * All standard parameters can be found as members of the class, the address\n * is represented using an {Address} instance and the amount is represented in\n * satoshis. Any other non-standard parameters can be found under the extra member.\n *\n * @example\n * ```javascript\n *\n * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');\n * console.log(uri.address, uri.amount);\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n * @returns {URI} A new valid and frozen instance of URI\n * @constructor\n */\nvar URI = function(data, knownParams) {\n  if (!(this instanceof URI)) {\n    return new URI(data, knownParams);\n  }\n\n  this.extras = {};\n  this.knownParams = knownParams || [];\n  this.address = this.network = this.amount = this.message = null;\n\n  if (typeof(data) === 'string') {\n    var params = URI.parse(data);\n    if (params.amount) {\n      params.amount = this._parseAmount(params.amount);\n    }\n    this._fromObject(params);\n  } else if (typeof(data) === 'object') {\n    this._fromObject(data);\n  } else {\n    throw new TypeError('Unrecognized data format.');\n  }\n};\n\n/**\n * Instantiate a URI from a String\n *\n * @param {string} str - JSON string or object of the URI\n * @returns {URI} A new instance of a URI\n */\nURI.fromString = function fromString(str) {\n  if (typeof(str) !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return new URI(str);\n};\n\n/**\n * Instantiate a URI from an Object\n *\n * @param {Object} data - object of the URI\n * @returns {URI} A new instance of a URI\n */\nURI.fromObject = function fromObject(json) {\n  return new URI(json);\n};\n\n/**\n * Check if an bitcoin URI string is valid\n *\n * @example\n * ```javascript\n *\n * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');\n * // true\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @returns {boolean} Result of uri validation\n */\nURI.isValid = function(arg, knownParams) {\n  try {\n    new URI(arg, knownParams);\n  } catch (err) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Convert a bitcoin URI string into a simple object.\n *\n * @param {string} uri - A bitcoin URI string\n * @throws {TypeError} Invalid bitcoin URI\n * @returns {Object} An object with the parsed params\n */\nURI.parse = function(uri) {\n  var info = URL.parse(uri, true);\n  if (Networks.get( info.protocol.replace(':', '') ,'prefix')) {\n    // workaround to host insensitiveness\n    var group = /[^:]*:\\/?\\/?([^?]*)/.exec(uri);\n    info.query.address = group && group[1] || undefined;\n\n    return info.query;\n} else {\n  throw new TypeError('Invalid bitcoin URI');\n  }\n};\n\nURI.Members = ['address', 'amount', 'message', 'label', 'r'];\n\n/**\n * Internal function to load the URI instance with an object.\n *\n * @param {Object} obj - Object with the information\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n */\nURI.prototype._fromObject = function(obj) {\n  /* jshint maxcomplexity: 10 */\n\n  if (!Address.isValid(obj.address)) {\n    throw new TypeError('Invalid bitcoin address');\n  }\n\n  this.address = new Address(obj.address);\n  this.network = this.address.network;\n  this.amount = obj.amount;\n\n  for (var key in obj) {\n    if (key === 'address' || key === 'amount') {\n      continue;\n    }\n\n    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {\n      throw Error('Unknown required argument ' + key);\n    }\n\n    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;\n    destination[key] = obj[key];\n  }\n};\n\n/**\n * Internal function to transform a BTC string amount into satoshis\n *\n * @param {string} amount - Amount BTC string\n * @throws {TypeError} Invalid amount\n * @returns {Object} Amount represented in satoshis\n */\nURI.prototype._parseAmount = function(amount) {\n  amount = Number(amount);\n  if (isNaN(amount)) {\n    throw new TypeError('Invalid amount');\n  }\n  return Unit.fromBTC(amount).toSatoshis();\n};\n\nURI.prototype.toObject = URI.prototype.toJSON = function toObject() {\n  var json = {};\n  for (var i = 0; i < URI.Members.length; i++) {\n    var m = URI.Members[i];\n    if (this.hasOwnProperty(m) && typeof(this[m]) !== 'undefined') {\n      json[m] = this[m].toString();\n    }\n  }\n  _.extend(json, this.extras);\n  return json;\n};\n\n/**\n * Will return a the string representation of the URI\n *\n * @returns {string} Bitcoin URI string\n */\nURI.prototype.toString = function() {\n  var query = {};\n  if (this.amount) {\n    query.amount = Unit.fromSatoshis(this.amount).toBTC();\n  }\n  if (this.message) {\n    query.message = this.message;\n  }\n  if (this.label) {\n    query.label = this.label;\n  }\n  if (this.r) {\n    query.r = this.r;\n  }\n  _.extend(query, this.extras);\n\n  return URL.format({\n    protocol: Networks.get(this.network ,'name').prefix + ':',\n    host: this.address.toString(true),\n    query: query\n  });\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin URI\n */\nURI.prototype.inspect = function() {\n  return '<URI: ' + this.toString() + '>';\n};\n\nmodule.exports = URI;\n"]},"metadata":{},"sourceType":"script"}