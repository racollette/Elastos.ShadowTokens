{"ast":null,"code":"import Web3WSProvider from './ws-web3-provider';\nimport { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from '../middleware';\nimport workerTimer from '../../helpers/webWorkerTimer/index';\nimport { ethSendTransaction, ethSignTransaction, ethSign, personalSign, ecRecover, ethAccounts, ethCoinbase, ethGetTransactionCount, netVersion } from '../methods/index';\n\nclass WSProvider {\n  constructor(host, options, store, eventHub) {\n    this.wsProvider = new Web3WSProvider(host, options);\n    this.oWSProvider = new Web3WSProvider(host, options);\n    this.lastMessage = new Date().getTime();\n\n    const keepAlive = () => {\n      if (this.oWSProvider.connection.readyState === this.oWSProvider.connection.OPEN) this.wsProvider.connection.send('{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":0}');\n      if (this.wsProvider.connection.readyState === this.wsProvider.connection.OPEN) this.oWSProvider.connection.send('{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":1}');\n\n      if (!Object.is(this.wsProvider, store.state.web3.currentProvider) && this.lastMessage + 10 * 60 * 1000 < new Date().getTime() //wait extra 10 minutes\n      ) {\n          this.wsProvider.disconnect();\n          this.oWSProvider.disconnect();\n          workerTimer.clearInterval(this.keepAliveTimer);\n        }\n    };\n\n    this.keepAliveTimer = workerTimer.setInterval(keepAlive, 5000);\n    const _this = this.wsProvider;\n    delete this.wsProvider['send'];\n\n    const rawSend = (payload, callback) => {\n      this.lastMessage = new Date().getTime();\n\n      if (_this.connection.readyState === _this.connection.CONNECTING) {\n        setTimeout(() => {\n          this.wsProvider.send(payload, callback);\n        }, 10);\n        return;\n      }\n\n      if (_this.connection.readyState !== _this.connection.OPEN) {\n        if (typeof _this.connection.onerror === 'function') {\n          _this.connection.onerror(new Error('connection not open'));\n        }\n\n        callback(new Error('connection not open'));\n        return;\n      }\n\n      const req = {\n        payload,\n        store,\n        requestManager: new Web3RequestManager(this.oWSProvider),\n        eventHub\n      };\n      const middleware = new MiddleWare();\n      middleware.use(ethSendTransaction);\n      middleware.use(ethSignTransaction);\n      middleware.use(ethSign);\n      middleware.use(personalSign);\n      middleware.use(ecRecover);\n      middleware.use(ethAccounts);\n      middleware.use(ethGetTransactionCount);\n      middleware.use(ethCoinbase);\n      middleware.use(netVersion);\n      middleware.run(req, callback).then(() => {\n        _this.connection.send(JSON.stringify(payload));\n\n        _this._addResponseCallback(payload, callback);\n      });\n    };\n\n    const handler = {\n      apply: function (target, thisArg, argumentsList) {\n        if (argumentsList.length === 1) {\n          if (argumentsList[0] === 'eth_requestAccounts' || argumentsList[0] === 'eth_accounts') {\n            return new Promise((resolve, reject) => {\n              const callback = (err, response) => {\n                if (err) reject(err);else resolve(response.result);\n              };\n\n              const payload = {\n                id: 1,\n                method: 'eth_accounts'\n              };\n              target(payload, callback);\n            });\n          }\n        }\n\n        return target(argumentsList[0], argumentsList[1]);\n      }\n    };\n    this.wsProvider.send = new Proxy(rawSend, handler);\n    return this.wsProvider;\n  }\n\n}\n\nexport default WSProvider;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/providers/ws-provider.js"],"names":["Web3WSProvider","Manager","Web3RequestManager","MiddleWare","workerTimer","ethSendTransaction","ethSignTransaction","ethSign","personalSign","ecRecover","ethAccounts","ethCoinbase","ethGetTransactionCount","netVersion","WSProvider","constructor","host","options","store","eventHub","wsProvider","oWSProvider","lastMessage","Date","getTime","keepAlive","connection","readyState","OPEN","send","Object","is","state","web3","currentProvider","disconnect","clearInterval","keepAliveTimer","setInterval","_this","rawSend","payload","callback","CONNECTING","setTimeout","onerror","Error","req","requestManager","middleware","use","run","then","JSON","stringify","_addResponseCallback","handler","apply","target","thisArg","argumentsList","length","Promise","resolve","reject","err","response","result","id","method","Proxy"],"mappings":"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","sourcesContent":["import Web3WSProvider from './ws-web3-provider';\nimport { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from '../middleware';\nimport workerTimer from '../../helpers/webWorkerTimer/index';\nimport {\n  ethSendTransaction,\n  ethSignTransaction,\n  ethSign,\n  personalSign,\n  ecRecover,\n  ethAccounts,\n  ethCoinbase,\n  ethGetTransactionCount,\n  netVersion\n} from '../methods/index';\n\nclass WSProvider {\n  constructor(host, options, store, eventHub) {\n    this.wsProvider = new Web3WSProvider(host, options);\n    this.oWSProvider = new Web3WSProvider(host, options);\n    this.lastMessage = new Date().getTime();\n    const keepAlive = () => {\n      if (\n        this.oWSProvider.connection.readyState ===\n        this.oWSProvider.connection.OPEN\n      )\n        this.wsProvider.connection.send(\n          '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":0}'\n        );\n      if (\n        this.wsProvider.connection.readyState ===\n        this.wsProvider.connection.OPEN\n      )\n        this.oWSProvider.connection.send(\n          '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":1}'\n        );\n      if (\n        !Object.is(this.wsProvider, store.state.web3.currentProvider) &&\n        this.lastMessage + 10 * 60 * 1000 < new Date().getTime() //wait extra 10 minutes\n      ) {\n        this.wsProvider.disconnect();\n        this.oWSProvider.disconnect();\n        workerTimer.clearInterval(this.keepAliveTimer);\n      }\n    };\n    this.keepAliveTimer = workerTimer.setInterval(keepAlive, 5000);\n    const _this = this.wsProvider;\n    delete this.wsProvider['send'];\n    const rawSend = (payload, callback) => {\n      this.lastMessage = new Date().getTime();\n      if (_this.connection.readyState === _this.connection.CONNECTING) {\n        setTimeout(() => {\n          this.wsProvider.send(payload, callback);\n        }, 10);\n        return;\n      }\n      if (_this.connection.readyState !== _this.connection.OPEN) {\n        if (typeof _this.connection.onerror === 'function') {\n          _this.connection.onerror(new Error('connection not open'));\n        }\n        callback(new Error('connection not open'));\n        return;\n      }\n      const req = {\n        payload,\n        store,\n        requestManager: new Web3RequestManager(this.oWSProvider),\n        eventHub\n      };\n\n      const middleware = new MiddleWare();\n      middleware.use(ethSendTransaction);\n      middleware.use(ethSignTransaction);\n      middleware.use(ethSign);\n      middleware.use(personalSign);\n      middleware.use(ecRecover);\n      middleware.use(ethAccounts);\n      middleware.use(ethGetTransactionCount);\n      middleware.use(ethCoinbase);\n      middleware.use(netVersion);\n      middleware.run(req, callback).then(() => {\n        _this.connection.send(JSON.stringify(payload));\n        _this._addResponseCallback(payload, callback);\n      });\n    };\n    const handler = {\n      apply: function(target, thisArg, argumentsList) {\n        if (argumentsList.length === 1) {\n          if (\n            argumentsList[0] === 'eth_requestAccounts' ||\n            argumentsList[0] === 'eth_accounts'\n          ) {\n            return new Promise((resolve, reject) => {\n              const callback = (err, response) => {\n                if (err) reject(err);\n                else resolve(response.result);\n              };\n              const payload = {\n                id: 1,\n                method: 'eth_accounts'\n              };\n              target(payload, callback);\n            });\n          }\n        }\n        return target(argumentsList[0], argumentsList[1]);\n      }\n    };\n    this.wsProvider.send = new Proxy(rawSend, handler);\n    return this.wsProvider;\n  }\n}\n\nexport default WSProvider;\n"]},"metadata":{},"sourceType":"module"}