{"ast":null,"code":"import * as Sentry from \"@sentry/react\";\nimport firebase from \"firebase\";\nimport GatewayJS from \"@renproject/gateway\";\nimport { randomBytes } from \"@renproject/utils\";\nimport { getStore } from \"../services/storeService\";\nexport const MIN_TX_AMOUNTS = {\n  ela: 0.00035036,\n  eth: 0.00035036,\n  usdt: 0.00035036,\n  wela: 0.00035036,\n  weth: 0.00035036,\n  wusdt: 0.00035036\n};\nexport const FEE_STRUCTURE = {\n  ela: 0,\n  eth: 0,\n  usdt: 0,\n  wela: 0,\n  weth: 0,\n  wusdt: 0\n};\nexport const windowBlocker = function (event) {\n  // Cancel the event as stated by the standard.\n  event.preventDefault();\n  const msg = \"WARNING: closing the browser window now may result in loss of funds. Are you sure?\"; // Chrome requires returnValue to be set.\n\n  event.returnValue = msg;\n  return msg;\n};\nexport const setWindowBlocker = function () {\n  window.addEventListener(\"beforeunload\", windowBlocker);\n};\nexport const removeWindowBlocker = function () {\n  window.removeEventListener(\"beforeunload\", windowBlocker);\n};\n/**\n * Create/Update/Delete Transactions on Firebase and 3box\n */\n\nexport const addTx = async (tx, id) => {\n  const store = getStore();\n  const storeString = \"convert.transactions\"; // const space = store.get('space')\n\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n  const localWeb3Address = store.get(\"localWeb3Address\");\n  const fsSignature = store.get(\"fsSignature\");\n\n  if (!fsEnabled) {\n    throw new Error(`Unable to create transaction - not connected to database.`);\n  } // add timestamps\n\n\n  const timestamp = firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n  tx.created = timestamp;\n  tx.updated = timestamp;\n  const txs = store.get(storeString);\n  const newTxs = txs.concat([tx]); // update state\n\n  store.set(storeString, newTxs); // update localStorage just in case\n\n  localStorage.setItem(storeString, JSON.stringify(newTxs)); // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n\n  id = id || tx.id; // update firebase\n\n  try {\n    db.collection(\"transactions\").doc(id).set({\n      user: localWeb3Address.toLowerCase(),\n      walletSignature: fsSignature,\n      id,\n      updated: timestamp,\n      data: JSON.stringify(tx)\n    });\n  } catch (e) {\n    const errorMessage = String(e && e.message);\n    Sentry.withScope(function (scope) {\n      scope.setTag(\"error-hint\", \"storing transaction\");\n      Sentry.captureException(e);\n    });\n    e.message = `Unable to store transaction to database${errorMessage ? `: ${errorMessage}` : \".\"}`;\n    throw e;\n  }\n};\nexport const updateTx = async newTx => {\n  const store = getStore();\n  const storeString = \"convert.transactions\"; // const space = store.get('space')\n\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n  const localWeb3Address = store.get(\"localWeb3Address\"); // update timestamp\n\n  newTx.updated = firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n  const txs = store.get(storeString);\n  const filtered = txs.filter(t => t.id !== newTx.id);\n  const newTxs = filtered.concat([newTx]); // update state\n\n  store.set(storeString, newTxs); // use localStorage\n\n  localStorage.setItem(storeString, JSON.stringify(newTxs)); // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n  // update firebase\n\n  if (fsEnabled) {\n    var _docData;\n\n    const doc = db.collection(\"transactions\").doc(newTx.id);\n    let docData;\n\n    try {\n      docData = await doc.get();\n    } catch (e) {\n      console.error(e);\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"missing transaction\");\n        Sentry.captureException(e);\n      });\n    }\n\n    if ((_docData = docData) === null || _docData === void 0 ? void 0 : _docData.exists) {\n      try {\n        await doc.update({\n          data: JSON.stringify(newTx),\n          user: localWeb3Address.toLowerCase(),\n          updated: newTx.updated\n        });\n      } catch (e) {\n        console.error(e);\n        Sentry.withScope(function (scope) {\n          scope.setTag(\"error-hint\", \"adding transaction\");\n          Sentry.captureException(e);\n        });\n      }\n    } else {\n      await addTx(newTx, newTx.id);\n    }\n  }\n};\nexport const removeTx = async tx => {\n  const store = getStore();\n  const storeString = \"convert.transactions\"; // const space = store.get('space')\n\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n  const txs = store.get(storeString);\n  const newTxs = txs.filter(t => t.id !== tx.id); // update local state\n\n  store.set(storeString, newTxs); // update localStorage just in case\n\n  localStorage.setItem(storeString, JSON.stringify(newTxs)); // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n  // update firebase\n\n  if (fsEnabled) {\n    try {\n      await db.collection(\"transactions\").doc(tx.id).delete();\n    } catch (e) {\n      console.error(e);\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"removing transaction\");\n        Sentry.captureException(e);\n      });\n    }\n  }\n};\nexport const txExists = function (tx) {\n  return getStore().get(\"convert.transactions\").filter(t => t.id === tx.id).length > 0;\n};\n/**\n * Calculate Fees for a Transaction\n */\n\nexport const gatherFeeData = async function () {\n  const store = getStore();\n  const amount = store.get(\"convert.amount\");\n  const fees = FEE_STRUCTURE;\n  console.log(fees);\n  let selectedAsset = store.get(\"selectedAsset\");\n  const selectedDirection = store.get(\"convert.selectedDirection\");\n  const fixedFeeKey = selectedDirection ? \"release\" : \"lock\";\n  const dynamicFeeKey = selectedDirection ? \"burn\" : \"mint\"; /// fix selectedAsset\n  // selectedAsset = 'eth'\n\n  if (!amount) {\n    return;\n  }\n\n  const renVMFee = Number(Number(amount) * Number(fees[selectedAsset].ethereum[dynamicFeeKey] / 10000)).toFixed(6);\n  const fixedFee = Number(fees[selectedAsset][fixedFeeKey] / 10 ** 8);\n  const total = Number(amount - Number(renVMFee) - fixedFee) > 0 ? Number(amount - Number(renVMFee) - fixedFee).toFixed(6) : \"0.000000\";\n  store.set(\"convert.renVMFee\", renVMFee);\n  store.set(\"convert.networkFee\", fixedFee);\n  store.set(\"convert.conversionTotal\", total);\n};\n/**\n * Mint and Burn\n */\n\nexport const initGJSDeposit = async function (tx) {\n  const {\n    amount\n  } = tx;\n  const store = getStore();\n  const {\n    gjs,\n    localWeb3,\n    localWeb3Address,\n    selectedAsset\n  } = store.getState();\n  const storableData = {\n    sendToken: GatewayJS.Tokens[selectedAsset.toUpperCase()].Mint,\n    // every source asset for now uses the same unit number as BTC\n    sendAmount: GatewayJS.utils.value(amount, \"btc\").sats().toString(),\n    sendTo: localWeb3Address\n  };\n  const data = { ...storableData,\n    web3Provider: localWeb3.currentProvider\n  };\n  const preOpenTrades = Array.from((await gjs.getGateways()).values());\n  const id = randomBytes(8);\n  await addTx(storableData, id);\n  let trade = null;\n  const open = gjs.open(data, id);\n  open.result().on(\"status\", async status => {\n    console.info(`[GOT STATUS] ${status}`);\n\n    if (status === GatewayJS.LockAndMintStatus.Committed) {\n      const postOpenTrades = Array.from((await gjs.getGateways()).values());\n\n      if (preOpenTrades.length !== postOpenTrades.length) {\n        const preOpenIds = preOpenTrades.map(t => t.id);\n        postOpenTrades.map(pot => {\n          // if unique, add to 3box\n          if (preOpenIds.indexOf(pot.id)) {\n            updateTx(pot);\n            trade = pot;\n          }\n        });\n      }\n    }\n  }).on(\"transferUpdated\", transfer => {\n    console.info(`[GOT TRANSFER]`, transfer);\n\n    if (!transfer.archived && transfer.status !== GatewayJS.LockAndMintStatus.Committed) {\n      updateTx(transfer);\n    }\n  }).catch(error => {\n    if (error.message === \"Transfer cancelled by user\") {\n      // remove from 3box\n      removeTx(trade);\n    } else {\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"gatewayjs error\");\n        Sentry.captureException(error);\n      });\n    }\n  });\n  store.set(\"confirmTx\", null);\n  store.set(\"confirmAction\", \"\");\n};\nexport const initGJSWithdraw = async function (tx) {\n  const {\n    amount,\n    destAddress\n  } = tx;\n  const store = getStore();\n  const {\n    gjs,\n    localWeb3,\n    selectedAsset\n  } = store.getState();\n  const storableData = {\n    sendToken: GatewayJS.Tokens[selectedAsset.toUpperCase()].Burn,\n    // every source asset for now uses the same unit number as BTC\n    sendAmount: GatewayJS.utils.value(amount, \"btc\").sats().toString(),\n    sendTo: destAddress,\n    web3Provider: localWeb3.currentProvider\n  };\n  const data = { ...storableData,\n    web3Provider: localWeb3.currentProvider\n  };\n  const preOpenTrades = Array.from((await gjs.getGateways()).values());\n  const id = randomBytes(8);\n  await addTx(storableData, id);\n  let trade = null;\n  const open = gjs.open(data, id);\n  open.result().on(\"status\", async status => {\n    console.info(`[GOT STATUS] ${status}`);\n\n    if (status === GatewayJS.BurnAndReleaseStatus.Committed) {\n      const postOpenTrades = Array.from((await gjs.getGateways()).values());\n\n      if (preOpenTrades.length !== postOpenTrades.length) {\n        const preOpenIds = preOpenTrades.map(t => t.id);\n        postOpenTrades.map(pot => {\n          // if unique, add to 3box\n          if (preOpenIds.indexOf(pot.id)) {\n            updateTx(pot);\n            trade = pot;\n          }\n        });\n      }\n    }\n  }).on(\"transferUpdated\", transfer => {\n    console.info(`[GOT TRANSFER]`, transfer);\n\n    if (!transfer.archived && transfer.status !== GatewayJS.BurnAndReleaseStatus.Committed) {\n      updateTx(transfer);\n    }\n  }).catch(error => {\n    if (error.message === \"Transfer cancelled by user\") {\n      // remove from 3box\n      removeTx(trade);\n    }\n  });\n};\n/**\n * Recover and Continue Transactions\n */\n\nexport const isGatewayJSTxComplete = function (status) {\n  return status === GatewayJS.LockAndMintStatus.ConfirmedOnEthereum || status === GatewayJS.BurnAndReleaseStatus.ReturnedFromRenVM;\n};\nexport const reOpenTx = async function (trade, id) {\n  const store = getStore();\n  const gjs = store.get(\"gjs\");\n  const localWeb3 = store.get(\"localWeb3\");\n  const gateway = gjs.recoverTransfer(localWeb3.currentProvider, trade, id);\n  gateway.pause().result().on(\"status\", status => {\n    const completed = isGatewayJSTxComplete(status);\n\n    if (completed) {\n      // remove from 3box\n      removeTx(trade);\n    }\n\n    console.info(`[GOT STATUS] ${status}`, gateway, trade);\n  }).on(\"transferUpdated\", transfer => {\n    console.info(`[GOT TRANSFER]`, transfer);\n\n    if (!transfer.archived) {\n      updateTx(transfer);\n    }\n  }).then(console.log).catch(error => {\n    if (error.message === \"Transfer cancelled by user\") {\n      // remove from 3box\n      removeTx(trade);\n    } else {\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"gatewayjs error re-opening\");\n        Sentry.captureException(error);\n      });\n    }\n  });\n};\nexport default {};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/src/utils/txUtils.ts"],"names":["Sentry","firebase","GatewayJS","randomBytes","getStore","MIN_TX_AMOUNTS","ela","eth","usdt","wela","weth","wusdt","FEE_STRUCTURE","windowBlocker","event","preventDefault","msg","returnValue","setWindowBlocker","window","addEventListener","removeWindowBlocker","removeEventListener","addTx","tx","id","store","storeString","db","get","fsEnabled","localWeb3Address","fsSignature","Error","timestamp","firestore","Timestamp","fromDate","Date","now","created","updated","txs","newTxs","concat","set","localStorage","setItem","JSON","stringify","collection","doc","user","toLowerCase","walletSignature","data","e","errorMessage","String","message","withScope","scope","setTag","captureException","updateTx","newTx","filtered","filter","t","docData","console","error","exists","update","removeTx","delete","txExists","length","gatherFeeData","amount","fees","log","selectedAsset","selectedDirection","fixedFeeKey","dynamicFeeKey","renVMFee","Number","ethereum","toFixed","fixedFee","total","initGJSDeposit","gjs","localWeb3","getState","storableData","sendToken","Tokens","toUpperCase","Mint","sendAmount","utils","value","sats","toString","sendTo","web3Provider","currentProvider","preOpenTrades","Array","from","getGateways","values","trade","open","result","on","status","info","LockAndMintStatus","Committed","postOpenTrades","preOpenIds","map","pot","indexOf","transfer","archived","catch","initGJSWithdraw","destAddress","Burn","BurnAndReleaseStatus","isGatewayJSTxComplete","ConfirmedOnEthereum","ReturnedFromRenVM","reOpenTx","gateway","recoverTransfer","pause","completed","then"],"mappings":"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","sourcesContent":["import * as Sentry from \"@sentry/react\";\nimport firebase from \"firebase\";\nimport GatewayJS from \"@renproject/gateway\";\nimport { randomBytes } from \"@renproject/utils\";\n\nimport { getStore } from \"../services/storeService\";\n\nexport const MIN_TX_AMOUNTS = {\n  ela: 0.00035036,\n  eth: 0.00035036,\n  usdt: 0.00035036,\n  wela: 0.00035036,\n  weth: 0.00035036,\n  wusdt: 0.00035036,\n};\n\nexport const FEE_STRUCTURE: { [key in string]: string } = {\n    ela: 0,\n    eth: 0,\n    usdt: 0,\n    wela: 0,\n    weth: 0,\n    wusdt: 0,\n}\n\nexport const windowBlocker = function (event: any) {\n  // Cancel the event as stated by the standard.\n  event.preventDefault();\n\n  const msg =\n    \"WARNING: closing the browser window now may result in loss of funds. Are you sure?\";\n\n  // Chrome requires returnValue to be set.\n  event.returnValue = msg;\n  return msg;\n};\n\nexport const setWindowBlocker = function () {\n  window.addEventListener(\"beforeunload\", windowBlocker);\n};\n\nexport const removeWindowBlocker = function () {\n  window.removeEventListener(\"beforeunload\", windowBlocker);\n};\n\n/**\n * Create/Update/Delete Transactions on Firebase and 3box\n */\nexport const addTx = async (tx: any, id?: string) => {\n  const store = getStore();\n  const storeString = \"convert.transactions\";\n\n  // const space = store.get('space')\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n  const localWeb3Address = store.get(\"localWeb3Address\");\n  const fsSignature = store.get(\"fsSignature\");\n\n  if (!fsEnabled) {\n    throw new Error(\n      `Unable to create transaction - not connected to database.`\n    );\n  }\n\n  // add timestamps\n  const timestamp = firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n  tx.created = timestamp;\n  tx.updated = timestamp;\n\n  const txs = store.get(storeString);\n  const newTxs = txs.concat([tx]);\n\n  // update state\n  store.set(storeString, newTxs);\n\n  // update localStorage just in case\n  localStorage.setItem(storeString, JSON.stringify(newTxs));\n\n  // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n\n  id = id || tx.id;\n\n  // update firebase\n  try {\n    db.collection(\"transactions\")\n      .doc(id)\n      .set({\n        user: localWeb3Address.toLowerCase(),\n        walletSignature: fsSignature,\n        id,\n        updated: timestamp,\n        data: JSON.stringify(tx),\n      });\n  } catch (e) {\n    const errorMessage = String(e && e.message);\n    Sentry.withScope(function (scope) {\n      scope.setTag(\"error-hint\", \"storing transaction\");\n      Sentry.captureException(e);\n    });\n    e.message = `Unable to store transaction to database${\n      errorMessage ? `: ${errorMessage}` : \".\"\n    }`;\n    throw e;\n  }\n};\n\nexport const updateTx = async (newTx: any) => {\n  const store = getStore();\n  const storeString = \"convert.transactions\";\n  // const space = store.get('space')\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n  const localWeb3Address = store.get(\"localWeb3Address\");\n\n  // update timestamp\n  newTx.updated = firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n\n  const txs = store.get(storeString);\n\n  const filtered = txs.filter((t: any) => t.id !== newTx.id);\n  const newTxs = filtered.concat([newTx]);\n\n  // update state\n  store.set(storeString, newTxs);\n\n  // use localStorage\n  localStorage.setItem(storeString, JSON.stringify(newTxs));\n\n  // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n\n  // update firebase\n  if (fsEnabled) {\n    const doc = (db as firebase.firestore.Firestore)\n      .collection(\"transactions\")\n      .doc(newTx.id);\n    let docData;\n    try {\n      docData = await doc.get();\n    } catch (e) {\n      console.error(e);\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"missing transaction\");\n        Sentry.captureException(e);\n      });\n    }\n\n    if (docData?.exists) {\n      try {\n        await doc.update({\n          data: JSON.stringify(newTx),\n          user: localWeb3Address.toLowerCase(),\n          updated: newTx.updated,\n        });\n      } catch (e) {\n        console.error(e);\n        Sentry.withScope(function (scope) {\n          scope.setTag(\"error-hint\", \"adding transaction\");\n          Sentry.captureException(e);\n        });\n      }\n    } else {\n      await addTx(newTx, newTx.id);\n    }\n  }\n};\n\nexport const removeTx = async (tx: any) => {\n  const store = getStore();\n  const storeString = \"convert.transactions\";\n  // const space = store.get('space')\n  const db = store.get(\"db\");\n  const fsEnabled = store.get(\"fsEnabled\");\n\n  const txs = store.get(storeString);\n  const newTxs = txs.filter((t: any) => t.id !== tx.id);\n\n  // update local state\n  store.set(storeString, newTxs);\n\n  // update localStorage just in case\n  localStorage.setItem(storeString, JSON.stringify(newTxs));\n\n  // // update 3box\n  // if (space) {\n  //     space.private.set(storeString, JSON.stringify(newTxs))\n  // }\n\n  // update firebase\n  if (fsEnabled) {\n    try {\n      await db.collection(\"transactions\").doc(tx.id).delete();\n    } catch (e) {\n      console.error(e);\n      Sentry.withScope(function (scope) {\n        scope.setTag(\"error-hint\", \"removing transaction\");\n        Sentry.captureException(e);\n      });\n    }\n  }\n};\n\nexport const txExists = function (tx: any) {\n  return (\n    getStore()\n      .get(\"convert.transactions\")\n      .filter((t: any) => t.id === tx.id).length > 0\n  );\n};\n\n/**\n * Calculate Fees for a Transaction\n */\nexport const gatherFeeData = async function () {\n  const store = getStore();\n  const amount = store.get(\"convert.amount\");\n  const fees = FEE_STRUCTURE\n  console.log(fees)\n  let selectedAsset = store.get(\"selectedAsset\");\n\n  const selectedDirection = store.get(\"convert.selectedDirection\");\n  const fixedFeeKey = selectedDirection ? \"release\" : \"lock\";\n  const dynamicFeeKey = selectedDirection ? \"burn\" : \"mint\";\n\n  /// fix selectedAsset\n  // selectedAsset = 'eth'\n\n  if (!amount) {\n    return;\n  }\n\n  const renVMFee = Number(\n    Number(amount) * Number(fees[selectedAsset].ethereum[dynamicFeeKey] / 10000)\n  ).toFixed(6);\n  const fixedFee = Number(fees[selectedAsset][fixedFeeKey] / 10 ** 8);\n  const total =\n    Number(amount - Number(renVMFee) - fixedFee) > 0\n      ? Number(amount - Number(renVMFee) - fixedFee).toFixed(6)\n      : \"0.000000\";\n\n  store.set(\"convert.renVMFee\", renVMFee);\n  store.set(\"convert.networkFee\", fixedFee);\n  store.set(\"convert.conversionTotal\", total);\n};\n\n/**\n * Mint and Burn\n */\nexport const initGJSDeposit = async function (tx: any) {\n  const { amount } = tx;\n  const store = getStore() as any;\n  const { gjs, localWeb3, localWeb3Address, selectedAsset } = store.getState();\n\n  const storableData = {\n    sendToken:\n      GatewayJS.Tokens[\n        selectedAsset.toUpperCase() as keyof typeof GatewayJS.Tokens\n      ].Mint,\n    // every source asset for now uses the same unit number as BTC\n    sendAmount: GatewayJS.utils.value(amount, \"btc\").sats().toString(),\n    sendTo: localWeb3Address,\n  };\n\n  const data = {\n    ...storableData,\n    web3Provider: localWeb3.currentProvider,\n  };\n\n  const preOpenTrades = Array.from((await gjs.getGateways()).values());\n\n  const id = randomBytes(8);\n  await addTx(storableData, id);\n\n  let trade: any = null;\n  const open = gjs.open(data, id);\n  open\n    .result()\n    .on(\"status\", async (status: any) => {\n      console.info(`[GOT STATUS] ${status}`);\n      if (status === GatewayJS.LockAndMintStatus.Committed) {\n        const postOpenTrades = Array.from((await gjs.getGateways()).values());\n\n        if (preOpenTrades.length !== postOpenTrades.length) {\n          const preOpenIds = preOpenTrades.map((t: any) => t.id);\n          postOpenTrades.map((pot: any) => {\n            // if unique, add to 3box\n            if (preOpenIds.indexOf(pot.id)) {\n              updateTx(pot);\n              trade = pot;\n            }\n          });\n        }\n      }\n    })\n    .on(\"transferUpdated\", (transfer: any) => {\n      console.info(`[GOT TRANSFER]`, transfer);\n      if (\n        !transfer.archived &&\n        transfer.status !== GatewayJS.LockAndMintStatus.Committed\n      ) {\n        updateTx(transfer);\n      }\n    })\n    .catch((error: any) => {\n      if (error.message === \"Transfer cancelled by user\") {\n        // remove from 3box\n        removeTx(trade);\n      } else {\n        Sentry.withScope(function (scope) {\n          scope.setTag(\"error-hint\", \"gatewayjs error\");\n          Sentry.captureException(error);\n        });\n      }\n    });\n\n  store.set(\"confirmTx\", null);\n  store.set(\"confirmAction\", \"\");\n};\n\nexport const initGJSWithdraw = async function (tx: any) {\n  const { amount, destAddress } = tx;\n  const store = getStore() as any;\n  const { gjs, localWeb3, selectedAsset } = store.getState();\n\n  const storableData = {\n    sendToken:\n      GatewayJS.Tokens[\n        selectedAsset.toUpperCase() as keyof typeof GatewayJS.Tokens\n      ].Burn,\n    // every source asset for now uses the same unit number as BTC\n    sendAmount: GatewayJS.utils.value(amount, \"btc\").sats().toString(),\n    sendTo: destAddress,\n    web3Provider: localWeb3.currentProvider,\n  };\n\n  const data = {\n    ...storableData,\n    web3Provider: localWeb3.currentProvider,\n  };\n\n  const preOpenTrades = Array.from((await gjs.getGateways()).values());\n\n  const id = randomBytes(8);\n  await addTx(storableData, id);\n\n  let trade: any = null;\n  const open = gjs.open(data, id);\n  open\n    .result()\n    .on(\"status\", async (status: any) => {\n      console.info(`[GOT STATUS] ${status}`);\n      if (status === GatewayJS.BurnAndReleaseStatus.Committed) {\n        const postOpenTrades = Array.from((await gjs.getGateways()).values());\n\n        if (preOpenTrades.length !== postOpenTrades.length) {\n          const preOpenIds = preOpenTrades.map((t: any) => t.id);\n          postOpenTrades.map((pot: any) => {\n            // if unique, add to 3box\n            if (preOpenIds.indexOf(pot.id)) {\n              updateTx(pot);\n              trade = pot;\n            }\n          });\n        }\n      }\n    })\n    .on(\"transferUpdated\", (transfer: any) => {\n      console.info(`[GOT TRANSFER]`, transfer);\n      if (\n        !transfer.archived &&\n        transfer.status !== GatewayJS.BurnAndReleaseStatus.Committed\n      ) {\n        updateTx(transfer);\n      }\n    })\n    .catch((error: any) => {\n      if (error.message === \"Transfer cancelled by user\") {\n        // remove from 3box\n        removeTx(trade);\n      }\n    });\n};\n\n/**\n * Recover and Continue Transactions\n */\nexport const isGatewayJSTxComplete = function (status: any) {\n  return (\n    status === GatewayJS.LockAndMintStatus.ConfirmedOnEthereum ||\n    status === GatewayJS.BurnAndReleaseStatus.ReturnedFromRenVM\n  );\n};\n\nexport const reOpenTx = async function (trade: any, id?: string) {\n  const store = getStore();\n  const gjs = store.get(\"gjs\");\n  const localWeb3 = store.get(\"localWeb3\");\n  const gateway = gjs.recoverTransfer(localWeb3.currentProvider, trade, id);\n\n  gateway\n    .pause()\n    .result()\n    .on(\"status\", (status: any) => {\n      const completed = isGatewayJSTxComplete(status);\n      if (completed) {\n        // remove from 3box\n        removeTx(trade);\n      }\n      console.info(`[GOT STATUS] ${status}`, gateway, trade);\n    })\n    .on(\"transferUpdated\", (transfer: any) => {\n      console.info(`[GOT TRANSFER]`, transfer);\n      if (!transfer.archived) {\n        updateTx(transfer);\n      }\n    })\n    .then(console.log)\n    .catch((error: any) => {\n      if (error.message === \"Transfer cancelled by user\") {\n        // remove from 3box\n        removeTx(trade);\n      } else {\n        Sentry.withScope(function (scope) {\n          scope.setTag(\"error-hint\", \"gatewayjs error re-opening\");\n          Sentry.captureException(error);\n        });\n      }\n    });\n};\n\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}