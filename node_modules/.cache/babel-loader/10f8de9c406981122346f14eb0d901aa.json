{"ast":null,"code":"import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 30 * 1000; //30 seconds\n\nconst memcache = {};\nexport default (async ({\n  payload,\n  requestManager\n}, res, next) => {\n  if (payload.method !== 'eth_getTransactionReceipt') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const txHash = payload.params[0];\n\n  if (!memcache[txHash] || memcache[txHash] && memcache[txHash].timestamp < new Date().getTime() - WAIT_TIME) {\n    try {\n      const receipt = await ethCalls.getTransactionReceipt(txHash);\n      memcache[txHash] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(null, toPayload(payload.id, JSON.parse(memcache[txHash].receipt) || null));\n  }\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/eth_getTransactionReceipt.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","payload","requestManager","res","next","method","ethCalls","txHash","params","timestamp","Date","getTime","receipt","getTransactionReceipt","JSON","stringify","id","e","parse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,MAAMC,QAAQ,GAAG,EAAjB;AACA,gBAAe,OAAO;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAP,EAAoCC,GAApC,EAAyCC,IAAzC,KAAkD;AAC/D,MAAIH,OAAO,CAACI,MAAR,KAAmB,2BAAvB,EAAoD,OAAOD,IAAI,EAAX;AACpD,QAAME,QAAQ,GAAG,IAAIR,QAAJ,CAAaI,cAAb,CAAjB;AACA,QAAMK,MAAM,GAAGN,OAAO,CAACO,MAAR,CAAe,CAAf,CAAf;;AACA,MACE,CAACR,QAAQ,CAACO,MAAD,CAAT,IACCP,QAAQ,CAACO,MAAD,CAAR,IACCP,QAAQ,CAACO,MAAD,CAAR,CAAiBE,SAAjB,GAA6B,IAAIC,IAAJ,GAAWC,OAAX,KAAuBZ,SAHxD,EAIE;AACA,QAAI;AACF,YAAMa,OAAO,GAAG,MAAMN,QAAQ,CAACO,qBAAT,CAA+BN,MAA/B,CAAtB;AACAP,MAAAA,QAAQ,CAACO,MAAD,CAAR,GAAmB;AACjBE,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADM;AAEjBC,QAAAA,OAAO,EAAEE,IAAI,CAACC,SAAL,CAAeH,OAAf;AAFQ,OAAnB;AAIAT,MAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACI,OAAO,CAACe,EAAT,EAAaJ,OAAb,CAAhB,CAAH;AACD,KAPD,CAOE,OAAOK,CAAP,EAAU;AACVd,MAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACI,OAAO,CAACe,EAAT,EAAa,IAAb,CAAhB,CAAH;AACD;AACF,GAfD,MAeO;AACLb,IAAAA,GAAG,CACD,IADC,EAEDN,SAAS,CAACI,OAAO,CAACe,EAAT,EAAaF,IAAI,CAACI,KAAL,CAAWlB,QAAQ,CAACO,MAAD,CAAR,CAAiBK,OAA5B,KAAwC,IAArD,CAFR,CAAH;AAID;AACF,CAzBD","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\n\nconst WAIT_TIME = 30 * 1000; //30 seconds\nconst memcache = {};\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_getTransactionReceipt') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const txHash = payload.params[0];\n  if (\n    !memcache[txHash] ||\n    (memcache[txHash] &&\n      memcache[txHash].timestamp < new Date().getTime() - WAIT_TIME)\n  ) {\n    try {\n      const receipt = await ethCalls.getTransactionReceipt(txHash);\n      memcache[txHash] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(\n      null,\n      toPayload(payload.id, JSON.parse(memcache[txHash].receipt) || null)\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}