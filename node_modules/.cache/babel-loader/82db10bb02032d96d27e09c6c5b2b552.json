{"ast":null,"code":"/* eslint-disable */\nimport unit from 'ethjs-unit';\nimport EthCalls from '../web3Calls';\nimport { toError, toPayload } from '../jsonrpc';\nimport EventNames from '../events';\nimport { getSanitizedTx } from './utils';\nimport debugLogger from 'debug';\nconst debug = debugLogger('MEWconnectWeb3');\nconst debugErrors = debugLogger('MEWconnectError');\nexport default (async ({\n  payload,\n  store,\n  requestManager,\n  eventHub\n}, res, next) => {\n  if (payload.method !== 'eth_signTransaction') return next();\n  const tx = payload.params[0];\n  const localTx = Object.assign({}, payload);\n  delete localTx['gas'];\n  delete localTx['nonce'];\n  const ethCalls = new EthCalls(requestManager);\n  tx.nonce = !tx.nonce ? await store.state.web3.eth.getTransactionCount(store.state.wallet.getAddressString()) : tx.nonce;\n  tx.gas = !tx.gas || tx.gas <= 0 ? await ethCalls.estimateGas(localTx) : tx.gas;\n  tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n  tx.gasPrice = !tx.gasPrice || tx.gasPrice <= 0 ? await store.state.web3.eth.getGasPrice() : tx.gasPrice;\n  getSanitizedTx(tx).then(_tx => {\n    eventHub.emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n      if (_response.reject) {\n        debug('USER DECLINED SIGN TRANSACTION');\n        res(toError(payload.id, 'User Rejected Request', 4001));\n        return;\n      }\n\n      debug('broadcasting', payload.method, _response);\n      res(null, toPayload(payload.id, _response.rawTransaction));\n    });\n  }).catch(e => {\n    debugErrors('Error: eth_signTransaction', e);\n    res(e);\n  });\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/eth_signTransaction.js"],"names":["unit","EthCalls","toError","toPayload","EventNames","getSanitizedTx","debugLogger","debug","debugErrors","payload","store","requestManager","eventHub","res","next","method","tx","params","localTx","Object","assign","ethCalls","nonce","state","web3","eth","getTransactionCount","wallet","getAddressString","gas","estimateGas","chainId","network","type","chainID","gasPrice","getGasPrice","then","_tx","emit","SHOW_TX_CONFIRM_MODAL","_response","reject","id","rawTransaction","catch","e"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport unit from 'ethjs-unit';\nimport EthCalls from '../web3Calls';\nimport { toError, toPayload } from '../jsonrpc';\nimport EventNames from '../events';\nimport { getSanitizedTx } from './utils';\n\nimport debugLogger from 'debug';\nconst debug = debugLogger('MEWconnectWeb3');\nconst debugErrors = debugLogger('MEWconnectError');\n\nexport default async (\n  { payload, store, requestManager, eventHub },\n  res,\n  next\n) => {\n  if (payload.method !== 'eth_signTransaction') return next();\n  const tx = payload.params[0];\n  const localTx = Object.assign({}, payload);\n  delete localTx['gas'];\n  delete localTx['nonce'];\n  const ethCalls = new EthCalls(requestManager);\n  tx.nonce = !tx.nonce\n    ? await store.state.web3.eth.getTransactionCount(\n        store.state.wallet.getAddressString()\n      )\n    : tx.nonce;\n  tx.gas =\n    !tx.gas || tx.gas <= 0 ? await ethCalls.estimateGas(localTx) : tx.gas;\n  tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n  tx.gasPrice =\n    !tx.gasPrice || tx.gasPrice <= 0\n      ? await store.state.web3.eth.getGasPrice()\n      : tx.gasPrice;\n  getSanitizedTx(tx)\n    .then(_tx => {\n      eventHub.emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n        if(_response.reject){\n          debug('USER DECLINED SIGN TRANSACTION');\n          res(toError(payload.id, 'User Rejected Request', 4001));\n          return;\n        }\n        debug('broadcasting', payload.method, _response);\n        res(null, toPayload(payload.id, _response.rawTransaction));\n      });\n    })\n    .catch(e => {\n      debugErrors('Error: eth_signTransaction', e);\n      res(e);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}