{"ast":null,"code":"import Axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport { OrderedMap } from \"immutable\";\n\nconst tokenDecimals = token => {\n  switch (token) {\n    case \"BTC\":\n      return 8;\n\n    case \"ZEC\":\n      return 8;\n\n    case \"BCH\":\n      return 8;\n\n    case \"DAI\":\n      return 18;\n\n    case \"ETH\":\n      return 18;\n\n    case \"REN\":\n      return 18;\n\n    default:\n      throw new Error(`Unknown token ${token}`);\n  }\n}; // CoinGecko price feed\n\n\nconst coinGeckoURL = `https://api.coingecko.com/api/v3`;\n\nconst coinGeckoID = token => {\n  switch (token) {\n    case \"BTC\":\n      return \"bitcoin\";\n\n    case \"ZEC\":\n      return \"zcash\";\n\n    case \"BCH\":\n      return \"bitcoin-cash\";\n\n    case \"DAI\":\n      return \"dai\";\n\n    case \"ETH\":\n      return \"ethereum\";\n\n    case \"REN\":\n      return \"republic-protocol\";\n\n    default:\n      throw new Error(`Unknown token ${token}`);\n  }\n};\n\nconst coinGeckoParams = `localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`;\n\nconst getCoinGeckoPrice = token => Axios.get(`${coinGeckoURL}/coins/${coinGeckoID(token)}?${coinGeckoParams}`).then(response => response.data.market_data.current_price.usd || 0); // Coinbase price feed\n\n\nconst coinbaseURL = token => `https://api.coinbase.com/v2/prices/${token.toUpperCase()}-USD/buy`;\n\nconst getCoinbasePrice = token => Axios.get(coinbaseURL(token)).then(response => parseInt(response.data.data.amount, 10) || 0); // const coinMarketCapID = (token: string): number => {\n//     /*\n//     In order to fetch the code of a currency, use:\n//     ```js\n//     let x;\n//     Axios({\n//         method: \"GET\",\n//         url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/map\",\n//         params: {\n//             \"symbol\": \"BTC,ZEC,BCH\"\n//         },\n//         headers: {\n//             [`X-CMC` + `_PRO_API_KEY`]: \"...\"\n//         },\n//     }).then(r => { x = r.data.data; }).catch(console.error);\n//     console.debug(x.filter(row => [\"BTC\", \"ZEC\", BCH\"].includes(row.symbol)))\n//     ```\n//     */\n//     switch (token) {\n//         case \"BTC\":\n//             return 1;\n//         case \"ZEC\":\n//             return 1437;\n//         case \"BCH\":\n//             return 1831;\n//         default:\n//             throw new Error(`Unknown token ${token}`);\n//     }\n// };\n// const getCoinMarketCapPrice: PriceFeed = (token: string) =>\n//     Axios.request({\n//         url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\",\n//         method: \"GET\",\n//         params: {\n//             \"start\": `${coinMarketCapID(token)}`,\n//             \"limit\": \"1\",\n//             // \"convert\": \"USD,BTC\"\n//         },\n//         headers: {\n//             // Free-tier CMC API key.\n//             [`X-CMC` + `_PRO_API_KEY`]: `${24874700}-${1064}-447d-9daa-3fd514863f67`\n//         },\n//     }).then((response: { data: { data: Array<{ symbol: string, quote: { USD: { price: number } } }> } }) => { return response.data.data.filter(x => x.symbol === token)[0].quote.USD.price; });\n\n\nexport const getTokenPrices = async (tokens, logger) => {\n  try {\n    return await tokens.map(token => ({\n      token,\n      priceFeeds: [getCoinGeckoPrice(token), getCoinbasePrice(token)]\n    })).reduce(async (pricesPromise, {\n      token,\n      priceFeeds\n    }) => {\n      const prices = await pricesPromise;\n      const returnedAPIs = [];\n\n      for (const priceFeed of priceFeeds) {\n        try {\n          returnedAPIs.push(await priceFeed);\n        } catch (error) {\n          // tslint:disable-next-line: no-console\n          if (logger) logger.error(error);\n        }\n      }\n\n      return prices.set(token, returnedAPIs.length ? returnedAPIs.reduce((sum, price) => sum + price, 0) / returnedAPIs.length : 0);\n    }, Promise.resolve(OrderedMap()));\n  } catch (error) {\n    if (logger) logger.error(error);\n    return OrderedMap();\n  }\n};\nexport const normalizeValue = (prices, token, value) => {\n  const shiftedValue = new BigNumber(value).div(new BigNumber(10).exponentiatedBy(tokenDecimals(token)));\n  const timesPrice = shiftedValue.times(prices.get(token, 0));\n  return timesPrice;\n};","map":{"version":3,"sources":["../../src/fetchPrices.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport { OrderedMap } from \"immutable\";\nconst tokenDecimals = (token) => {\n    switch (token) {\n        case \"BTC\":\n            return 8;\n        case \"ZEC\":\n            return 8;\n        case \"BCH\":\n            return 8;\n        case \"DAI\":\n            return 18;\n        case \"ETH\":\n            return 18;\n        case \"REN\":\n            return 18;\n        default:\n            throw new Error(`Unknown token ${token}`);\n    }\n};\n// CoinGecko price feed\nconst coinGeckoURL = `https://api.coingecko.com/api/v3`;\nconst coinGeckoID = (token) => {\n    switch (token) {\n        case \"BTC\":\n            return \"bitcoin\";\n        case \"ZEC\":\n            return \"zcash\";\n        case \"BCH\":\n            return \"bitcoin-cash\";\n        case \"DAI\":\n            return \"dai\";\n        case \"ETH\":\n            return \"ethereum\";\n        case \"REN\":\n            return \"republic-protocol\";\n        default:\n            throw new Error(`Unknown token ${token}`);\n    }\n};\nconst coinGeckoParams = `localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`;\nconst getCoinGeckoPrice = (token) => Axios\n    .get(`${coinGeckoURL}/coins/${coinGeckoID(token)}?${coinGeckoParams}`)\n    .then(response => response.data.market_data.current_price.usd || 0);\n// Coinbase price feed\nconst coinbaseURL = (token) => `https://api.coinbase.com/v2/prices/${token.toUpperCase()}-USD/buy`;\nconst getCoinbasePrice = (token) => Axios\n    .get(coinbaseURL(token))\n    .then(response => parseInt(response.data.data.amount, 10) || 0);\n// const coinMarketCapID = (token: string): number => {\n//     /*\n//     In order to fetch the code of a currency, use:\n//     ```js\n//     let x;\n//     Axios({\n//         method: \"GET\",\n//         url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/map\",\n//         params: {\n//             \"symbol\": \"BTC,ZEC,BCH\"\n//         },\n//         headers: {\n//             [`X-CMC` + `_PRO_API_KEY`]: \"...\"\n//         },\n//     }).then(r => { x = r.data.data; }).catch(console.error);\n//     console.debug(x.filter(row => [\"BTC\", \"ZEC\", BCH\"].includes(row.symbol)))\n//     ```\n//     */\n//     switch (token) {\n//         case \"BTC\":\n//             return 1;\n//         case \"ZEC\":\n//             return 1437;\n//         case \"BCH\":\n//             return 1831;\n//         default:\n//             throw new Error(`Unknown token ${token}`);\n//     }\n// };\n// const getCoinMarketCapPrice: PriceFeed = (token: string) =>\n//     Axios.request({\n//         url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\",\n//         method: \"GET\",\n//         params: {\n//             \"start\": `${coinMarketCapID(token)}`,\n//             \"limit\": \"1\",\n//             // \"convert\": \"USD,BTC\"\n//         },\n//         headers: {\n//             // Free-tier CMC API key.\n//             [`X-CMC` + `_PRO_API_KEY`]: `${24874700}-${1064}-447d-9daa-3fd514863f67`\n//         },\n//     }).then((response: { data: { data: Array<{ symbol: string, quote: { USD: { price: number } } }> } }) => { return response.data.data.filter(x => x.symbol === token)[0].quote.USD.price; });\nexport const getTokenPrices = async (tokens, logger) => {\n    try {\n        return await tokens.map((token) => ({\n            token,\n            priceFeeds: [\n                getCoinGeckoPrice(token),\n                getCoinbasePrice(token),\n            ],\n        }))\n            .reduce(async (pricesPromise, { token, priceFeeds }) => {\n            const prices = await pricesPromise;\n            const returnedAPIs = [];\n            for (const priceFeed of priceFeeds) {\n                try {\n                    returnedAPIs.push(await priceFeed);\n                }\n                catch (error) {\n                    // tslint:disable-next-line: no-console\n                    if (logger)\n                        logger.error(error);\n                }\n            }\n            return prices.set(token, returnedAPIs.length ?\n                returnedAPIs.reduce((sum, price) => sum + price, 0) / returnedAPIs.length :\n                0);\n        }, Promise.resolve(OrderedMap()));\n    }\n    catch (error) {\n        if (logger)\n            logger.error(error);\n        return OrderedMap();\n    }\n};\nexport const normalizeValue = (prices, token, value) => {\n    const shiftedValue = new BigNumber(value).div(new BigNumber(10).exponentiatedBy(tokenDecimals(token)));\n    const timesPrice = shiftedValue.times(prices.get(token, 0));\n    return timesPrice;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hQcmljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmV0Y2hQcmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUFVLEVBQUU7SUFDNUMsUUFBUSxLQUFLLEVBQUU7UUFDWCxLQUFLLEtBQUs7WUFDTixPQUFPLENBQUMsQ0FBQztRQUNiLEtBQUssS0FBSztZQUNOLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsS0FBSyxLQUFLO1lBQ04sT0FBTyxDQUFDLENBQUM7UUFDYixLQUFLLEtBQUs7WUFDTixPQUFPLEVBQUUsQ0FBQztRQUNkLEtBQUssS0FBSztZQUNOLE9BQU8sRUFBRSxDQUFDO1FBQ2QsS0FBSyxLQUFLO1lBQ04sT0FBTyxFQUFFLENBQUM7UUFDZDtZQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDakQ7QUFDTCxDQUFDLENBQUM7QUFJRix1QkFBdUI7QUFDdkIsTUFBTSxZQUFZLEdBQUcsa0NBQWtDLENBQUM7QUFDeEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQVUsRUFBRTtJQUMxQyxRQUFRLEtBQUssRUFBRTtRQUNYLEtBQUssS0FBSztZQUNOLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLEtBQUssS0FBSztZQUNOLE9BQU8sT0FBTyxDQUFDO1FBQ25CLEtBQUssS0FBSztZQUNOLE9BQU8sY0FBYyxDQUFDO1FBQzFCLEtBQUssS0FBSztZQUNOLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLEtBQUssS0FBSztZQUNOLE9BQU8sVUFBVSxDQUFDO1FBQ3RCLEtBQUssS0FBSztZQUNOLE9BQU8sbUJBQW1CLENBQUM7UUFDL0I7WUFD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"]},"metadata":{},"sourceType":"module"}