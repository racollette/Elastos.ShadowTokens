{"ast":null,"code":"/*\n\tJavaScript BigInteger library version 0.9.1\n\thttp://silentmatt.com/biginteger/\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\n\tLicensed under the MIT license.\n\tSupport for arbitrary internal representation base was added by\n\tVitaly Magerya.\n*/\n\n/*\n\tFile: biginteger.js\n\tExports:\n\t\t<BigInteger>\n*/\n(function (exports) {\n  \"use strict\";\n  /*\n      Class: BigInteger\n      An arbitrarily-large integer.\n      <BigInteger> objects should be considered immutable. None of the \"built-in\"\n      methods modify *this* or their arguments. All properties should be\n      considered private.\n      All the methods of <BigInteger> instances can be called \"statically\". The\n      static versions are convenient if you don't already have a <BigInteger>\n      object.\n      As an example, these calls are equivalent.\n      > BigInteger(4).multiply(5); // returns BigInteger(20);\n      > BigInteger.multiply(4, 5); // returns BigInteger(20);\n      > var a = 42;\n      > var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\n  */\n\n  var CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\n\n  /*\n      Constructor: BigInteger()\n      Convert a value to a <BigInteger>.\n      Although <BigInteger()> is the constructor for <BigInteger> objects, it is\n      best not to call it as a constructor. If *n* is a <BigInteger> object, it is\n      simply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\n      without a radix argument.\n      > var n0 = BigInteger();      // Same as <BigInteger.ZERO>\n      > var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\n      > var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\n      > var n3 = BigInteger(n2);    // Return n2, unchanged\n      The constructor form only takes an array and a sign. *n* must be an\n      array of numbers in little-endian order, where each digit is between 0\n      and BigInteger.base.  The second parameter sets the sign: -1 for\n      negative, +1 for positive, or 0 for zero. The array is *not copied and\n      may be modified*. If the array contains only zeros, the sign parameter\n      is ignored and is forced to zero.\n      > new BigInteger([5], -1): create a new BigInteger with value -5\n      Parameters:\n          n - Value to convert to a <BigInteger>.\n      Returns:\n          A <BigInteger> value.\n      See Also:\n          <parse>, <BigInteger>\n  */\n\n  function BigInteger(n, s, token) {\n    if (token !== CONSTRUCT) {\n      if (n instanceof BigInteger) {\n        return n;\n      } else if (typeof n === \"undefined\") {\n        return ZERO;\n      }\n\n      return BigInteger.parse(n);\n    }\n\n    n = n || []; // Provide the nullary constructor for subclasses.\n\n    while (n.length && !n[n.length - 1]) {\n      --n.length;\n    }\n\n    this._d = n;\n    this._s = n.length ? s || 1 : 0;\n  }\n\n  BigInteger._construct = function (n, s) {\n    return new BigInteger(n, s, CONSTRUCT);\n  }; // Base-10 speedup hacks in parse, toString, exp10 and log functions\n  // require base to be a power of 10. 10^7 is the largest such power\n  // that won't cause a precision loss when digits are multiplied.\n\n\n  var BigInteger_base = 10000000;\n  var BigInteger_base_log10 = 7;\n  BigInteger.base = BigInteger_base;\n  BigInteger.base_log10 = BigInteger_base_log10;\n  var ZERO = new BigInteger([], 0, CONSTRUCT); // Constant: ZERO\n  // <BigInteger> 0.\n\n  BigInteger.ZERO = ZERO;\n  var ONE = new BigInteger([1], 1, CONSTRUCT); // Constant: ONE\n  // <BigInteger> 1.\n\n  BigInteger.ONE = ONE;\n  var M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT); // Constant: M_ONE\n  // <BigInteger> -1.\n\n  BigInteger.M_ONE = M_ONE; // Constant: _0\n  // Shortcut for <ZERO>.\n\n  BigInteger._0 = ZERO; // Constant: _1\n  // Shortcut for <ONE>.\n\n  BigInteger._1 = ONE;\n  /*\n      Constant: small\n      Array of <BigIntegers> from 0 to 36.\n      These are used internally for parsing, but useful when you need a \"small\"\n      <BigInteger>.\n      See Also:\n          <ZERO>, <ONE>, <_0>, <_1>\n  */\n\n  BigInteger.small = [ZERO, ONE,\n  /* Assuming BigInteger_base > 36 */\n  new BigInteger([2], 1, CONSTRUCT), new BigInteger([3], 1, CONSTRUCT), new BigInteger([4], 1, CONSTRUCT), new BigInteger([5], 1, CONSTRUCT), new BigInteger([6], 1, CONSTRUCT), new BigInteger([7], 1, CONSTRUCT), new BigInteger([8], 1, CONSTRUCT), new BigInteger([9], 1, CONSTRUCT), new BigInteger([10], 1, CONSTRUCT), new BigInteger([11], 1, CONSTRUCT), new BigInteger([12], 1, CONSTRUCT), new BigInteger([13], 1, CONSTRUCT), new BigInteger([14], 1, CONSTRUCT), new BigInteger([15], 1, CONSTRUCT), new BigInteger([16], 1, CONSTRUCT), new BigInteger([17], 1, CONSTRUCT), new BigInteger([18], 1, CONSTRUCT), new BigInteger([19], 1, CONSTRUCT), new BigInteger([20], 1, CONSTRUCT), new BigInteger([21], 1, CONSTRUCT), new BigInteger([22], 1, CONSTRUCT), new BigInteger([23], 1, CONSTRUCT), new BigInteger([24], 1, CONSTRUCT), new BigInteger([25], 1, CONSTRUCT), new BigInteger([26], 1, CONSTRUCT), new BigInteger([27], 1, CONSTRUCT), new BigInteger([28], 1, CONSTRUCT), new BigInteger([29], 1, CONSTRUCT), new BigInteger([30], 1, CONSTRUCT), new BigInteger([31], 1, CONSTRUCT), new BigInteger([32], 1, CONSTRUCT), new BigInteger([33], 1, CONSTRUCT), new BigInteger([34], 1, CONSTRUCT), new BigInteger([35], 1, CONSTRUCT), new BigInteger([36], 1, CONSTRUCT)]; // Used for parsing/radix conversion\n\n  BigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  /*\n      Method: toString\n      Convert a <BigInteger> to a string.\n      When *base* is greater than 10, letters are upper case.\n      Parameters:\n          base - Optional base to represent the number in (default is base 10).\n                 Must be between 2 and 36 inclusive, or an Error will be thrown.\n      Returns:\n          The string representation of the <BigInteger>.\n  */\n\n  BigInteger.prototype.toString = function (base) {\n    base = +base || 10;\n\n    if (base < 2 || base > 36) {\n      throw new Error(\"illegal radix \" + base + \".\");\n    }\n\n    if (this._s === 0) {\n      return \"0\";\n    }\n\n    if (base === 10) {\n      var str = this._s < 0 ? \"-\" : \"\";\n      str += this._d[this._d.length - 1].toString();\n\n      for (var i = this._d.length - 2; i >= 0; i--) {\n        var group = this._d[i].toString();\n\n        while (group.length < BigInteger_base_log10) group = '0' + group;\n\n        str += group;\n      }\n\n      return str;\n    } else {\n      var numerals = BigInteger.digits;\n      base = BigInteger.small[base];\n      var sign = this._s;\n      var n = this.abs();\n      var digits = [];\n      var digit;\n\n      while (n._s !== 0) {\n        var divmod = n.divRem(base);\n        n = divmod[0];\n        digit = divmod[1]; // TODO: This could be changed to unshift instead of reversing at the end.\n        // Benchmark both to compare speeds.\n\n        digits.push(numerals[digit.valueOf()]);\n      }\n\n      return (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\n    }\n  }; // Verify strings for parsing\n\n\n  BigInteger.radixRegex = [/^$/, /^$/, /^[01]*$/, /^[012]*$/, /^[0-3]*$/, /^[0-4]*$/, /^[0-5]*$/, /^[0-6]*$/, /^[0-7]*$/, /^[0-8]*$/, /^[0-9]*$/, /^[0-9aA]*$/, /^[0-9abAB]*$/, /^[0-9abcABC]*$/, /^[0-9a-dA-D]*$/, /^[0-9a-eA-E]*$/, /^[0-9a-fA-F]*$/, /^[0-9a-gA-G]*$/, /^[0-9a-hA-H]*$/, /^[0-9a-iA-I]*$/, /^[0-9a-jA-J]*$/, /^[0-9a-kA-K]*$/, /^[0-9a-lA-L]*$/, /^[0-9a-mA-M]*$/, /^[0-9a-nA-N]*$/, /^[0-9a-oA-O]*$/, /^[0-9a-pA-P]*$/, /^[0-9a-qA-Q]*$/, /^[0-9a-rA-R]*$/, /^[0-9a-sA-S]*$/, /^[0-9a-tA-T]*$/, /^[0-9a-uA-U]*$/, /^[0-9a-vA-V]*$/, /^[0-9a-wA-W]*$/, /^[0-9a-xA-X]*$/, /^[0-9a-yA-Y]*$/, /^[0-9a-zA-Z]*$/];\n  /*\n      Function: parse\n      Parse a string into a <BigInteger>.\n      *base* is optional but, if provided, must be from 2 to 36 inclusive. If\n      *base* is not provided, it will be guessed based on the leading characters\n      of *s* as follows:\n      - \"0x\" or \"0X\": *base* = 16\n      - \"0c\" or \"0C\": *base* = 8\n      - \"0b\" or \"0B\": *base* = 2\n      - else: *base* = 10\n      If no base is provided, or *base* is 10, the number can be in exponential\n      form. For example, these are all valid:\n      > BigInteger.parse(\"1e9\");              // Same as \"1000000000\"\n      > BigInteger.parse(\"1.234*10^3\");       // Same as 1234\n      > BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\n      If any characters fall outside the range defined by the radix, an exception\n      will be thrown.\n      Parameters:\n          s - The string to parse.\n          base - Optional radix (default is to guess based on *s*).\n      Returns:\n          a <BigInteger> instance.\n  */\n\n  BigInteger.parse = function (s, base) {\n    // Expands a number in exponential form to decimal form.\n    // expandExponential(\"-13.441*10^5\") === \"1344100\";\n    // expandExponential(\"1.12300e-1\") === \"0.112300\";\n    // expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\n    function expandExponential(str) {\n      str = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\n      return str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function (x, s, n, f, c) {\n        c = +c;\n        var l = c < 0;\n        var i = n.length + c;\n        x = (l ? n : f).length;\n        c = (c = Math.abs(c)) >= x ? c - x + l : 0;\n        var z = new Array(c + 1).join(\"0\");\n        var r = n + f;\n        return (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\n      });\n    }\n\n    s = s.toString();\n\n    if (typeof base === \"undefined\" || +base === 10) {\n      s = expandExponential(s);\n    }\n\n    var prefixRE;\n\n    if (typeof base === \"undefined\") {\n      prefixRE = '0[xcb]';\n    } else if (base == 16) {\n      prefixRE = '0x';\n    } else if (base == 8) {\n      prefixRE = '0c';\n    } else if (base == 2) {\n      prefixRE = '0b';\n    } else {\n      prefixRE = '';\n    }\n\n    var parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\n\n    if (parts) {\n      var sign = parts[1] || \"+\";\n      var baseSection = parts[2] || \"\";\n      var digits = parts[3] || \"\";\n\n      if (typeof base === \"undefined\") {\n        // Guess base\n        if (baseSection === \"0x\" || baseSection === \"0X\") {\n          // Hex\n          base = 16;\n        } else if (baseSection === \"0c\" || baseSection === \"0C\") {\n          // Octal\n          base = 8;\n        } else if (baseSection === \"0b\" || baseSection === \"0B\") {\n          // Binary\n          base = 2;\n        } else {\n          base = 10;\n        }\n      } else if (base < 2 || base > 36) {\n        throw new Error(\"Illegal radix \" + base + \".\");\n      }\n\n      base = +base; // Check for digits outside the range\n\n      if (!BigInteger.radixRegex[base].test(digits)) {\n        throw new Error(\"Bad digit for radix \" + base);\n      } // Strip leading zeros, and convert to array\n\n\n      digits = digits.replace(/^0+/, \"\").split(\"\");\n\n      if (digits.length === 0) {\n        return ZERO;\n      } // Get the sign (we know it's not zero)\n\n\n      sign = sign === \"-\" ? -1 : 1; // Optimize 10\n\n      if (base == 10) {\n        var d = [];\n\n        while (digits.length >= BigInteger_base_log10) {\n          d.push(parseInt(digits.splice(digits.length - BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\n        }\n\n        d.push(parseInt(digits.join(''), 10));\n        return new BigInteger(d, sign, CONSTRUCT);\n      } // Do the conversion\n\n\n      var d = ZERO;\n      base = BigInteger.small[base];\n      var small = BigInteger.small;\n\n      for (var i = 0; i < digits.length; i++) {\n        d = d.multiply(base).add(small[parseInt(digits[i], 36)]);\n      }\n\n      return new BigInteger(d._d, sign, CONSTRUCT);\n    } else {\n      throw new Error(\"Invalid BigInteger format: \" + s);\n    }\n  };\n  /*\n      Function: add\n      Add two <BigIntegers>.\n      Parameters:\n          n - The number to add to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          The numbers added together.\n      See Also:\n          <subtract>, <multiply>, <quotient>, <next>\n  */\n\n\n  BigInteger.prototype.add = function (n) {\n    if (this._s === 0) {\n      return BigInteger(n);\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return this;\n    }\n\n    if (this._s !== n._s) {\n      n = n.negate();\n      return this.subtract(n);\n    }\n\n    var a = this._d;\n    var b = n._d;\n    var al = a.length;\n    var bl = b.length;\n    var sum = new Array(Math.max(al, bl) + 1);\n    var size = Math.min(al, bl);\n    var carry = 0;\n    var digit;\n\n    for (var i = 0; i < size; i++) {\n      digit = a[i] + b[i] + carry;\n      sum[i] = digit % BigInteger_base;\n      carry = digit / BigInteger_base | 0;\n    }\n\n    if (bl > al) {\n      a = b;\n      al = bl;\n    }\n\n    for (i = size; carry && i < al; i++) {\n      digit = a[i] + carry;\n      sum[i] = digit % BigInteger_base;\n      carry = digit / BigInteger_base | 0;\n    }\n\n    if (carry) {\n      sum[i] = carry;\n    }\n\n    for (; i < al; i++) {\n      sum[i] = a[i];\n    }\n\n    return new BigInteger(sum, this._s, CONSTRUCT);\n  };\n  /*\n      Function: negate\n      Get the additive inverse of a <BigInteger>.\n      Returns:\n          A <BigInteger> with the same magnatude, but with the opposite sign.\n      See Also:\n          <abs>\n  */\n\n\n  BigInteger.prototype.negate = function () {\n    return new BigInteger(this._d, -this._s | 0, CONSTRUCT);\n  };\n  /*\n      Function: abs\n      Get the absolute value of a <BigInteger>.\n      Returns:\n          A <BigInteger> with the same magnatude, but always positive (or zero).\n      See Also:\n          <negate>\n  */\n\n\n  BigInteger.prototype.abs = function () {\n    return this._s < 0 ? this.negate() : this;\n  };\n  /*\n      Function: subtract\n      Subtract two <BigIntegers>.\n      Parameters:\n          n - The number to subtract from *this*. Will be converted to a <BigInteger>.\n      Returns:\n          The *n* subtracted from *this*.\n      See Also:\n          <add>, <multiply>, <quotient>, <prev>\n  */\n\n\n  BigInteger.prototype.subtract = function (n) {\n    if (this._s === 0) {\n      return BigInteger(n).negate();\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return this;\n    }\n\n    if (this._s !== n._s) {\n      n = n.negate();\n      return this.add(n);\n    }\n\n    var m = this; // negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\n\n    if (this._s < 0) {\n      m = new BigInteger(n._d, 1, CONSTRUCT);\n      n = new BigInteger(this._d, 1, CONSTRUCT);\n    } // Both are positive => a - b\n\n\n    var sign = m.compareAbs(n);\n\n    if (sign === 0) {\n      return ZERO;\n    } else if (sign < 0) {\n      // swap m and n\n      var t = n;\n      n = m;\n      m = t;\n    } // a > b\n\n\n    var a = m._d;\n    var b = n._d;\n    var al = a.length;\n    var bl = b.length;\n    var diff = new Array(al); // al >= bl since a > b\n\n    var borrow = 0;\n    var i;\n    var digit;\n\n    for (i = 0; i < bl; i++) {\n      digit = a[i] - borrow - b[i];\n\n      if (digit < 0) {\n        digit += BigInteger_base;\n        borrow = 1;\n      } else {\n        borrow = 0;\n      }\n\n      diff[i] = digit;\n    }\n\n    for (i = bl; i < al; i++) {\n      digit = a[i] - borrow;\n\n      if (digit < 0) {\n        digit += BigInteger_base;\n      } else {\n        diff[i++] = digit;\n        break;\n      }\n\n      diff[i] = digit;\n    }\n\n    for (; i < al; i++) {\n      diff[i] = a[i];\n    }\n\n    return new BigInteger(diff, sign, CONSTRUCT);\n  };\n\n  (function () {\n    function addOne(n, sign) {\n      var a = n._d;\n      var sum = a.slice();\n      var carry = true;\n      var i = 0;\n\n      while (true) {\n        var digit = (a[i] || 0) + 1;\n        sum[i] = digit % BigInteger_base;\n\n        if (digit <= BigInteger_base - 1) {\n          break;\n        }\n\n        ++i;\n      }\n\n      return new BigInteger(sum, sign, CONSTRUCT);\n    }\n\n    function subtractOne(n, sign) {\n      var a = n._d;\n      var sum = a.slice();\n      var borrow = true;\n      var i = 0;\n\n      while (true) {\n        var digit = (a[i] || 0) - 1;\n\n        if (digit < 0) {\n          sum[i] = digit + BigInteger_base;\n        } else {\n          sum[i] = digit;\n          break;\n        }\n\n        ++i;\n      }\n\n      return new BigInteger(sum, sign, CONSTRUCT);\n    }\n    /*\n        Function: next\n        Get the next <BigInteger> (add one).\n        Returns:\n            *this* + 1.\n        See Also:\n            <add>, <prev>\n    */\n\n\n    BigInteger.prototype.next = function () {\n      switch (this._s) {\n        case 0:\n          return ONE;\n\n        case -1:\n          return subtractOne(this, -1);\n        // case 1:\n\n        default:\n          return addOne(this, 1);\n      }\n    };\n    /*\n        Function: prev\n        Get the previous <BigInteger> (subtract one).\n        Returns:\n            *this* - 1.\n        See Also:\n            <next>, <subtract>\n    */\n\n\n    BigInteger.prototype.prev = function () {\n      switch (this._s) {\n        case 0:\n          return M_ONE;\n\n        case -1:\n          return addOne(this, -1);\n        // case 1:\n\n        default:\n          return subtractOne(this, 1);\n      }\n    };\n  })();\n  /*\n      Function: compareAbs\n      Compare the absolute value of two <BigIntegers>.\n      Calling <compareAbs> is faster than calling <abs> twice, then <compare>.\n      Parameters:\n          n - The number to compare to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          -1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\n      See Also:\n          <compare>, <abs>\n  */\n\n\n  BigInteger.prototype.compareAbs = function (n) {\n    if (this === n) {\n      return 0;\n    }\n\n    if (!(n instanceof BigInteger)) {\n      if (!isFinite(n)) {\n        return isNaN(n) ? n : -1;\n      }\n\n      n = BigInteger(n);\n    }\n\n    if (this._s === 0) {\n      return n._s !== 0 ? -1 : 0;\n    }\n\n    if (n._s === 0) {\n      return 1;\n    }\n\n    var l = this._d.length;\n    var nl = n._d.length;\n\n    if (l < nl) {\n      return -1;\n    } else if (l > nl) {\n      return 1;\n    }\n\n    var a = this._d;\n    var b = n._d;\n\n    for (var i = l - 1; i >= 0; i--) {\n      if (a[i] !== b[i]) {\n        return a[i] < b[i] ? -1 : 1;\n      }\n    }\n\n    return 0;\n  };\n  /*\n      Function: compare\n      Compare two <BigIntegers>.\n      Parameters:\n          n - The number to compare to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          -1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\n      See Also:\n          <compareAbs>, <isPositive>, <isNegative>, <isUnit>\n  */\n\n\n  BigInteger.prototype.compare = function (n) {\n    if (this === n) {\n      return 0;\n    }\n\n    n = BigInteger(n);\n\n    if (this._s === 0) {\n      return -n._s;\n    }\n\n    if (this._s === n._s) {\n      // both positive or both negative\n      var cmp = this.compareAbs(n);\n      return cmp * this._s;\n    } else {\n      return this._s;\n    }\n  };\n  /*\n      Function: isUnit\n      Return true iff *this* is either 1 or -1.\n      Returns:\n          true if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\n      See Also:\n          <isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\n          <BigInteger.ONE>, <BigInteger.M_ONE>\n  */\n\n\n  BigInteger.prototype.isUnit = function () {\n    return this === ONE || this === M_ONE || this._d.length === 1 && this._d[0] === 1;\n  };\n  /*\n      Function: multiply\n      Multiply two <BigIntegers>.\n      Parameters:\n          n - The number to multiply *this* by. Will be converted to a\n          <BigInteger>.\n      Returns:\n          The numbers multiplied together.\n      See Also:\n          <add>, <subtract>, <quotient>, <square>\n  */\n\n\n  BigInteger.prototype.multiply = function (n) {\n    // TODO: Consider adding Karatsuba multiplication for large numbers\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return ZERO;\n    }\n\n    if (this.isUnit()) {\n      if (this._s < 0) {\n        return n.negate();\n      }\n\n      return n;\n    }\n\n    if (n.isUnit()) {\n      if (n._s < 0) {\n        return this.negate();\n      }\n\n      return this;\n    }\n\n    if (this === n) {\n      return this.square();\n    }\n\n    var r = this._d.length >= n._d.length;\n    var a = (r ? this : n)._d; // a will be longer than b\n\n    var b = (r ? n : this)._d;\n    var al = a.length;\n    var bl = b.length;\n    var pl = al + bl;\n    var partial = new Array(pl);\n    var i;\n\n    for (i = 0; i < pl; i++) {\n      partial[i] = 0;\n    }\n\n    for (i = 0; i < bl; i++) {\n      var carry = 0;\n      var bi = b[i];\n      var jlimit = al + i;\n      var digit;\n\n      for (var j = i; j < jlimit; j++) {\n        digit = partial[j] + bi * a[j - i] + carry;\n        carry = digit / BigInteger_base | 0;\n        partial[j] = digit % BigInteger_base | 0;\n      }\n\n      if (carry) {\n        digit = partial[j] + carry;\n        carry = digit / BigInteger_base | 0;\n        partial[j] = digit % BigInteger_base;\n      }\n    }\n\n    return new BigInteger(partial, this._s * n._s, CONSTRUCT);\n  }; // Multiply a BigInteger by a single-digit native number\n  // Assumes that this and n are >= 0\n  // This is not really intended to be used outside the library itself\n\n\n  BigInteger.prototype.multiplySingleDigit = function (n) {\n    if (n === 0 || this._s === 0) {\n      return ZERO;\n    }\n\n    if (n === 1) {\n      return this;\n    }\n\n    var digit;\n\n    if (this._d.length === 1) {\n      digit = this._d[0] * n;\n\n      if (digit >= BigInteger_base) {\n        return new BigInteger([digit % BigInteger_base | 0, digit / BigInteger_base | 0], 1, CONSTRUCT);\n      }\n\n      return new BigInteger([digit], 1, CONSTRUCT);\n    }\n\n    if (n === 2) {\n      return this.add(this);\n    }\n\n    if (this.isUnit()) {\n      return new BigInteger([n], 1, CONSTRUCT);\n    }\n\n    var a = this._d;\n    var al = a.length;\n    var pl = al + 1;\n    var partial = new Array(pl);\n\n    for (var i = 0; i < pl; i++) {\n      partial[i] = 0;\n    }\n\n    var carry = 0;\n\n    for (var j = 0; j < al; j++) {\n      digit = n * a[j] + carry;\n      carry = digit / BigInteger_base | 0;\n      partial[j] = digit % BigInteger_base | 0;\n    }\n\n    if (carry) {\n      partial[j] = carry;\n    }\n\n    return new BigInteger(partial, 1, CONSTRUCT);\n  };\n  /*\n      Function: square\n      Multiply a <BigInteger> by itself.\n      This is slightly faster than regular multiplication, since it removes the\n      duplicated multiplcations.\n      Returns:\n          > this.multiply(this)\n      See Also:\n          <multiply>\n  */\n\n\n  BigInteger.prototype.square = function () {\n    // Normally, squaring a 10-digit number would take 100 multiplications.\n    // Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\n    // This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\n    // Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (this.isUnit()) {\n      return ONE;\n    }\n\n    var digits = this._d;\n    var length = digits.length;\n    var imult1 = new Array(length + length + 1);\n    var product, carry, k;\n    var i; // Calculate diagonal\n\n    for (i = 0; i < length; i++) {\n      k = i * 2;\n      product = digits[i] * digits[i];\n      carry = product / BigInteger_base | 0;\n      imult1[k] = product % BigInteger_base;\n      imult1[k + 1] = carry;\n    } // Calculate repeating part\n\n\n    for (i = 0; i < length; i++) {\n      carry = 0;\n      k = i * 2 + 1;\n\n      for (var j = i + 1; j < length; j++, k++) {\n        product = digits[j] * digits[i] * 2 + imult1[k] + carry;\n        carry = product / BigInteger_base | 0;\n        imult1[k] = product % BigInteger_base;\n      }\n\n      k = length + i;\n      var digit = carry + imult1[k];\n      carry = digit / BigInteger_base | 0;\n      imult1[k] = digit % BigInteger_base;\n      imult1[k + 1] += carry;\n    }\n\n    return new BigInteger(imult1, 1, CONSTRUCT);\n  };\n  /*\n      Function: quotient\n      Divide two <BigIntegers> and truncate towards zero.\n      <quotient> throws an exception if *n* is zero.\n      Parameters:\n          n - The number to divide *this* by. Will be converted to a <BigInteger>.\n      Returns:\n          The *this* / *n*, truncated to an integer.\n      See Also:\n          <add>, <subtract>, <multiply>, <divRem>, <remainder>\n  */\n\n\n  BigInteger.prototype.quotient = function (n) {\n    return this.divRem(n)[0];\n  };\n  /*\n      Function: divide\n      Deprecated synonym for <quotient>.\n  */\n\n\n  BigInteger.prototype.divide = BigInteger.prototype.quotient;\n  /*\n      Function: remainder\n      Calculate the remainder of two <BigIntegers>.\n      <remainder> throws an exception if *n* is zero.\n      Parameters:\n          n - The remainder after *this* is divided *this* by *n*. Will be\n              converted to a <BigInteger>.\n      Returns:\n          *this* % *n*.\n      See Also:\n          <divRem>, <quotient>\n  */\n\n  BigInteger.prototype.remainder = function (n) {\n    return this.divRem(n)[1];\n  };\n  /*\n      Function: divRem\n      Calculate the integer quotient and remainder of two <BigIntegers>.\n      <divRem> throws an exception if *n* is zero.\n      Parameters:\n          n - The number to divide *this* by. Will be converted to a <BigInteger>.\n      Returns:\n          A two-element array containing the quotient and the remainder.\n          > a.divRem(b)\n          is exactly equivalent to\n          > [a.quotient(b), a.remainder(b)]\n          except it is faster, because they are calculated at the same time.\n      See Also:\n          <quotient>, <remainder>\n  */\n\n\n  BigInteger.prototype.divRem = function (n) {\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      throw new Error(\"Divide by zero\");\n    }\n\n    if (this._s === 0) {\n      return [ZERO, ZERO];\n    }\n\n    if (n._d.length === 1) {\n      return this.divRemSmall(n._s * n._d[0]);\n    } // Test for easy cases -- |n1| <= |n2|\n\n\n    switch (this.compareAbs(n)) {\n      case 0:\n        // n1 == n2\n        return [this._s === n._s ? ONE : M_ONE, ZERO];\n\n      case -1:\n        // |n1| < |n2|\n        return [ZERO, this];\n    }\n\n    var sign = this._s * n._s;\n    var a = n.abs();\n    var b_digits = this._d;\n    var b_index = b_digits.length;\n    var digits = n._d.length;\n    var quot = [];\n    var guess;\n    var part = new BigInteger([], 0, CONSTRUCT);\n\n    while (b_index) {\n      part._d.unshift(b_digits[--b_index]);\n\n      part = new BigInteger(part._d, 1, CONSTRUCT);\n\n      if (part.compareAbs(n) < 0) {\n        quot.push(0);\n        continue;\n      }\n\n      if (part._s === 0) {\n        guess = 0;\n      } else {\n        var xlen = part._d.length,\n            ylen = a._d.length;\n        var highx = part._d[xlen - 1] * BigInteger_base + part._d[xlen - 2];\n        var highy = a._d[ylen - 1] * BigInteger_base + a._d[ylen - 2];\n\n        if (part._d.length > a._d.length) {\n          // The length of part._d can either match a._d length,\n          // or exceed it by one.\n          highx = (highx + 1) * BigInteger_base;\n        }\n\n        guess = Math.ceil(highx / highy);\n      }\n\n      do {\n        var check = a.multiplySingleDigit(guess);\n\n        if (check.compareAbs(part) <= 0) {\n          break;\n        }\n\n        guess--;\n      } while (guess);\n\n      quot.push(guess);\n\n      if (!guess) {\n        continue;\n      }\n\n      var diff = part.subtract(check);\n      part._d = diff._d.slice();\n    }\n\n    return [new BigInteger(quot.reverse(), sign, CONSTRUCT), new BigInteger(part._d, this._s, CONSTRUCT)];\n  }; // Throws an exception if n is outside of (-BigInteger.base, -1] or\n  // [1, BigInteger.base).  It's not necessary to call this, since the\n  // other division functions will call it if they are able to.\n\n\n  BigInteger.prototype.divRemSmall = function (n) {\n    var r;\n    n = +n;\n\n    if (n === 0) {\n      throw new Error(\"Divide by zero\");\n    }\n\n    var n_s = n < 0 ? -1 : 1;\n    var sign = this._s * n_s;\n    n = Math.abs(n);\n\n    if (n < 1 || n >= BigInteger_base) {\n      throw new Error(\"Argument out of range\");\n    }\n\n    if (this._s === 0) {\n      return [ZERO, ZERO];\n    }\n\n    if (n === 1 || n === -1) {\n      return [sign === 1 ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\n    } // 2 <= n < BigInteger_base\n    // divide a single digit by a single digit\n\n\n    if (this._d.length === 1) {\n      var q = new BigInteger([this._d[0] / n | 0], 1, CONSTRUCT);\n      r = new BigInteger([this._d[0] % n | 0], 1, CONSTRUCT);\n\n      if (sign < 0) {\n        q = q.negate();\n      }\n\n      if (this._s < 0) {\n        r = r.negate();\n      }\n\n      return [q, r];\n    }\n\n    var digits = this._d.slice();\n\n    var quot = new Array(digits.length);\n    var part = 0;\n    var diff = 0;\n    var i = 0;\n    var guess;\n\n    while (digits.length) {\n      part = part * BigInteger_base + digits[digits.length - 1];\n\n      if (part < n) {\n        quot[i++] = 0;\n        digits.pop();\n        diff = BigInteger_base * diff + part;\n        continue;\n      }\n\n      if (part === 0) {\n        guess = 0;\n      } else {\n        guess = part / n | 0;\n      }\n\n      var check = n * guess;\n      diff = part - check;\n      quot[i++] = guess;\n\n      if (!guess) {\n        digits.pop();\n        continue;\n      }\n\n      digits.pop();\n      part = diff;\n    }\n\n    r = new BigInteger([diff], 1, CONSTRUCT);\n\n    if (this._s < 0) {\n      r = r.negate();\n    }\n\n    return [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\n  };\n  /*\n      Function: isEven\n      Return true iff *this* is divisible by two.\n      Note that <BigInteger.ZERO> is even.\n      Returns:\n          true if *this* is even, false otherwise.\n      See Also:\n          <isOdd>\n  */\n\n\n  BigInteger.prototype.isEven = function () {\n    var digits = this._d;\n    return this._s === 0 || digits.length === 0 || digits[0] % 2 === 0;\n  };\n  /*\n      Function: isOdd\n      Return true iff *this* is not divisible by two.\n      Returns:\n          true if *this* is odd, false otherwise.\n      See Also:\n          <isEven>\n  */\n\n\n  BigInteger.prototype.isOdd = function () {\n    return !this.isEven();\n  };\n  /*\n      Function: sign\n      Get the sign of a <BigInteger>.\n      Returns:\n          * -1 if *this* < 0\n          * 0 if *this* == 0\n          * +1 if *this* > 0\n      See Also:\n          <isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.sign = function () {\n    return this._s;\n  };\n  /*\n      Function: isPositive\n      Return true iff *this* > 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == 1.\n      See Also:\n          <sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isPositive = function () {\n    return this._s > 0;\n  };\n  /*\n      Function: isNegative\n      Return true iff *this* < 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == -1.\n      See Also:\n          <sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isNegative = function () {\n    return this._s < 0;\n  };\n  /*\n      Function: isZero\n      Return true iff *this* == 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == 0.\n      See Also:\n          <sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isZero = function () {\n    return this._s === 0;\n  };\n  /*\n      Function: exp10\n      Multiply a <BigInteger> by a power of 10.\n      This is equivalent to, but faster than\n      > if (n >= 0) {\n      >     return this.multiply(BigInteger(\"1e\" + n));\n      > }\n      > else { // n <= 0\n      >     return this.quotient(BigInteger(\"1e\" + -n));\n      > }\n      Parameters:\n          n - The power of 10 to multiply *this* by. *n* is converted to a\n          javascipt number and must be no greater than <BigInteger.MAX_EXP>\n          (0x7FFFFFFF), or an exception will be thrown.\n      Returns:\n          *this* * (10 ** *n*), truncated to an integer if necessary.\n      See Also:\n          <pow>, <multiply>\n  */\n\n\n  BigInteger.prototype.exp10 = function (n) {\n    n = +n;\n\n    if (n === 0) {\n      return this;\n    }\n\n    if (Math.abs(n) > Number(MAX_EXP)) {\n      throw new Error(\"exponent too large in BigInteger.exp10\");\n    } // Optimization for this == 0. This also keeps us from having to trim zeros in the positive n case\n\n\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (n > 0) {\n      var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n      for (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n        k._d.unshift(0);\n      }\n\n      if (n == 0) return k;\n      k._s = 1;\n      k = k.multiplySingleDigit(Math.pow(10, n));\n      return this._s < 0 ? k.negate() : k;\n    } else if (-n >= this._d.length * BigInteger_base_log10) {\n      return ZERO;\n    } else {\n      var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n      for (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n        k._d.shift();\n      }\n\n      return n == 0 ? k : k.divRemSmall(Math.pow(10, n))[0];\n    }\n  };\n  /*\n      Function: pow\n      Raise a <BigInteger> to a power.\n      In this implementation, 0**0 is 1.\n      Parameters:\n          n - The exponent to raise *this* by. *n* must be no greater than\n          <BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\n      Returns:\n          *this* raised to the *nth* power.\n      See Also:\n          <modPow>\n  */\n\n\n  BigInteger.prototype.pow = function (n) {\n    if (this.isUnit()) {\n      if (this._s > 0) {\n        return this;\n      } else {\n        return BigInteger(n).isOdd() ? this : this.negate();\n      }\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return ONE;\n    } else if (n._s < 0) {\n      if (this._s === 0) {\n        throw new Error(\"Divide by zero\");\n      } else {\n        return ZERO;\n      }\n    }\n\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (n.isUnit()) {\n      return this;\n    }\n\n    if (n.compareAbs(MAX_EXP) > 0) {\n      throw new Error(\"exponent too large in BigInteger.pow\");\n    }\n\n    var x = this;\n    var aux = ONE;\n    var two = BigInteger.small[2];\n\n    while (n.isPositive()) {\n      if (n.isOdd()) {\n        aux = aux.multiply(x);\n\n        if (n.isUnit()) {\n          return aux;\n        }\n      }\n\n      x = x.square();\n      n = n.quotient(two);\n    }\n\n    return aux;\n  };\n  /*\n      Function: modPow\n      Raise a <BigInteger> to a power (mod m).\n      Because it is reduced by a modulus, <modPow> is not limited by\n      <BigInteger.MAX_EXP> like <pow>.\n      Parameters:\n          exponent - The exponent to raise *this* by. Must be positive.\n          modulus - The modulus.\n      Returns:\n          *this* ^ *exponent* (mod *modulus*).\n      See Also:\n          <pow>, <mod>\n  */\n\n\n  BigInteger.prototype.modPow = function (exponent, modulus) {\n    var result = ONE;\n    var base = this;\n\n    while (exponent.isPositive()) {\n      if (exponent.isOdd()) {\n        result = result.multiply(base).remainder(modulus);\n      }\n\n      exponent = exponent.quotient(BigInteger.small[2]);\n\n      if (exponent.isPositive()) {\n        base = base.square().remainder(modulus);\n      }\n    }\n\n    return result;\n  };\n  /*\n      Function: log\n      Get the natural logarithm of a <BigInteger> as a native JavaScript number.\n      This is equivalent to\n      > Math.log(this.toJSValue())\n      but handles values outside of the native number range.\n      Returns:\n          log( *this* )\n      See Also:\n          <toJSValue>\n  */\n\n\n  BigInteger.prototype.log = function () {\n    switch (this._s) {\n      case 0:\n        return -Infinity;\n\n      case -1:\n        return NaN;\n\n      default: // Fall through.\n\n    }\n\n    var l = this._d.length;\n\n    if (l * BigInteger_base_log10 < 30) {\n      return Math.log(this.valueOf());\n    }\n\n    var N = Math.ceil(30 / BigInteger_base_log10);\n\n    var firstNdigits = this._d.slice(l - N);\n\n    return Math.log(new BigInteger(firstNdigits, 1, CONSTRUCT).valueOf()) + (l - N) * Math.log(BigInteger_base);\n  };\n  /*\n      Function: valueOf\n      Convert a <BigInteger> to a native JavaScript integer.\n      This is called automatically by JavaScipt to convert a <BigInteger> to a\n      native value.\n      Returns:\n          > parseInt(this.toString(), 10)\n      See Also:\n          <toString>, <toJSValue>\n  */\n\n\n  BigInteger.prototype.valueOf = function () {\n    return parseInt(this.toString(), 10);\n  };\n  /*\n      Function: toJSValue\n      Convert a <BigInteger> to a native JavaScript integer.\n      This is the same as valueOf, but more explicitly named.\n      Returns:\n          > parseInt(this.toString(), 10)\n      See Also:\n          <toString>, <valueOf>\n  */\n\n\n  BigInteger.prototype.toJSValue = function () {\n    return parseInt(this.toString(), 10);\n  };\n  /*\n   Function: lowVal\n   Author: Lucas Jones\n   */\n\n\n  BigInteger.prototype.lowVal = function () {\n    return this._d[0] || 0;\n  };\n\n  var MAX_EXP = BigInteger(0x7FFFFFFF); // Constant: MAX_EXP\n  // The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\n\n  BigInteger.MAX_EXP = MAX_EXP;\n\n  (function () {\n    function makeUnary(fn) {\n      return function (a) {\n        return fn.call(BigInteger(a));\n      };\n    }\n\n    function makeBinary(fn) {\n      return function (a, b) {\n        return fn.call(BigInteger(a), BigInteger(b));\n      };\n    }\n\n    function makeTrinary(fn) {\n      return function (a, b, c) {\n        return fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\n      };\n    }\n\n    (function () {\n      var i, fn;\n      var unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\n      var binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\n      var trinary = [\"modPow\"];\n\n      for (i = 0; i < unary.length; i++) {\n        fn = unary[i];\n        BigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\n      }\n\n      for (i = 0; i < binary.length; i++) {\n        fn = binary[i];\n        BigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\n      }\n\n      for (i = 0; i < trinary.length; i++) {\n        fn = trinary[i];\n        BigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\n      }\n\n      BigInteger.exp10 = function (x, n) {\n        return BigInteger(x).exp10(n);\n      };\n    })();\n  })();\n\n  exports.JSBigInt = BigInteger; // exports.BigInteger changed to exports.JSBigInt\n})(typeof exports !== 'undefined' ? exports : this);","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/wallet-address-validator/src/crypto/biginteger.js"],"names":["exports","CONSTRUCT","BigInteger","n","s","token","ZERO","parse","length","_d","_s","_construct","BigInteger_base","BigInteger_base_log10","base","base_log10","ONE","M_ONE","_0","_1","small","digits","split","prototype","toString","Error","str","i","group","numerals","sign","abs","digit","divmod","divRem","push","valueOf","reverse","join","radixRegex","expandExponential","replace","x","f","c","l","Math","z","Array","r","substr","prefixRE","parts","RegExp","exec","baseSection","test","d","parseInt","splice","multiply","add","negate","subtract","a","b","al","bl","sum","max","size","min","carry","m","compareAbs","t","diff","borrow","addOne","slice","subtractOne","next","prev","isFinite","isNaN","nl","compare","cmp","isUnit","square","pl","partial","bi","jlimit","j","multiplySingleDigit","imult1","product","k","quotient","divide","remainder","divRemSmall","b_digits","b_index","quot","guess","part","unshift","xlen","ylen","highx","highy","ceil","check","n_s","q","pop","isEven","isOdd","isPositive","isNegative","isZero","exp10","Number","MAX_EXP","pow","shift","aux","two","modPow","exponent","modulus","result","log","Infinity","NaN","N","firstNdigits","toJSValue","lowVal","makeUnary","fn","call","makeBinary","makeTrinary","unary","binary","trinary","JSBigInt"],"mappings":"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","sourcesContent":["/*\n\tJavaScript BigInteger library version 0.9.1\n\thttp://silentmatt.com/biginteger/\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\n\tLicensed under the MIT license.\n\tSupport for arbitrary internal representation base was added by\n\tVitaly Magerya.\n*/\n\n/*\n\tFile: biginteger.js\n\tExports:\n\t\t<BigInteger>\n*/\n(function(exports) {\n    \"use strict\";\n    /*\n        Class: BigInteger\n        An arbitrarily-large integer.\n        <BigInteger> objects should be considered immutable. None of the \"built-in\"\n        methods modify *this* or their arguments. All properties should be\n        considered private.\n        All the methods of <BigInteger> instances can be called \"statically\". The\n        static versions are convenient if you don't already have a <BigInteger>\n        object.\n        As an example, these calls are equivalent.\n        > BigInteger(4).multiply(5); // returns BigInteger(20);\n        > BigInteger.multiply(4, 5); // returns BigInteger(20);\n        > var a = 42;\n        > var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\n    */\n    \n    var CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\n    \n    /*\n        Constructor: BigInteger()\n        Convert a value to a <BigInteger>.\n        Although <BigInteger()> is the constructor for <BigInteger> objects, it is\n        best not to call it as a constructor. If *n* is a <BigInteger> object, it is\n        simply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\n        without a radix argument.\n        > var n0 = BigInteger();      // Same as <BigInteger.ZERO>\n        > var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\n        > var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\n        > var n3 = BigInteger(n2);    // Return n2, unchanged\n        The constructor form only takes an array and a sign. *n* must be an\n        array of numbers in little-endian order, where each digit is between 0\n        and BigInteger.base.  The second parameter sets the sign: -1 for\n        negative, +1 for positive, or 0 for zero. The array is *not copied and\n        may be modified*. If the array contains only zeros, the sign parameter\n        is ignored and is forced to zero.\n        > new BigInteger([5], -1): create a new BigInteger with value -5\n        Parameters:\n            n - Value to convert to a <BigInteger>.\n        Returns:\n            A <BigInteger> value.\n        See Also:\n            <parse>, <BigInteger>\n    */\n    function BigInteger(n, s, token) {\n        \n        if (token !== CONSTRUCT) {\n            if (n instanceof BigInteger) {\n                return n;\n            }\n            else if (typeof n === \"undefined\") {\n                return ZERO;\n            }\n            return BigInteger.parse(n);\n        }\n    \n        n = n || [];  // Provide the nullary constructor for subclasses.\n        while (n.length && !n[n.length - 1]) {\n            --n.length;\n        }\n        this._d = n;\n        this._s = n.length ? (s || 1) : 0;\n    }\n    \n    BigInteger._construct = function(n, s) {\n        return new BigInteger(n, s, CONSTRUCT);\n    };\n    \n    // Base-10 speedup hacks in parse, toString, exp10 and log functions\n    // require base to be a power of 10. 10^7 is the largest such power\n    // that won't cause a precision loss when digits are multiplied.\n    var BigInteger_base = 10000000;\n    var BigInteger_base_log10 = 7;\n    \n    BigInteger.base = BigInteger_base;\n    BigInteger.base_log10 = BigInteger_base_log10;\n    \n    var ZERO = new BigInteger([], 0, CONSTRUCT);\n    // Constant: ZERO\n    // <BigInteger> 0.\n    BigInteger.ZERO = ZERO;\n    \n    var ONE = new BigInteger([1], 1, CONSTRUCT);\n    // Constant: ONE\n    // <BigInteger> 1.\n    BigInteger.ONE = ONE;\n    \n    var M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT);\n    // Constant: M_ONE\n    // <BigInteger> -1.\n    BigInteger.M_ONE = M_ONE;\n    \n    // Constant: _0\n    // Shortcut for <ZERO>.\n    BigInteger._0 = ZERO;\n    \n    // Constant: _1\n    // Shortcut for <ONE>.\n    BigInteger._1 = ONE;\n    \n    /*\n        Constant: small\n        Array of <BigIntegers> from 0 to 36.\n        These are used internally for parsing, but useful when you need a \"small\"\n        <BigInteger>.\n        See Also:\n            <ZERO>, <ONE>, <_0>, <_1>\n    */\n    BigInteger.small = [\n        ZERO,\n        ONE,\n        /* Assuming BigInteger_base > 36 */\n        new BigInteger( [2], 1, CONSTRUCT),\n        new BigInteger( [3], 1, CONSTRUCT),\n        new BigInteger( [4], 1, CONSTRUCT),\n        new BigInteger( [5], 1, CONSTRUCT),\n        new BigInteger( [6], 1, CONSTRUCT),\n        new BigInteger( [7], 1, CONSTRUCT),\n        new BigInteger( [8], 1, CONSTRUCT),\n        new BigInteger( [9], 1, CONSTRUCT),\n        new BigInteger([10], 1, CONSTRUCT),\n        new BigInteger([11], 1, CONSTRUCT),\n        new BigInteger([12], 1, CONSTRUCT),\n        new BigInteger([13], 1, CONSTRUCT),\n        new BigInteger([14], 1, CONSTRUCT),\n        new BigInteger([15], 1, CONSTRUCT),\n        new BigInteger([16], 1, CONSTRUCT),\n        new BigInteger([17], 1, CONSTRUCT),\n        new BigInteger([18], 1, CONSTRUCT),\n        new BigInteger([19], 1, CONSTRUCT),\n        new BigInteger([20], 1, CONSTRUCT),\n        new BigInteger([21], 1, CONSTRUCT),\n        new BigInteger([22], 1, CONSTRUCT),\n        new BigInteger([23], 1, CONSTRUCT),\n        new BigInteger([24], 1, CONSTRUCT),\n        new BigInteger([25], 1, CONSTRUCT),\n        new BigInteger([26], 1, CONSTRUCT),\n        new BigInteger([27], 1, CONSTRUCT),\n        new BigInteger([28], 1, CONSTRUCT),\n        new BigInteger([29], 1, CONSTRUCT),\n        new BigInteger([30], 1, CONSTRUCT),\n        new BigInteger([31], 1, CONSTRUCT),\n        new BigInteger([32], 1, CONSTRUCT),\n        new BigInteger([33], 1, CONSTRUCT),\n        new BigInteger([34], 1, CONSTRUCT),\n        new BigInteger([35], 1, CONSTRUCT),\n        new BigInteger([36], 1, CONSTRUCT)\n    ];\n    \n    // Used for parsing/radix conversion\n    BigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    \n    /*\n        Method: toString\n        Convert a <BigInteger> to a string.\n        When *base* is greater than 10, letters are upper case.\n        Parameters:\n            base - Optional base to represent the number in (default is base 10).\n                   Must be between 2 and 36 inclusive, or an Error will be thrown.\n        Returns:\n            The string representation of the <BigInteger>.\n    */\n    BigInteger.prototype.toString = function(base) {\n        base = +base || 10;\n        if (base < 2 || base > 36) {\n            throw new Error(\"illegal radix \" + base + \".\");\n        }\n        if (this._s === 0) {\n            return \"0\";\n        }\n        if (base === 10) {\n            var str = this._s < 0 ? \"-\" : \"\";\n            str += this._d[this._d.length - 1].toString();\n            for (var i = this._d.length - 2; i >= 0; i--) {\n                var group = this._d[i].toString();\n                while (group.length < BigInteger_base_log10) group = '0' + group;\n                str += group;\n            }\n            return str;\n        }\n        else {\n            var numerals = BigInteger.digits;\n            base = BigInteger.small[base];\n            var sign = this._s;\n    \n            var n = this.abs();\n            var digits = [];\n            var digit;\n    \n            while (n._s !== 0) {\n                var divmod = n.divRem(base);\n                n = divmod[0];\n                digit = divmod[1];\n                // TODO: This could be changed to unshift instead of reversing at the end.\n                // Benchmark both to compare speeds.\n                digits.push(numerals[digit.valueOf()]);\n            }\n            return (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\n        }\n    };\n    \n    // Verify strings for parsing\n    BigInteger.radixRegex = [\n        /^$/,\n        /^$/,\n        /^[01]*$/,\n        /^[012]*$/,\n        /^[0-3]*$/,\n        /^[0-4]*$/,\n        /^[0-5]*$/,\n        /^[0-6]*$/,\n        /^[0-7]*$/,\n        /^[0-8]*$/,\n        /^[0-9]*$/,\n        /^[0-9aA]*$/,\n        /^[0-9abAB]*$/,\n        /^[0-9abcABC]*$/,\n        /^[0-9a-dA-D]*$/,\n        /^[0-9a-eA-E]*$/,\n        /^[0-9a-fA-F]*$/,\n        /^[0-9a-gA-G]*$/,\n        /^[0-9a-hA-H]*$/,\n        /^[0-9a-iA-I]*$/,\n        /^[0-9a-jA-J]*$/,\n        /^[0-9a-kA-K]*$/,\n        /^[0-9a-lA-L]*$/,\n        /^[0-9a-mA-M]*$/,\n        /^[0-9a-nA-N]*$/,\n        /^[0-9a-oA-O]*$/,\n        /^[0-9a-pA-P]*$/,\n        /^[0-9a-qA-Q]*$/,\n        /^[0-9a-rA-R]*$/,\n        /^[0-9a-sA-S]*$/,\n        /^[0-9a-tA-T]*$/,\n        /^[0-9a-uA-U]*$/,\n        /^[0-9a-vA-V]*$/,\n        /^[0-9a-wA-W]*$/,\n        /^[0-9a-xA-X]*$/,\n        /^[0-9a-yA-Y]*$/,\n        /^[0-9a-zA-Z]*$/\n    ];\n    \n    /*\n        Function: parse\n        Parse a string into a <BigInteger>.\n        *base* is optional but, if provided, must be from 2 to 36 inclusive. If\n        *base* is not provided, it will be guessed based on the leading characters\n        of *s* as follows:\n        - \"0x\" or \"0X\": *base* = 16\n        - \"0c\" or \"0C\": *base* = 8\n        - \"0b\" or \"0B\": *base* = 2\n        - else: *base* = 10\n        If no base is provided, or *base* is 10, the number can be in exponential\n        form. For example, these are all valid:\n        > BigInteger.parse(\"1e9\");              // Same as \"1000000000\"\n        > BigInteger.parse(\"1.234*10^3\");       // Same as 1234\n        > BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\n        If any characters fall outside the range defined by the radix, an exception\n        will be thrown.\n        Parameters:\n            s - The string to parse.\n            base - Optional radix (default is to guess based on *s*).\n        Returns:\n            a <BigInteger> instance.\n    */\n    BigInteger.parse = function(s, base) {\n        // Expands a number in exponential form to decimal form.\n        // expandExponential(\"-13.441*10^5\") === \"1344100\";\n        // expandExponential(\"1.12300e-1\") === \"0.112300\";\n        // expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\n        function expandExponential(str) {\n            str = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\n    \n            return str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function(x, s, n, f, c) {\n                c = +c;\n                var l = c < 0;\n                var i = n.length + c;\n                x = (l ? n : f).length;\n                c = ((c = Math.abs(c)) >= x ? c - x + l : 0);\n                var z = (new Array(c + 1)).join(\"0\");\n                var r = n + f;\n                return (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\n            });\n        }\n    \n        s = s.toString();\n        if (typeof base === \"undefined\" || +base === 10) {\n            s = expandExponential(s);\n        }\n    \n        var prefixRE;\n        if (typeof base === \"undefined\") {\n            prefixRE = '0[xcb]';\n        }\n        else if (base == 16) {\n            prefixRE = '0x';\n        }\n        else if (base == 8) {\n            prefixRE = '0c';\n        }\n        else if (base == 2) {\n            prefixRE = '0b';\n        }\n        else {\n            prefixRE = '';\n        }\n        var parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\n        if (parts) {\n            var sign = parts[1] || \"+\";\n            var baseSection = parts[2] || \"\";\n            var digits = parts[3] || \"\";\n    \n            if (typeof base === \"undefined\") {\n                // Guess base\n                if (baseSection === \"0x\" || baseSection === \"0X\") { // Hex\n                    base = 16;\n                }\n                else if (baseSection === \"0c\" || baseSection === \"0C\") { // Octal\n                    base = 8;\n                }\n                else if (baseSection === \"0b\" || baseSection === \"0B\") { // Binary\n                    base = 2;\n                }\n                else {\n                    base = 10;\n                }\n            }\n            else if (base < 2 || base > 36) {\n                throw new Error(\"Illegal radix \" + base + \".\");\n            }\n    \n            base = +base;\n    \n            // Check for digits outside the range\n            if (!(BigInteger.radixRegex[base].test(digits))) {\n                throw new Error(\"Bad digit for radix \" + base);\n            }\n    \n            // Strip leading zeros, and convert to array\n            digits = digits.replace(/^0+/, \"\").split(\"\");\n            if (digits.length === 0) {\n                return ZERO;\n            }\n    \n            // Get the sign (we know it's not zero)\n            sign = (sign === \"-\") ? -1 : 1;\n    \n            // Optimize 10\n            if (base == 10) {\n                var d = [];\n                while (digits.length >= BigInteger_base_log10) {\n                    d.push(parseInt(digits.splice(digits.length-BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\n                }\n                d.push(parseInt(digits.join(''), 10));\n                return new BigInteger(d, sign, CONSTRUCT);\n            }\n    \n            // Do the conversion\n            var d = ZERO;\n            base = BigInteger.small[base];\n            var small = BigInteger.small;\n            for (var i = 0; i < digits.length; i++) {\n                d = d.multiply(base).add(small[parseInt(digits[i], 36)]);\n            }\n            return new BigInteger(d._d, sign, CONSTRUCT);\n        }\n        else {\n            throw new Error(\"Invalid BigInteger format: \" + s);\n        }\n    };\n    \n    /*\n        Function: add\n        Add two <BigIntegers>.\n        Parameters:\n            n - The number to add to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            The numbers added together.\n        See Also:\n            <subtract>, <multiply>, <quotient>, <next>\n    */\n    BigInteger.prototype.add = function(n) {\n        if (this._s === 0) {\n            return BigInteger(n);\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return this;\n        }\n        if (this._s !== n._s) {\n            n = n.negate();\n            return this.subtract(n);\n        }\n    \n        var a = this._d;\n        var b = n._d;\n        var al = a.length;\n        var bl = b.length;\n        var sum = new Array(Math.max(al, bl) + 1);\n        var size = Math.min(al, bl);\n        var carry = 0;\n        var digit;\n    \n        for (var i = 0; i < size; i++) {\n            digit = a[i] + b[i] + carry;\n            sum[i] = digit % BigInteger_base;\n            carry = (digit / BigInteger_base) | 0;\n        }\n        if (bl > al) {\n            a = b;\n            al = bl;\n        }\n        for (i = size; carry && i < al; i++) {\n            digit = a[i] + carry;\n            sum[i] = digit % BigInteger_base;\n            carry = (digit / BigInteger_base) | 0;\n        }\n        if (carry) {\n            sum[i] = carry;\n        }\n    \n        for ( ; i < al; i++) {\n            sum[i] = a[i];\n        }\n    \n        return new BigInteger(sum, this._s, CONSTRUCT);\n    };\n    \n    /*\n        Function: negate\n        Get the additive inverse of a <BigInteger>.\n        Returns:\n            A <BigInteger> with the same magnatude, but with the opposite sign.\n        See Also:\n            <abs>\n    */\n    BigInteger.prototype.negate = function() {\n        return new BigInteger(this._d, (-this._s) | 0, CONSTRUCT);\n    };\n    \n    /*\n        Function: abs\n        Get the absolute value of a <BigInteger>.\n        Returns:\n            A <BigInteger> with the same magnatude, but always positive (or zero).\n        See Also:\n            <negate>\n    */\n    BigInteger.prototype.abs = function() {\n        return (this._s < 0) ? this.negate() : this;\n    };\n    \n    /*\n        Function: subtract\n        Subtract two <BigIntegers>.\n        Parameters:\n            n - The number to subtract from *this*. Will be converted to a <BigInteger>.\n        Returns:\n            The *n* subtracted from *this*.\n        See Also:\n            <add>, <multiply>, <quotient>, <prev>\n    */\n    BigInteger.prototype.subtract = function(n) {\n        if (this._s === 0) {\n            return BigInteger(n).negate();\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return this;\n        }\n        if (this._s !== n._s) {\n            n = n.negate();\n            return this.add(n);\n        }\n    \n        var m = this;\n        // negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\n        if (this._s < 0) {\n            m = new BigInteger(n._d, 1, CONSTRUCT);\n            n = new BigInteger(this._d, 1, CONSTRUCT);\n        }\n    \n        // Both are positive => a - b\n        var sign = m.compareAbs(n);\n        if (sign === 0) {\n            return ZERO;\n        }\n        else if (sign < 0) {\n            // swap m and n\n            var t = n;\n            n = m;\n            m = t;\n        }\n    \n        // a > b\n        var a = m._d;\n        var b = n._d;\n        var al = a.length;\n        var bl = b.length;\n        var diff = new Array(al); // al >= bl since a > b\n        var borrow = 0;\n        var i;\n        var digit;\n    \n        for (i = 0; i < bl; i++) {\n            digit = a[i] - borrow - b[i];\n            if (digit < 0) {\n                digit += BigInteger_base;\n                borrow = 1;\n            }\n            else {\n                borrow = 0;\n            }\n            diff[i] = digit;\n        }\n        for (i = bl; i < al; i++) {\n            digit = a[i] - borrow;\n            if (digit < 0) {\n                digit += BigInteger_base;\n            }\n            else {\n                diff[i++] = digit;\n                break;\n            }\n            diff[i] = digit;\n        }\n        for ( ; i < al; i++) {\n            diff[i] = a[i];\n        }\n    \n        return new BigInteger(diff, sign, CONSTRUCT);\n    };\n    \n    (function() {\n        function addOne(n, sign) {\n            var a = n._d;\n            var sum = a.slice();\n            var carry = true;\n            var i = 0;\n    \n            while (true) {\n                var digit = (a[i] || 0) + 1;\n                sum[i] = digit % BigInteger_base;\n                if (digit <= BigInteger_base - 1) {\n                    break;\n                }\n                ++i;\n            }\n    \n            return new BigInteger(sum, sign, CONSTRUCT);\n        }\n    \n        function subtractOne(n, sign) {\n            var a = n._d;\n            var sum = a.slice();\n            var borrow = true;\n            var i = 0;\n    \n            while (true) {\n                var digit = (a[i] || 0) - 1;\n                if (digit < 0) {\n                    sum[i] = digit + BigInteger_base;\n                }\n                else {\n                    sum[i] = digit;\n                    break;\n                }\n                ++i;\n            }\n    \n            return new BigInteger(sum, sign, CONSTRUCT);\n        }\n    \n        /*\n            Function: next\n            Get the next <BigInteger> (add one).\n            Returns:\n                *this* + 1.\n            See Also:\n                <add>, <prev>\n        */\n        BigInteger.prototype.next = function() {\n            switch (this._s) {\n            case 0:\n                return ONE;\n            case -1:\n                return subtractOne(this, -1);\n            // case 1:\n            default:\n                return addOne(this, 1);\n            }\n        };\n    \n        /*\n            Function: prev\n            Get the previous <BigInteger> (subtract one).\n            Returns:\n                *this* - 1.\n            See Also:\n                <next>, <subtract>\n        */\n        BigInteger.prototype.prev = function() {\n            switch (this._s) {\n            case 0:\n                return M_ONE;\n            case -1:\n                return addOne(this, -1);\n            // case 1:\n            default:\n                return subtractOne(this, 1);\n            }\n        };\n    })();\n    \n    /*\n        Function: compareAbs\n        Compare the absolute value of two <BigIntegers>.\n        Calling <compareAbs> is faster than calling <abs> twice, then <compare>.\n        Parameters:\n            n - The number to compare to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            -1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\n        See Also:\n            <compare>, <abs>\n    */\n    BigInteger.prototype.compareAbs = function(n) {\n        if (this === n) {\n            return 0;\n        }\n    \n        if (!(n instanceof BigInteger)) {\n            if (!isFinite(n)) {\n                return(isNaN(n) ? n : -1);\n            }\n            n = BigInteger(n);\n        }\n    \n        if (this._s === 0) {\n            return (n._s !== 0) ? -1 : 0;\n        }\n        if (n._s === 0) {\n            return 1;\n        }\n    \n        var l = this._d.length;\n        var nl = n._d.length;\n        if (l < nl) {\n            return -1;\n        }\n        else if (l > nl) {\n            return 1;\n        }\n    \n        var a = this._d;\n        var b = n._d;\n        for (var i = l-1; i >= 0; i--) {\n            if (a[i] !== b[i]) {\n                return a[i] < b[i] ? -1 : 1;\n            }\n        }\n    \n        return 0;\n    };\n    \n    /*\n        Function: compare\n        Compare two <BigIntegers>.\n        Parameters:\n            n - The number to compare to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            -1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\n        See Also:\n            <compareAbs>, <isPositive>, <isNegative>, <isUnit>\n    */\n    BigInteger.prototype.compare = function(n) {\n        if (this === n) {\n            return 0;\n        }\n    \n        n = BigInteger(n);\n    \n        if (this._s === 0) {\n            return -n._s;\n        }\n    \n        if (this._s === n._s) { // both positive or both negative\n            var cmp = this.compareAbs(n);\n            return cmp * this._s;\n        }\n        else {\n            return this._s;\n        }\n    };\n    \n    /*\n        Function: isUnit\n        Return true iff *this* is either 1 or -1.\n        Returns:\n            true if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\n        See Also:\n            <isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\n            <BigInteger.ONE>, <BigInteger.M_ONE>\n    */\n    BigInteger.prototype.isUnit = function() {\n        return this === ONE ||\n            this === M_ONE ||\n            (this._d.length === 1 && this._d[0] === 1);\n    };\n    \n    /*\n        Function: multiply\n        Multiply two <BigIntegers>.\n        Parameters:\n            n - The number to multiply *this* by. Will be converted to a\n            <BigInteger>.\n        Returns:\n            The numbers multiplied together.\n        See Also:\n            <add>, <subtract>, <quotient>, <square>\n    */\n    BigInteger.prototype.multiply = function(n) {\n        // TODO: Consider adding Karatsuba multiplication for large numbers\n        if (this._s === 0) {\n            return ZERO;\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return ZERO;\n        }\n        if (this.isUnit()) {\n            if (this._s < 0) {\n                return n.negate();\n            }\n            return n;\n        }\n        if (n.isUnit()) {\n            if (n._s < 0) {\n                return this.negate();\n            }\n            return this;\n        }\n        if (this === n) {\n            return this.square();\n        }\n    \n        var r = (this._d.length >= n._d.length);\n        var a = (r ? this : n)._d; // a will be longer than b\n        var b = (r ? n : this)._d;\n        var al = a.length;\n        var bl = b.length;\n    \n        var pl = al + bl;\n        var partial = new Array(pl);\n        var i;\n        for (i = 0; i < pl; i++) {\n            partial[i] = 0;\n        }\n    \n        for (i = 0; i < bl; i++) {\n            var carry = 0;\n            var bi = b[i];\n            var jlimit = al + i;\n            var digit;\n            for (var j = i; j < jlimit; j++) {\n                digit = partial[j] + bi * a[j - i] + carry;\n                carry = (digit / BigInteger_base) | 0;\n                partial[j] = (digit % BigInteger_base) | 0;\n            }\n            if (carry) {\n                digit = partial[j] + carry;\n                carry = (digit / BigInteger_base) | 0;\n                partial[j] = digit % BigInteger_base;\n            }\n        }\n        return new BigInteger(partial, this._s * n._s, CONSTRUCT);\n    };\n    \n    // Multiply a BigInteger by a single-digit native number\n    // Assumes that this and n are >= 0\n    // This is not really intended to be used outside the library itself\n    BigInteger.prototype.multiplySingleDigit = function(n) {\n        if (n === 0 || this._s === 0) {\n            return ZERO;\n        }\n        if (n === 1) {\n            return this;\n        }\n    \n        var digit;\n        if (this._d.length === 1) {\n            digit = this._d[0] * n;\n            if (digit >= BigInteger_base) {\n                return new BigInteger([(digit % BigInteger_base)|0,\n                        (digit / BigInteger_base)|0], 1, CONSTRUCT);\n            }\n            return new BigInteger([digit], 1, CONSTRUCT);\n        }\n    \n        if (n === 2) {\n            return this.add(this);\n        }\n        if (this.isUnit()) {\n            return new BigInteger([n], 1, CONSTRUCT);\n        }\n    \n        var a = this._d;\n        var al = a.length;\n    \n        var pl = al + 1;\n        var partial = new Array(pl);\n        for (var i = 0; i < pl; i++) {\n            partial[i] = 0;\n        }\n    \n        var carry = 0;\n        for (var j = 0; j < al; j++) {\n            digit = n * a[j] + carry;\n            carry = (digit / BigInteger_base) | 0;\n            partial[j] = (digit % BigInteger_base) | 0;\n        }\n        if (carry) {\n            partial[j] = carry;\n        }\n    \n        return new BigInteger(partial, 1, CONSTRUCT);\n    };\n    \n    /*\n        Function: square\n        Multiply a <BigInteger> by itself.\n        This is slightly faster than regular multiplication, since it removes the\n        duplicated multiplcations.\n        Returns:\n            > this.multiply(this)\n        See Also:\n            <multiply>\n    */\n    BigInteger.prototype.square = function() {\n        // Normally, squaring a 10-digit number would take 100 multiplications.\n        // Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\n        // This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\n        // Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\n    \n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (this.isUnit()) {\n            return ONE;\n        }\n    \n        var digits = this._d;\n        var length = digits.length;\n        var imult1 = new Array(length + length + 1);\n        var product, carry, k;\n        var i;\n    \n        // Calculate diagonal\n        for (i = 0; i < length; i++) {\n            k = i * 2;\n            product = digits[i] * digits[i];\n            carry = (product / BigInteger_base) | 0;\n            imult1[k] = product % BigInteger_base;\n            imult1[k + 1] = carry;\n        }\n    \n        // Calculate repeating part\n        for (i = 0; i < length; i++) {\n            carry = 0;\n            k = i * 2 + 1;\n            for (var j = i + 1; j < length; j++, k++) {\n                product = digits[j] * digits[i] * 2 + imult1[k] + carry;\n                carry = (product / BigInteger_base) | 0;\n                imult1[k] = product % BigInteger_base;\n            }\n            k = length + i;\n            var digit = carry + imult1[k];\n            carry = (digit / BigInteger_base) | 0;\n            imult1[k] = digit % BigInteger_base;\n            imult1[k + 1] += carry;\n        }\n    \n        return new BigInteger(imult1, 1, CONSTRUCT);\n    };\n    \n    /*\n        Function: quotient\n        Divide two <BigIntegers> and truncate towards zero.\n        <quotient> throws an exception if *n* is zero.\n        Parameters:\n            n - The number to divide *this* by. Will be converted to a <BigInteger>.\n        Returns:\n            The *this* / *n*, truncated to an integer.\n        See Also:\n            <add>, <subtract>, <multiply>, <divRem>, <remainder>\n    */\n    BigInteger.prototype.quotient = function(n) {\n        return this.divRem(n)[0];\n    };\n    \n    /*\n        Function: divide\n        Deprecated synonym for <quotient>.\n    */\n    BigInteger.prototype.divide = BigInteger.prototype.quotient;\n    \n    /*\n        Function: remainder\n        Calculate the remainder of two <BigIntegers>.\n        <remainder> throws an exception if *n* is zero.\n        Parameters:\n            n - The remainder after *this* is divided *this* by *n*. Will be\n                converted to a <BigInteger>.\n        Returns:\n            *this* % *n*.\n        See Also:\n            <divRem>, <quotient>\n    */\n    BigInteger.prototype.remainder = function(n) {\n        return this.divRem(n)[1];\n    };\n    \n    /*\n        Function: divRem\n        Calculate the integer quotient and remainder of two <BigIntegers>.\n        <divRem> throws an exception if *n* is zero.\n        Parameters:\n            n - The number to divide *this* by. Will be converted to a <BigInteger>.\n        Returns:\n            A two-element array containing the quotient and the remainder.\n            > a.divRem(b)\n            is exactly equivalent to\n            > [a.quotient(b), a.remainder(b)]\n            except it is faster, because they are calculated at the same time.\n        See Also:\n            <quotient>, <remainder>\n    */\n    BigInteger.prototype.divRem = function(n) {\n        n = BigInteger(n);\n        if (n._s === 0) {\n            throw new Error(\"Divide by zero\");\n        }\n        if (this._s === 0) {\n            return [ZERO, ZERO];\n        }\n        if (n._d.length === 1) {\n            return this.divRemSmall(n._s * n._d[0]);\n        }\n    \n        // Test for easy cases -- |n1| <= |n2|\n        switch (this.compareAbs(n)) {\n        case 0: // n1 == n2\n            return [this._s === n._s ? ONE : M_ONE, ZERO];\n        case -1: // |n1| < |n2|\n            return [ZERO, this];\n        }\n    \n        var sign = this._s * n._s;\n        var a = n.abs();\n        var b_digits = this._d;\n        var b_index = b_digits.length;\n        var digits = n._d.length;\n        var quot = [];\n        var guess;\n    \n        var part = new BigInteger([], 0, CONSTRUCT);\n    \n        while (b_index) {\n            part._d.unshift(b_digits[--b_index]);\n            part = new BigInteger(part._d, 1, CONSTRUCT);\n    \n            if (part.compareAbs(n) < 0) {\n                quot.push(0);\n                continue;\n            }\n            if (part._s === 0) {\n                guess = 0;\n            }\n            else {\n                var xlen = part._d.length, ylen = a._d.length;\n                var highx = part._d[xlen-1]*BigInteger_base + part._d[xlen-2];\n                var highy = a._d[ylen-1]*BigInteger_base + a._d[ylen-2];\n                if (part._d.length > a._d.length) {\n                    // The length of part._d can either match a._d length,\n                    // or exceed it by one.\n                    highx = (highx+1)*BigInteger_base;\n                }\n                guess = Math.ceil(highx/highy);\n            }\n            do {\n                var check = a.multiplySingleDigit(guess);\n                if (check.compareAbs(part) <= 0) {\n                    break;\n                }\n                guess--;\n            } while (guess);\n    \n            quot.push(guess);\n            if (!guess) {\n                continue;\n            }\n            var diff = part.subtract(check);\n            part._d = diff._d.slice();\n        }\n    \n        return [new BigInteger(quot.reverse(), sign, CONSTRUCT),\n               new BigInteger(part._d, this._s, CONSTRUCT)];\n    };\n    \n    // Throws an exception if n is outside of (-BigInteger.base, -1] or\n    // [1, BigInteger.base).  It's not necessary to call this, since the\n    // other division functions will call it if they are able to.\n    BigInteger.prototype.divRemSmall = function(n) {\n        var r;\n        n = +n;\n        if (n === 0) {\n            throw new Error(\"Divide by zero\");\n        }\n    \n        var n_s = n < 0 ? -1 : 1;\n        var sign = this._s * n_s;\n        n = Math.abs(n);\n    \n        if (n < 1 || n >= BigInteger_base) {\n            throw new Error(\"Argument out of range\");\n        }\n    \n        if (this._s === 0) {\n            return [ZERO, ZERO];\n        }\n    \n        if (n === 1 || n === -1) {\n            return [(sign === 1) ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\n        }\n    \n        // 2 <= n < BigInteger_base\n    \n        // divide a single digit by a single digit\n        if (this._d.length === 1) {\n            var q = new BigInteger([(this._d[0] / n) | 0], 1, CONSTRUCT);\n            r = new BigInteger([(this._d[0] % n) | 0], 1, CONSTRUCT);\n            if (sign < 0) {\n                q = q.negate();\n            }\n            if (this._s < 0) {\n                r = r.negate();\n            }\n            return [q, r];\n        }\n    \n        var digits = this._d.slice();\n        var quot = new Array(digits.length);\n        var part = 0;\n        var diff = 0;\n        var i = 0;\n        var guess;\n    \n        while (digits.length) {\n            part = part * BigInteger_base + digits[digits.length - 1];\n            if (part < n) {\n                quot[i++] = 0;\n                digits.pop();\n                diff = BigInteger_base * diff + part;\n                continue;\n            }\n            if (part === 0) {\n                guess = 0;\n            }\n            else {\n                guess = (part / n) | 0;\n            }\n    \n            var check = n * guess;\n            diff = part - check;\n            quot[i++] = guess;\n            if (!guess) {\n                digits.pop();\n                continue;\n            }\n    \n            digits.pop();\n            part = diff;\n        }\n    \n        r = new BigInteger([diff], 1, CONSTRUCT);\n        if (this._s < 0) {\n            r = r.negate();\n        }\n        return [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\n    };\n    \n    /*\n        Function: isEven\n        Return true iff *this* is divisible by two.\n        Note that <BigInteger.ZERO> is even.\n        Returns:\n            true if *this* is even, false otherwise.\n        See Also:\n            <isOdd>\n    */\n    BigInteger.prototype.isEven = function() {\n        var digits = this._d;\n        return this._s === 0 || digits.length === 0 || (digits[0] % 2) === 0;\n    };\n    \n    /*\n        Function: isOdd\n        Return true iff *this* is not divisible by two.\n        Returns:\n            true if *this* is odd, false otherwise.\n        See Also:\n            <isEven>\n    */\n    BigInteger.prototype.isOdd = function() {\n        return !this.isEven();\n    };\n    \n    /*\n        Function: sign\n        Get the sign of a <BigInteger>.\n        Returns:\n            * -1 if *this* < 0\n            * 0 if *this* == 0\n            * +1 if *this* > 0\n        See Also:\n            <isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.sign = function() {\n        return this._s;\n    };\n    \n    /*\n        Function: isPositive\n        Return true iff *this* > 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == 1.\n        See Also:\n            <sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isPositive = function() {\n        return this._s > 0;\n    };\n    \n    /*\n        Function: isNegative\n        Return true iff *this* < 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == -1.\n        See Also:\n            <sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isNegative = function() {\n        return this._s < 0;\n    };\n    \n    /*\n        Function: isZero\n        Return true iff *this* == 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == 0.\n        See Also:\n            <sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isZero = function() {\n        return this._s === 0;\n    };\n    \n    /*\n        Function: exp10\n        Multiply a <BigInteger> by a power of 10.\n        This is equivalent to, but faster than\n        > if (n >= 0) {\n        >     return this.multiply(BigInteger(\"1e\" + n));\n        > }\n        > else { // n <= 0\n        >     return this.quotient(BigInteger(\"1e\" + -n));\n        > }\n        Parameters:\n            n - The power of 10 to multiply *this* by. *n* is converted to a\n            javascipt number and must be no greater than <BigInteger.MAX_EXP>\n            (0x7FFFFFFF), or an exception will be thrown.\n        Returns:\n            *this* * (10 ** *n*), truncated to an integer if necessary.\n        See Also:\n            <pow>, <multiply>\n    */\n    BigInteger.prototype.exp10 = function(n) {\n        n = +n;\n        if (n === 0) {\n            return this;\n        }\n        if (Math.abs(n) > Number(MAX_EXP)) {\n            throw new Error(\"exponent too large in BigInteger.exp10\");\n        }\n        // Optimization for this == 0. This also keeps us from having to trim zeros in the positive n case\n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (n > 0) {\n            var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n    \n            for (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n                k._d.unshift(0);\n            }\n            if (n == 0)\n                return k;\n            k._s = 1;\n            k = k.multiplySingleDigit(Math.pow(10, n));\n            return (this._s < 0 ? k.negate() : k);\n        } else if (-n >= this._d.length*BigInteger_base_log10) {\n            return ZERO;\n        } else {\n            var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n    \n            for (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n                k._d.shift();\n            }\n            return (n == 0) ? k : k.divRemSmall(Math.pow(10, n))[0];\n        }\n    };\n    \n    /*\n        Function: pow\n        Raise a <BigInteger> to a power.\n        In this implementation, 0**0 is 1.\n        Parameters:\n            n - The exponent to raise *this* by. *n* must be no greater than\n            <BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\n        Returns:\n            *this* raised to the *nth* power.\n        See Also:\n            <modPow>\n    */\n    BigInteger.prototype.pow = function(n) {\n        if (this.isUnit()) {\n            if (this._s > 0) {\n                return this;\n            }\n            else {\n                return BigInteger(n).isOdd() ? this : this.negate();\n            }\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return ONE;\n        }\n        else if (n._s < 0) {\n            if (this._s === 0) {\n                throw new Error(\"Divide by zero\");\n            }\n            else {\n                return ZERO;\n            }\n        }\n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (n.isUnit()) {\n            return this;\n        }\n    \n        if (n.compareAbs(MAX_EXP) > 0) {\n            throw new Error(\"exponent too large in BigInteger.pow\");\n        }\n        var x = this;\n        var aux = ONE;\n        var two = BigInteger.small[2];\n    \n        while (n.isPositive()) {\n            if (n.isOdd()) {\n                aux = aux.multiply(x);\n                if (n.isUnit()) {\n                    return aux;\n                }\n            }\n            x = x.square();\n            n = n.quotient(two);\n        }\n    \n        return aux;\n    };\n    \n    /*\n        Function: modPow\n        Raise a <BigInteger> to a power (mod m).\n        Because it is reduced by a modulus, <modPow> is not limited by\n        <BigInteger.MAX_EXP> like <pow>.\n        Parameters:\n            exponent - The exponent to raise *this* by. Must be positive.\n            modulus - The modulus.\n        Returns:\n            *this* ^ *exponent* (mod *modulus*).\n        See Also:\n            <pow>, <mod>\n    */\n    BigInteger.prototype.modPow = function(exponent, modulus) {\n        var result = ONE;\n        var base = this;\n    \n        while (exponent.isPositive()) {\n            if (exponent.isOdd()) {\n                result = result.multiply(base).remainder(modulus);\n            }\n    \n            exponent = exponent.quotient(BigInteger.small[2]);\n            if (exponent.isPositive()) {\n                base = base.square().remainder(modulus);\n            }\n        }\n    \n        return result;\n    };\n    \n    /*\n        Function: log\n        Get the natural logarithm of a <BigInteger> as a native JavaScript number.\n        This is equivalent to\n        > Math.log(this.toJSValue())\n        but handles values outside of the native number range.\n        Returns:\n            log( *this* )\n        See Also:\n            <toJSValue>\n    */\n    BigInteger.prototype.log = function() {\n        switch (this._s) {\n        case 0:\t return -Infinity;\n        case -1: return NaN;\n        default: // Fall through.\n        }\n    \n        var l = this._d.length;\n    \n        if (l*BigInteger_base_log10 < 30) {\n            return Math.log(this.valueOf());\n        }\n    \n        var N = Math.ceil(30/BigInteger_base_log10);\n        var firstNdigits = this._d.slice(l - N);\n        return Math.log((new BigInteger(firstNdigits, 1, CONSTRUCT)).valueOf()) + (l - N) * Math.log(BigInteger_base);\n    };\n    \n    /*\n        Function: valueOf\n        Convert a <BigInteger> to a native JavaScript integer.\n        This is called automatically by JavaScipt to convert a <BigInteger> to a\n        native value.\n        Returns:\n            > parseInt(this.toString(), 10)\n        See Also:\n            <toString>, <toJSValue>\n    */\n    BigInteger.prototype.valueOf = function() {\n        return parseInt(this.toString(), 10);\n    };\n    \n    /*\n        Function: toJSValue\n        Convert a <BigInteger> to a native JavaScript integer.\n        This is the same as valueOf, but more explicitly named.\n        Returns:\n            > parseInt(this.toString(), 10)\n        See Also:\n            <toString>, <valueOf>\n    */\n    BigInteger.prototype.toJSValue = function() {\n        return parseInt(this.toString(), 10);\n    };\n    \n    \n    /*\n     Function: lowVal\n     Author: Lucas Jones\n     */\n    BigInteger.prototype.lowVal = function () {\n        return this._d[0] || 0;\n    };\n    \n    var MAX_EXP = BigInteger(0x7FFFFFFF);\n    // Constant: MAX_EXP\n    // The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\n    BigInteger.MAX_EXP = MAX_EXP;\n    \n    (function() {\n        function makeUnary(fn) {\n            return function(a) {\n                return fn.call(BigInteger(a));\n            };\n        }\n    \n        function makeBinary(fn) {\n            return function(a, b) {\n                return fn.call(BigInteger(a), BigInteger(b));\n            };\n        }\n    \n        function makeTrinary(fn) {\n            return function(a, b, c) {\n                return fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\n            };\n        }\n    \n        (function() {\n            var i, fn;\n            var unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\n            var binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\n            var trinary = [\"modPow\"];\n    \n            for (i = 0; i < unary.length; i++) {\n                fn = unary[i];\n                BigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\n            }\n    \n            for (i = 0; i < binary.length; i++) {\n                fn = binary[i];\n                BigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\n            }\n    \n            for (i = 0; i < trinary.length; i++) {\n                fn = trinary[i];\n                BigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\n            }\n    \n            BigInteger.exp10 = function(x, n) {\n                return BigInteger(x).exp10(n);\n            };\n        })();\n    })();\n    \n    exports.JSBigInt = BigInteger; // exports.BigInteger changed to exports.JSBigInt\n    })(typeof exports !== 'undefined' ? exports : this);"]},"metadata":{},"sourceType":"script"}