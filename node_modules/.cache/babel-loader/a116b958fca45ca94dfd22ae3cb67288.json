{"ast":null,"code":"var JSBigInt = require('./biginteger')['JSBigInt'];\n/**\nCopyright (c) 2017, moneroexamples\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nParts of the project are originally copyright (c) 2014-2017, MyMonero.com\n*/\n\n\nvar cnBase58 = function () {\n  var b58 = {};\n  var alphabet_str = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n  var alphabet = [];\n\n  for (var i = 0; i < alphabet_str.length; i++) {\n    alphabet.push(alphabet_str.charCodeAt(i));\n  }\n\n  var encoded_block_sizes = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n  var alphabet_size = alphabet.length;\n  var full_block_size = 8;\n  var full_encoded_block_size = 11;\n  var UINT64_MAX = new JSBigInt(2).pow(64);\n\n  function hextobin(hex) {\n    if (hex.length % 2 !== 0) throw \"Hex string has invalid length!\";\n    var res = new Uint8Array(hex.length / 2);\n\n    for (var i = 0; i < hex.length / 2; ++i) {\n      res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n    }\n\n    return res;\n  }\n\n  function bintohex(bin) {\n    var out = [];\n\n    for (var i = 0; i < bin.length; ++i) {\n      out.push((\"0\" + bin[i].toString(16)).slice(-2));\n    }\n\n    return out.join(\"\");\n  }\n\n  function strtobin(str) {\n    var res = new Uint8Array(str.length);\n\n    for (var i = 0; i < str.length; i++) {\n      res[i] = str.charCodeAt(i);\n    }\n\n    return res;\n  }\n\n  function bintostr(bin) {\n    var out = [];\n\n    for (var i = 0; i < bin.length; i++) {\n      out.push(String.fromCharCode(bin[i]));\n    }\n\n    return out.join(\"\");\n  }\n\n  function uint8_be_to_64(data) {\n    if (data.length < 1 || data.length > 8) {\n      throw \"Invalid input length\";\n    }\n\n    var res = JSBigInt.ZERO;\n    var twopow8 = new JSBigInt(2).pow(8);\n    var i = 0;\n\n    switch (9 - data.length) {\n      case 1:\n        res = res.add(data[i++]);\n\n      case 2:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 3:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 4:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 5:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 6:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 7:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 8:\n        res = res.multiply(twopow8).add(data[i++]);\n        break;\n\n      default:\n        throw \"Impossible condition\";\n    }\n\n    return res;\n  }\n\n  function uint64_to_8be(num, size) {\n    var res = new Uint8Array(size);\n\n    if (size < 1 || size > 8) {\n      throw \"Invalid input length\";\n    }\n\n    var twopow8 = new JSBigInt(2).pow(8);\n\n    for (var i = size - 1; i >= 0; i--) {\n      res[i] = num.remainder(twopow8).toJSValue();\n      num = num.divide(twopow8);\n    }\n\n    return res;\n  }\n\n  b58.encode_block = function (data, buf, index) {\n    if (data.length < 1 || data.length > full_encoded_block_size) {\n      throw \"Invalid block length: \" + data.length;\n    }\n\n    var num = uint8_be_to_64(data);\n    var i = encoded_block_sizes[data.length] - 1; // while num > 0\n\n    while (num.compare(0) === 1) {\n      var div = num.divRem(alphabet_size); // remainder = num % alphabet_size\n\n      var remainder = div[1]; // num = num / alphabet_size\n\n      num = div[0];\n      buf[index + i] = alphabet[remainder.toJSValue()];\n      i--;\n    }\n\n    return buf;\n  };\n\n  b58.encode = function (hex) {\n    var data = hextobin(hex);\n\n    if (data.length === 0) {\n      return \"\";\n    }\n\n    var full_block_count = Math.floor(data.length / full_block_size);\n    var last_block_size = data.length % full_block_size;\n    var res_size = full_block_count * full_encoded_block_size + encoded_block_sizes[last_block_size];\n    var res = new Uint8Array(res_size);\n    var i;\n\n    for (i = 0; i < res_size; ++i) {\n      res[i] = alphabet[0];\n    }\n\n    for (i = 0; i < full_block_count; i++) {\n      res = b58.encode_block(data.subarray(i * full_block_size, i * full_block_size + full_block_size), res, i * full_encoded_block_size);\n    }\n\n    if (last_block_size > 0) {\n      res = b58.encode_block(data.subarray(full_block_count * full_block_size, full_block_count * full_block_size + last_block_size), res, full_block_count * full_encoded_block_size);\n    }\n\n    return bintostr(res);\n  };\n\n  b58.decode_block = function (data, buf, index) {\n    if (data.length < 1 || data.length > full_encoded_block_size) {\n      throw \"Invalid block length: \" + data.length;\n    }\n\n    var res_size = encoded_block_sizes.indexOf(data.length);\n\n    if (res_size <= 0) {\n      throw \"Invalid block size\";\n    }\n\n    var res_num = new JSBigInt(0);\n    var order = new JSBigInt(1);\n\n    for (var i = data.length - 1; i >= 0; i--) {\n      var digit = alphabet.indexOf(data[i]);\n\n      if (digit < 0) {\n        throw \"Invalid symbol\";\n      }\n\n      var product = order.multiply(digit).add(res_num); // if product > UINT64_MAX\n\n      if (product.compare(UINT64_MAX) === 1) {\n        throw \"Overflow\";\n      }\n\n      res_num = product;\n      order = order.multiply(alphabet_size);\n    }\n\n    if (res_size < full_block_size && new JSBigInt(2).pow(8 * res_size).compare(res_num) <= 0) {\n      throw \"Overflow 2\";\n    }\n\n    buf.set(uint64_to_8be(res_num, res_size), index);\n    return buf;\n  };\n\n  b58.decode = function (enc) {\n    enc = strtobin(enc);\n\n    if (enc.length === 0) {\n      return \"\";\n    }\n\n    var full_block_count = Math.floor(enc.length / full_encoded_block_size);\n    var last_block_size = enc.length % full_encoded_block_size;\n    var last_block_decoded_size = encoded_block_sizes.indexOf(last_block_size);\n\n    if (last_block_decoded_size < 0) {\n      throw \"Invalid encoded length\";\n    }\n\n    var data_size = full_block_count * full_block_size + last_block_decoded_size;\n    var data = new Uint8Array(data_size);\n\n    for (var i = 0; i < full_block_count; i++) {\n      data = b58.decode_block(enc.subarray(i * full_encoded_block_size, i * full_encoded_block_size + full_encoded_block_size), data, i * full_block_size);\n    }\n\n    if (last_block_size > 0) {\n      data = b58.decode_block(enc.subarray(full_block_count * full_encoded_block_size, full_block_count * full_encoded_block_size + last_block_size), data, full_block_count * full_block_size);\n    }\n\n    return bintohex(data);\n  };\n\n  return b58;\n}();\n\nmodule.exports = cnBase58;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/wallet-address-validator/src/crypto/cnBase58.js"],"names":["JSBigInt","require","cnBase58","b58","alphabet_str","alphabet","i","length","push","charCodeAt","encoded_block_sizes","alphabet_size","full_block_size","full_encoded_block_size","UINT64_MAX","pow","hextobin","hex","res","Uint8Array","parseInt","slice","bintohex","bin","out","toString","join","strtobin","str","bintostr","String","fromCharCode","uint8_be_to_64","data","ZERO","twopow8","add","multiply","uint64_to_8be","num","size","remainder","toJSValue","divide","encode_block","buf","index","compare","div","divRem","encode","full_block_count","Math","floor","last_block_size","res_size","subarray","decode_block","indexOf","res_num","order","digit","product","set","decode","enc","last_block_decoded_size","data_size","module","exports"],"mappings":"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","sourcesContent":["var JSBigInt = require('./biginteger')['JSBigInt'];\n\n/**\nCopyright (c) 2017, moneroexamples\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nParts of the project are originally copyright (c) 2014-2017, MyMonero.com\n*/\n\nvar cnBase58 = (function () {\n    var b58 = {};\n\n    var alphabet_str = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    var alphabet = [];\n    for (var i = 0; i < alphabet_str.length; i++) {\n        alphabet.push(alphabet_str.charCodeAt(i));\n    }\n    var encoded_block_sizes = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n    var alphabet_size = alphabet.length;\n    var full_block_size = 8;\n    var full_encoded_block_size = 11;\n\n    var UINT64_MAX = new JSBigInt(2).pow(64);\n\n    function hextobin(hex) {\n        if (hex.length % 2 !== 0) throw \"Hex string has invalid length!\";\n        var res = new Uint8Array(hex.length / 2);\n        for (var i = 0; i < hex.length / 2; ++i) {\n            res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n        }\n        return res;\n    }\n\n    function bintohex(bin) {\n        var out = [];\n        for (var i = 0; i < bin.length; ++i) {\n            out.push((\"0\" + bin[i].toString(16)).slice(-2));\n        }\n        return out.join(\"\");\n    }\n\n    function strtobin(str) {\n        var res = new Uint8Array(str.length);\n        for (var i = 0; i < str.length; i++) {\n            res[i] = str.charCodeAt(i);\n        }\n        return res;\n    }\n\n    function bintostr(bin) {\n        var out = [];\n        for (var i = 0; i < bin.length; i++) {\n            out.push(String.fromCharCode(bin[i]));\n        }\n        return out.join(\"\");\n    }\n\n    function uint8_be_to_64(data) {\n        if (data.length < 1 || data.length > 8) {\n            throw \"Invalid input length\";\n        }\n        var res = JSBigInt.ZERO;\n        var twopow8 = new JSBigInt(2).pow(8);\n        var i = 0;\n        switch (9 - data.length) {\n        case 1:\n            res = res.add(data[i++]);\n        case 2:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 3:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 4:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 5:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 6:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 7:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 8:\n            res = res.multiply(twopow8).add(data[i++]);\n            break;\n        default:\n            throw \"Impossible condition\";\n        }\n        return res;\n    }\n\n    function uint64_to_8be(num, size) {\n        var res = new Uint8Array(size);\n        if (size < 1 || size > 8) {\n            throw \"Invalid input length\";\n        }\n        var twopow8 = new JSBigInt(2).pow(8);\n        for (var i = size - 1; i >= 0; i--) {\n            res[i] = num.remainder(twopow8).toJSValue();\n            num = num.divide(twopow8);\n        }\n        return res;\n    }\n\n    b58.encode_block = function (data, buf, index) {\n        if (data.length < 1 || data.length > full_encoded_block_size) {\n            throw \"Invalid block length: \" + data.length;\n        }\n        var num = uint8_be_to_64(data);\n        var i = encoded_block_sizes[data.length] - 1;\n        // while num > 0\n        while (num.compare(0) === 1) {\n            var div = num.divRem(alphabet_size);\n            // remainder = num % alphabet_size\n            var remainder = div[1];\n            // num = num / alphabet_size\n            num = div[0];\n            buf[index + i] = alphabet[remainder.toJSValue()];\n            i--;\n        }\n        return buf;\n    };\n\n    b58.encode = function (hex) {\n        var data = hextobin(hex);\n        if (data.length === 0) {\n            return \"\";\n        }\n        var full_block_count = Math.floor(data.length / full_block_size);\n        var last_block_size = data.length % full_block_size;\n        var res_size = full_block_count * full_encoded_block_size + encoded_block_sizes[last_block_size];\n\n        var res = new Uint8Array(res_size);\n        var i;\n        for (i = 0; i < res_size; ++i) {\n            res[i] = alphabet[0];\n        }\n        for (i = 0; i < full_block_count; i++) {\n            res = b58.encode_block(data.subarray(i * full_block_size, i * full_block_size + full_block_size), res, i * full_encoded_block_size);\n        }\n        if (last_block_size > 0) {\n            res = b58.encode_block(data.subarray(full_block_count * full_block_size, full_block_count * full_block_size + last_block_size), res, full_block_count * full_encoded_block_size)\n        }\n        return bintostr(res);\n    };\n\n    b58.decode_block = function (data, buf, index) {\n        if (data.length < 1 || data.length > full_encoded_block_size) {\n            throw \"Invalid block length: \" + data.length;\n        }\n\n        var res_size = encoded_block_sizes.indexOf(data.length);\n        if (res_size <= 0) {\n            throw \"Invalid block size\";\n        }\n        var res_num = new JSBigInt(0);\n        var order = new JSBigInt(1);\n        for (var i = data.length - 1; i >= 0; i--) {\n            var digit = alphabet.indexOf(data[i]);\n            if (digit < 0) {\n                throw \"Invalid symbol\";\n            }\n            var product = order.multiply(digit).add(res_num);\n            // if product > UINT64_MAX\n            if (product.compare(UINT64_MAX) === 1) {\n                throw \"Overflow\";\n            }\n            res_num = product;\n            order = order.multiply(alphabet_size);\n        }\n        if (res_size < full_block_size && (new JSBigInt(2).pow(8 * res_size).compare(res_num) <= 0)) {\n            throw \"Overflow 2\";\n        }\n        buf.set(uint64_to_8be(res_num, res_size), index);\n        return buf;\n    };\n\n    b58.decode = function (enc) {\n        enc = strtobin(enc);\n        if (enc.length === 0) {\n            return \"\";\n        }\n        var full_block_count = Math.floor(enc.length / full_encoded_block_size);\n        var last_block_size = enc.length % full_encoded_block_size;\n        var last_block_decoded_size = encoded_block_sizes.indexOf(last_block_size);\n        if (last_block_decoded_size < 0) {\n            throw \"Invalid encoded length\";\n        }\n        var data_size = full_block_count * full_block_size + last_block_decoded_size;\n        var data = new Uint8Array(data_size);\n        for (var i = 0; i < full_block_count; i++) {\n            data = b58.decode_block(enc.subarray(i * full_encoded_block_size, i * full_encoded_block_size + full_encoded_block_size), data, i * full_block_size);\n        }\n        if (last_block_size > 0) {\n            data = b58.decode_block(enc.subarray(full_block_count * full_encoded_block_size, full_block_count * full_encoded_block_size + last_block_size), data, full_block_count * full_block_size);\n        }\n        return bintohex(data);\n    };\n\n    return b58;\n})();\nmodule.exports = cnBase58;"]},"metadata":{},"sourceType":"script"}