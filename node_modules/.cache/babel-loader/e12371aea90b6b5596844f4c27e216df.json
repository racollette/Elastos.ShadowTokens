{"ast":null,"code":"var _jsxFileName = \"/home/ryan/dev/defi/shadowtoken/src/containers/TransferContainer.tsx\";\nimport React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { withStyles } from \"@material-ui/styles\";\nimport classNames from \"classnames\";\nimport AddressValidator from \"wallet-address-validator\";\nimport { gatherFeeData, MIN_TX_AMOUNTS } from \"../utils/txUtils\";\nimport { MINI_ICON_MAP, SYMBOL_MAP, NETWORK_MAP, NAME_MAP, abbreviateAddress, updateBalance } from \"../utils/walletUtils\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport BigCurrencyInput from \"../components/BigCurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\nimport DarkTooltip from \"../components/DarkTooltip\";\nimport WalletIcon from \"../assets/wallet-icon.svg\";\n\nconst styles = theme => ({\n  container: {\n    background: \"#fff\",\n    border: \"1px solid \" + theme.palette.divider,\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    maxWidth: 400,\n    width: \"100%\",\n    margin: \"0px auto \" + theme.spacing(1) + \"px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  },\n  transferActionTabs: {\n    margin: \"0px auto\",\n    // marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  depositAddressContainer: {},\n  depositAddress: {\n    width: \"100%\"\n  },\n  actionButtonContainer: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    textAlign: \"center\",\n    \"& button\": {\n      \"&.Mui-disabled\": {},\n      margin: \"0px auto\",\n      fontSize: 12,\n      minWidth: 175,\n      padding: theme.spacing(1)\n    }\n  },\n  amountField: {\n    width: \"100%\"\n  },\n  depositButton: {},\n  withdrawButton: {},\n  actions: {\n    paddingTop: theme.spacing(1),\n    padding: theme.spacing(3)\n  },\n  transactionsContainer: {\n    padding: theme.spacing(3),\n    paddingTop: theme.spacing(0),\n    marginTop: theme.spacing(2),\n    borderTop: \"1px solid #EBEBEB\"\n  },\n  actionsContainer: {\n    borderRadius: theme.shape.borderRadius,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0\n  },\n  destChooser: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  fees: {\n    width: \"100%\",\n    border: \"1px solid \" + theme.palette.divider,\n    fontSize: 12,\n    padding: theme.spacing(1),\n    paddingBottom: 0,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& span\": {\n      marginBottom: theme.spacing(1)\n    }\n  },\n  icon: {\n    width: 16,\n    height: 16,\n    marginRight: theme.spacing(0.75)\n  },\n  toggle: {\n    \"& button\": {\n      minHeight: \"auto\",\n      border: \"1px solid transparent\",\n      borderBottom: \"1px solid \" + theme.palette.divider,\n      height: 56,\n      backgroundColor: \"#fff\",\n      \"&:first-child\": {\n        borderRight: \"1px solid \" + theme.palette.divider\n      },\n      \"&.MuiToggleButton-root\": {},\n      \"&.Mui-selected\": {\n        borderBottom: \"1px solid transparent\",\n        color: theme.palette.primary.main,\n        backgroundColor: \"#transparent !important\"\n      },\n      \"& .MuiToggleButton-label\": {\n        fontSize: 16\n      },\n      \"& span\": {\n        textTransform: \"capitalize !important\"\n      }\n    }\n  },\n  title: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(3)\n  },\n  optionsContainer: {\n    border: \"1px solid #EDEFF3\",\n    borderBottom: \"none\",\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  option: {\n    borderBottom: \"1px solid #EDEFF3\",\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    minHeight: 60,\n    fontSize: 14,\n    \"& img\": {\n      height: \"auto\",\n      width: 24,\n      marginRight: theme.spacing(1)\n    },\n    \"& .MuiGrid-root\": {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  },\n  standaloneOption: {\n    border: \"1px solid #DBE0E8\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(2),\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  addressInput: {\n    width: \"100%\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2)\n  },\n  currencySelect: {\n    marginLeft: theme.spacing(-1),\n    width: \"calc(100% + 8px)\"\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1)\n  },\n  amountContainer: {\n    paddingTop: theme.spacing(5),\n    paddingBottom: theme.spacing(5)\n  },\n  totalCell: {\n    wordBreak: \"break-word\"\n  },\n  amountError: {\n    textAlign: \"center\",\n    color: \"#FF4545\",\n    fontSize: 12,\n    margin: \"0px auto\"\n  },\n  disclosure: {\n    width: \"100%\",\n    maxWidth: 370,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"center\",\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    padding: theme.spacing(2),\n    color: theme.palette.primary.main,\n    border: \"1px solid \" + theme.palette.primary.main,\n    fontSize: 12,\n    lineHeight: \"17px\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(3),\n    \"& a\": {\n      color: \"inherit\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  }\n});\n\nclass TransferContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.burnInputRef = React.createRef();\n    this.state = props.store.getState();\n  }\n\n  showDepositModal(tx) {\n    const {\n      store\n    } = this.props;\n    store.set(\"showDepositModal\", true);\n    store.set(\"depositModalTx\", tx);\n  }\n\n  async gatherFeeData() {}\n\n  getBalance(asset) {\n    console.log('getBalance');\n    const {\n      store\n    } = this.props;\n    console.log(store.get('ethBalance'));\n    return store.get(`${asset}Balance`);\n  }\n\n  validateDeposit() {\n    const {\n      store\n    } = this.props;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const amount = store.get(\"convert.amount\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset];\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n      return false;\n    } else {\n      store.set(\"convert.showAmountError\", false);\n      return true;\n    }\n  }\n\n  validateWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const showAddressError = !convertAddressValid;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const selectedFormat = store.get(\"convert.selectedFormat\");\n    const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance);\n\n    if (showAddressError) {\n      store.set(\"convert.showDestinationError\", true);\n    } else {\n      store.set(\"convert.showDestinationError\", false);\n    }\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n    } else {\n      store.set(\"convert.showAmountError\", false);\n    }\n\n    if (showAddressError || !amount || !amountValid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async newDeposit() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const localWeb3Address = store.get(\"localWeb3Address\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      // awaiting: `${asset}-init`,\n      sourceAsset: asset,\n      sourceNetwork: NETWORK_MAP[asset],\n      sourceNetworkVersion: network,\n      destAddress: localWeb3Address,\n      destNetwork: NETWORK_MAP[format],\n      destNetworkVersion: network,\n      destAsset: format,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateDeposit()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"deposit\");\n  }\n\n  async newWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const destination = store.get(\"convert.destination\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      sourceAsset: format,\n      sourceNetwork: NETWORK_MAP[format],\n      sourceNetworkVersion: network,\n      destAddress: destination,\n      destNetwork: NETWORK_MAP[asset],\n      destNetworkVersion: network,\n      destAsset: asset,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateWithdraw()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"withdraw\");\n  }\n\n  render() {\n    const {\n      classes,\n      store\n    } = this.props;\n    const selectedNetwork = store.get(\"selectedNetwork\");\n    const selectedTab = store.get(\"selectedTab\");\n    const selectedAsset = store.get(\"selectedAsset\"); // 0 = mint, 1 = release\n\n    const selectedDirection = store.get(\"convert.selectedDirection\");\n    const selectedFormat = store.get(\"convert.selectedFormat\"); // console.log(selectedFormat);\n\n    const localWeb3Address = store.get(\"localWeb3Address\"); // console.log(localWeb3Address);\n\n    const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n    const amount = store.get(\"convert.amount\"); // console.log(amount);\n\n    const total = store.get(\"convert.conversionTotal\");\n    const allowance = store.get(\"convert.adapterWbtcAllowance\");\n    const hasAllowance = Number(amount) <= Number(allowance);\n    const allowanceRequesting = store.get(\"convert.adapterWbtcAllowanceRequesting\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n    const canConvertFrom = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance) && convertAddressValid;\n    const showAmountError = store.get(\"convert.showAmountError\");\n    const showDestinationError = store.get(\"convert.showDestinationError\");\n    const destAsset = selectedDirection ? selectedAsset : selectedFormat; // console.log(destAsset);\n\n    const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(2);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.networkConnectionContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disableRipple: walletAddress.length,\n      color: \"default\",\n      onClick: () => {\n        if (!walletAddress) {\n          initLocalWeb3(walletType);\n        }\n      },\n      variant: \"outlined\",\n      className: classNames(classes.accountButton, walletAddress && classes.disabled),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 33\n      }\n    }, walletAddress ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.circle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 45\n      }\n    }, walletAddress.slice(0, 7) + \"...\" + walletAddress.slice(walletAddress.length - 5))) : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 45\n      }\n    }, \"Connect Wallet\", /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.hideMobile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 27\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.transferActionTabs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n      size: \"small\",\n      className: classes.toggle,\n      value: String(selectedDirection),\n      exclusive: true,\n      onChange: (event, newValue) => {\n        if (newValue) {\n          store.set(\"convert.selectedDirection\", Number(newValue));\n          store.set(\"convert.amount\", \"\");\n          store.set(\"convert.networkFee\", \"\");\n          store.set(\"convert.conversionTotal\", \"\");\n          store.set(\"convert.destination\", \"\");\n          store.set(\"convert.showAmountError\", false);\n          store.set(\"convert.showDestinationError\", false);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ToggleButton, {\n      disableRipple: true,\n      key: 0,\n      value: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 33\n      }\n    }, \"Mint\"), /*#__PURE__*/React.createElement(ToggleButton, {\n      disableRipple: true,\n      key: 1,\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 33\n      }\n    }, \"Release\"))), selectedTab === 1 && /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.actionsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 37\n      }\n    }, selectedDirection === 0 && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.amountContainer,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(BigCurrencyInput, {\n      symbol: SYMBOL_MAP[selectedAsset],\n      placeholder: \"0.00 \" + SYMBOL_MAP[selectedAsset],\n      usdValue: usdValue,\n      value: amount,\n      onChange: event => {\n        const value = event.value || \"\";\n        store.set(\"convert.amount\", String(value));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 53\n      }\n    }), showAmountError && /*#__PURE__*/React.createElement(Typography, {\n      className: classes.amountError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 57\n      }\n    }, \"Minimum mint amount is\", \" \", MIN_TX_AMOUNTS[selectedAsset], \" \", SYMBOL_MAP[selectedAsset])), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.balanceContainer,\n      container: true,\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 53\n      }\n    }, SYMBOL_MAP[selectedAsset], \" Balance\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ActionLink, {\n      onClick: () => {\n        store.set(\"convert.amount\", balance);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 57\n      }\n    }, balance, \" \", SYMBOL_MAP[selectedAsset]))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 53\n      }\n    }, \"Asset\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ETH\"],\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", `w${asset}`);\n        store.set(\"selectedAsset\", asset);\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.optionsContainer,\n      container: true,\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 57\n      }\n    }, \"Destination\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(DarkTooltip, {\n      placement: \"top\",\n      title: localWeb3Address,\n      arrow: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: WalletIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 69\n      }\n    }), abbreviateAddress(localWeb3Address))))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 57\n      }\n    }, \"You will receive\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 61\n      }\n    }), total || \"\", \" \", SYMBOL_MAP[destAsset])))), selectedDirection === 1 && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.amountContainer,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(BigCurrencyInput, {\n      symbol: SYMBOL_MAP[selectedFormat],\n      value: amount,\n      placeholder: \"0.00 \" + SYMBOL_MAP[selectedFormat],\n      usdValue: usdValue,\n      onChange: event => {\n        const value = event.value || \"\";\n        store.set(\"convert.amount\", String(value));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 53\n      }\n    }), showAmountError && /*#__PURE__*/React.createElement(Typography, {\n      className: classes.amountError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 57\n      }\n    }, \"Please enter a valid amount to release\")), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.balanceContainer,\n      container: true,\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 53\n      }\n    }, SYMBOL_MAP[selectedFormat], \" Balance\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ActionLink, {\n      onClick: () => {\n        store.set(\"convert.amount\", balance);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 57\n      }\n    }, balance, \" \", SYMBOL_MAP[selectedFormat]))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 53\n      }\n    }, \"Asset\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      onClick: updateBalance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedFormat],\n      className: classes.currencySelect,\n      items: [\"renBTC\", \"renZEC\", \"renBCH\"] // items={[\"ETH\"]}\n      ,\n      renBTCBalance: store.get(\"renBTCBalance\"),\n      renZECBalance: store.get(\"renZECBalance\"),\n      renBCHBalance: store.get(\"renBCHBalance\") // ETHBalance={store.get(\"ethbal\")}\n      ,\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", asset);\n        store.set(\"selectedAsset\", asset.replace(\"ren\", \"\"));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.addressInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      label: \"Destination\",\n      placeholder: `Enter ${NAME_MAP[selectedAsset]} Address`,\n      size: \"medium\",\n      fullWidth: true,\n      error: showDestinationError,\n      helperText: showDestinationError ? `Please enter a valid ${NAME_MAP[selectedAsset]} address` : \"\",\n      InputProps: {\n        disableUnderline: true\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      inputProps: {\n        onFocus: () => {\n          store.set(\"convert.destinationInputFocused\", true);\n        },\n        onBlur: () => {\n          store.set(\"convert.destinationInputFocused\", false);\n        }\n      },\n      onChange: event => {\n        const value = event.target.value;\n        store.set(\"convert.destination\", value);\n        store.set(\"convert.destinationValid\", AddressValidator.validate(value, selectedAsset.toUpperCase(), selectedNetwork === \"testnet\" ? \"testnet\" : \"prod\"));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 61\n      }\n    })))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.optionsContainer,\n      container: true,\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 57\n      }\n    }, \"You will receive\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 61\n      }\n    }), total || \"\", \" \", SYMBOL_MAP[destAsset])))))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      className: classes.actionButtonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 33\n      }\n    }, selectedDirection === 0 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      size: \"large\",\n      fullWidth: true,\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newDeposit.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 45\n      }\n    }, \"Next\")), selectedDirection === 1 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      fullWidth: true,\n      size: \"large\",\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newWithdraw.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 45\n      }\n    }, \"Next\")))))));\n  }\n\n}\n\nexport default withStyles(styles)(withStore(TransferContainer));","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/src/containers/TransferContainer.tsx"],"names":["React","withStore","withStyles","classNames","AddressValidator","gatherFeeData","MIN_TX_AMOUNTS","MINI_ICON_MAP","SYMBOL_MAP","NETWORK_MAP","NAME_MAP","abbreviateAddress","updateBalance","Grid","Button","TextField","Typography","ToggleButton","ToggleButtonGroup","CurrencySelect","BigCurrencyInput","ActionLink","DarkTooltip","styles","theme","container","background","border","palette","divider","borderRadius","boxShadow","maxWidth","width","margin","spacing","breakpoints","down","transferActionTabs","marginBottom","depositAddressContainer","depositAddress","actionButtonContainer","paddingTop","paddingBottom","textAlign","fontSize","minWidth","padding","amountField","depositButton","withdrawButton","actions","transactionsContainer","marginTop","borderTop","actionsContainer","shape","borderTopLeftRadius","borderTopRightRadius","destChooser","fees","display","flexDirection","icon","height","marginRight","toggle","minHeight","borderBottom","backgroundColor","borderRight","color","primary","main","textTransform","title","optionsContainer","option","paddingLeft","paddingRight","alignItems","standaloneOption","addressInput","currencySelect","marginLeft","balanceContainer","amountContainer","totalCell","wordBreak","amountError","disclosure","lineHeight","TransferContainer","Component","constructor","props","burnInputRef","createRef","state","store","getState","showDepositModal","tx","set","getBalance","asset","console","log","get","validateDeposit","selectedAsset","amount","amountValid","Number","validateWithdraw","convertAddressValid","showAddressError","selectedFormat","balance","newDeposit","localWeb3Address","network","format","id","Math","floor","random","type","instant","sourceAsset","sourceNetwork","sourceNetworkVersion","destAddress","destNetwork","destNetworkVersion","destAsset","error","txHash","newWithdraw","destination","render","classes","selectedNetwork","selectedTab","selectedDirection","total","allowance","hasAllowance","allowanceRequesting","canConvertTo","canConvertFrom","showAmountError","showDestinationError","usdValue","toFixed","networkConnectionContainer","walletAddress","length","initLocalWeb3","walletType","accountButton","disabled","circle","slice","hideMobile","String","event","newValue","value","v","toLowerCase","WalletIcon","replace","disableUnderline","shrink","onFocus","onBlur","target","validate","toUpperCase","parseFloat","actionButton","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { Styles, withStyles } from \"@material-ui/styles\";\nimport classNames from \"classnames\";\nimport AddressValidator from \"wallet-address-validator\";\nimport bchaddr from \"bchaddrjs\";\nimport {\n    addTx,\n    updateTx,\n    removeTx,\n    gatherFeeData,\n    MIN_TX_AMOUNTS,\n} from \"../utils/txUtils\";\nimport {\n    MINI_ICON_MAP,\n    SYMBOL_MAP,\n    NETWORK_MAP,\n    NAME_MAP,\n    abbreviateAddress,\n    updateBalance,\n} from \"../utils/walletUtils\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport BigCurrencyInput from \"../components/BigCurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\nimport DarkTooltip from \"../components/DarkTooltip\";\n\nimport theme from \"../theme/theme\";\n\nimport WalletIcon from \"../assets/wallet-icon.svg\";\n\nconst styles: Styles<typeof theme, any> = (theme) => ({\n    container: {\n        background: \"#fff\",\n        border: \"1px solid \" + theme.palette.divider,\n        borderRadius: 4,\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n        maxWidth: 400,\n        width: \"100%\",\n        margin: \"0px auto \" + theme.spacing(1) + \"px\",\n\n        [theme.breakpoints.down(\"sm\")]: {\n            maxWidth: \"100%\",\n        },\n    },\n    transferActionTabs: {\n        margin: \"0px auto\",\n        // marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n        \"& div.MuiToggleButtonGroup-root\": {\n            width: \"100%\",\n        },\n        \"& button\": {\n            width: \"50%\",\n        },\n    },\n    depositAddressContainer: {},\n    depositAddress: {\n        width: \"100%\",\n    },\n    actionButtonContainer: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        textAlign: \"center\",\n        \"& button\": {\n            \"&.Mui-disabled\": {},\n            margin: \"0px auto\",\n            fontSize: 12,\n            minWidth: 175,\n            padding: theme.spacing(1),\n        },\n    },\n    amountField: {\n        width: \"100%\",\n    },\n    depositButton: {},\n    withdrawButton: {},\n    actions: {\n        paddingTop: theme.spacing(1),\n        padding: theme.spacing(3),\n    },\n    transactionsContainer: {\n        padding: theme.spacing(3),\n        paddingTop: theme.spacing(0),\n        marginTop: theme.spacing(2),\n        borderTop: \"1px solid #EBEBEB\",\n    },\n    actionsContainer: {\n        borderRadius: theme.shape.borderRadius,\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n    },\n    destChooser: {\n        width: \"100%\",\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n        \"& div.MuiToggleButtonGroup-root\": {\n            width: \"100%\",\n        },\n        \"& button\": {\n            width: \"50%\",\n        },\n    },\n    fees: {\n        width: \"100%\",\n        border: \"1px solid \" + theme.palette.divider,\n        fontSize: 12,\n        padding: theme.spacing(1),\n        paddingBottom: 0,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(3),\n        display: \"flex\",\n        flexDirection: \"column\",\n        \"& span\": {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    icon: {\n        width: 16,\n        height: 16,\n        marginRight: theme.spacing(0.75),\n    },\n    toggle: {\n        \"& button\": {\n            minHeight: \"auto\",\n            border: \"1px solid transparent\",\n            borderBottom: \"1px solid \" + theme.palette.divider,\n            height: 56,\n            backgroundColor: \"#fff\",\n            \"&:first-child\": {\n                borderRight: \"1px solid \" + theme.palette.divider,\n            },\n            \"&.MuiToggleButton-root\": {},\n            \"&.Mui-selected\": {\n                borderBottom: \"1px solid transparent\",\n                color: theme.palette.primary.main,\n                backgroundColor: \"#transparent !important\",\n            },\n            \"& .MuiToggleButton-label\": {\n                fontSize: 16,\n            },\n            \"& span\": {\n                textTransform: \"capitalize !important\",\n            },\n        },\n    },\n    title: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(3),\n    },\n    optionsContainer: {\n        border: \"1px solid #EDEFF3\",\n        borderBottom: \"none\",\n        borderRadius: 4,\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    },\n    option: {\n        borderBottom: \"1px solid #EDEFF3\",\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        minHeight: 60,\n        fontSize: 14,\n        \"& img\": {\n            height: \"auto\",\n            width: 24,\n            marginRight: theme.spacing(1),\n        },\n        \"& .MuiGrid-root\": {\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n    },\n    standaloneOption: {\n        border: \"1px solid #DBE0E8\",\n        borderRadius: 4,\n        marginBottom: theme.spacing(2),\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    },\n    addressInput: {\n        width: \"100%\",\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    currencySelect: {\n        marginLeft: theme.spacing(-1),\n        width: \"calc(100% + 8px)\",\n    },\n    balanceContainer: {\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        marginBottom: theme.spacing(1),\n    },\n    amountContainer: {\n        paddingTop: theme.spacing(5),\n        paddingBottom: theme.spacing(5),\n    },\n    totalCell: {\n        wordBreak: \"break-word\",\n    },\n    amountError: {\n        textAlign: \"center\",\n        color: \"#FF4545\",\n        fontSize: 12,\n        margin: \"0px auto\",\n    },\n    disclosure: {\n        width: \"100%\",\n        maxWidth: 370,\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        textAlign: \"center\",\n        boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n        padding: theme.spacing(2),\n        color: theme.palette.primary.main,\n        border: \"1px solid \" + theme.palette.primary.main,\n        fontSize: 12,\n        lineHeight: \"17px\",\n        borderRadius: 4,\n        marginBottom: theme.spacing(3),\n        \"& a\": {\n            color: \"inherit\",\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            maxWidth: \"100%\",\n        },\n    },\n});\n\nclass TransferContainer extends React.Component<any> {\n    burnInputRef = React.createRef();\n    constructor(props: any) {\n        super(props);\n        this.state = props.store.getState();\n    }\n\n    showDepositModal(tx: any) {\n        const { store } = this.props;\n        store.set(\"showDepositModal\", true);\n        store.set(\"depositModalTx\", tx);\n    }\n\n    async gatherFeeData() { }\n\n    getBalance(asset: string) {\n        console.log('getBalance')\n        const { store } = this.props;\n        console.log(store.get('ethBalance'))\n        return store.get(`${asset}Balance`);\n    }\n\n    validateDeposit() {\n        const { store } = this.props;\n        const selectedAsset = store.get(\"selectedAsset\");\n        const amount = store.get(\"convert.amount\");\n        const amountValid =\n            Number(amount) >=\n            MIN_TX_AMOUNTS[selectedAsset as keyof typeof MIN_TX_AMOUNTS];\n\n        if (!amount || !amountValid) {\n            store.set(\"convert.showAmountError\", true);\n            return false;\n        } else {\n            store.set(\"convert.showAmountError\", false);\n            return true;\n        }\n    }\n\n    validateWithdraw() {\n        const { store } = this.props;\n        const amount = store.get(\"convert.amount\");\n        const convertAddressValid = store.get(\"convert.destinationValid\");\n        const showAddressError = !convertAddressValid;\n        const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n            \"selectedAsset\"\n        );\n        const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n\n        const amountValid =\n            Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n            amount <= Number(balance);\n\n        if (showAddressError) {\n            store.set(\"convert.showDestinationError\", true);\n        } else {\n            store.set(\"convert.showDestinationError\", false);\n        }\n\n        if (!amount || !amountValid) {\n            store.set(\"convert.showAmountError\", true);\n        } else {\n            store.set(\"convert.showAmountError\", false);\n        }\n\n        if (showAddressError || !amount || !amountValid) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    async newDeposit() {\n        const { store } = this.props;\n\n        const amount = store.get(\"convert.amount\");\n        const localWeb3Address = store.get(\"localWeb3Address\");\n        const network = store.get(\"selectedNetwork\");\n        const format: keyof typeof NETWORK_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n        const tx = {\n            id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n            type: \"convert\",\n            instant: false,\n            // awaiting: `${asset}-init`,\n            sourceAsset: asset,\n            sourceNetwork: NETWORK_MAP[asset],\n            sourceNetworkVersion: network,\n            destAddress: localWeb3Address,\n            destNetwork: NETWORK_MAP[format],\n            destNetworkVersion: network,\n            destAsset: format,\n            amount: Number(amount),\n            error: false,\n            txHash: \"\",\n        };\n\n        if (!this.validateDeposit()) {\n            return;\n        }\n\n        store.set(\"confirmTx\", tx);\n        store.set(\"confirmAction\", \"deposit\");\n    }\n\n    async newWithdraw() {\n        const { store } = this.props;\n\n        const amount = store.get(\"convert.amount\");\n        const destination = store.get(\"convert.destination\");\n        const network = store.get(\"selectedNetwork\");\n        const format: keyof typeof NETWORK_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n        const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n        const tx = {\n            id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n            type: \"convert\",\n            instant: false,\n            sourceAsset: format,\n            sourceNetwork: NETWORK_MAP[format],\n            sourceNetworkVersion: network,\n            destAddress: destination,\n            destNetwork: NETWORK_MAP[asset],\n            destNetworkVersion: network,\n            destAsset: asset,\n            amount: Number(amount),\n            error: false,\n            txHash: \"\",\n        };\n\n        if (!this.validateWithdraw()) {\n            return;\n        }\n\n        store.set(\"confirmTx\", tx);\n        store.set(\"confirmAction\", \"withdraw\");\n    }\n\n    render() {\n        const { classes, store } = this.props;\n\n        const selectedNetwork = store.get(\"selectedNetwork\");\n        const selectedTab = store.get(\"selectedTab\");\n        const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n            \"selectedAsset\"\n        );\n\n        // 0 = mint, 1 = release\n        const selectedDirection = store.get(\"convert.selectedDirection\");\n        const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n            \"convert.selectedFormat\"\n        );\n\n        // console.log(selectedFormat);\n        const localWeb3Address = store.get(\"localWeb3Address\");\n        // console.log(localWeb3Address);\n        const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n        const amount = store.get(\"convert.amount\");\n        // console.log(amount);\n        const total = store.get(\"convert.conversionTotal\");\n\n        const allowance = store.get(\"convert.adapterWbtcAllowance\");\n        const hasAllowance = Number(amount) <= Number(allowance);\n        const allowanceRequesting = store.get(\n            \"convert.adapterWbtcAllowanceRequesting\"\n        );\n\n        const convertAddressValid = store.get(\"convert.destinationValid\");\n        const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n        const canConvertFrom =\n            Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n            amount <= Number(balance) &&\n            convertAddressValid;\n        const showAmountError = store.get(\"convert.showAmountError\");\n        const showDestinationError = store.get(\"convert.showDestinationError\");\n        const destAsset = selectedDirection ? selectedAsset : selectedFormat;\n        // console.log(destAsset);\n\n        const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(\n            2\n        );\n\n        return (\n            <React.Fragment>\n                <div className={classes.networkConnectionContainer}>\n                    <Grid item xs={12} sm={4}>\n                        <Grid container justify=\"flex-end\" alignItems=\"center\">\n                            {\n                                <Button\n                                    disableRipple={walletAddress.length}\n                                    color={\"default\"}\n                                    onClick={() => {\n                                        if (!walletAddress) {\n                                            initLocalWeb3(walletType);\n                                        }\n                                    }}\n                                    variant=\"outlined\"\n                                    className={classNames(\n                                        classes.accountButton,\n                                        walletAddress && classes.disabled\n                                    )}\n                                >\n                                    {walletAddress ? (\n                                        <div>\n                                            <div className={classes.circle}></div>\n                                            <span>\n                                                {walletAddress.slice(0, 7) +\n                                                    \"...\" +\n                                                    walletAddress.slice(walletAddress.length - 5)}\n                                            </span>\n                                        </div>\n                                    ) : (\n                                            <span>\n                                                Connect Wallet\n                          <span className={classes.hideMobile}></span>\n                                            </span>\n                                        )}\n                                </Button>\n                            }\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className={classes.container}>\n                    {\n                        <Grid container className={classes.transferActionTabs}>\n                            <ToggleButtonGroup\n                                size=\"small\"\n                                className={classes.toggle}\n                                value={String(selectedDirection)}\n                                exclusive\n                                onChange={(event, newValue) => {\n                                    if (newValue) {\n                                        store.set(\"convert.selectedDirection\", Number(newValue));\n                                        store.set(\"convert.amount\", \"\");\n                                        store.set(\"convert.networkFee\", \"\");\n                                        store.set(\"convert.conversionTotal\", \"\");\n                                        store.set(\"convert.destination\", \"\");\n                                        store.set(\"convert.showAmountError\", false);\n                                        store.set(\"convert.showDestinationError\", false);\n                                    }\n                                }}\n                            >\n                                <ToggleButton disableRipple={true} key={0} value={\"0\"}>\n                                    Mint\n                </ToggleButton>\n                                <ToggleButton disableRipple={true} key={1} value={\"1\"}>\n                                    Release\n                </ToggleButton>\n                            </ToggleButtonGroup>\n                        </Grid>\n                    }\n                    {selectedTab === 1 && (\n                        <div className={classes.actionsContainer}>\n                            <Grid className={classes.actions}>\n                                <Grid container justify=\"center\">\n                                    <Grid item xs={12}>\n                                        {selectedDirection === 0 && (\n                                            <React.Fragment>\n                                                <Grid className={classes.amountContainer} container>\n                                                    <BigCurrencyInput\n                                                        symbol={SYMBOL_MAP[selectedAsset]}\n                                                        placeholder={\"0.00 \" + SYMBOL_MAP[selectedAsset]}\n                                                        usdValue={usdValue}\n                                                        value={amount}\n                                                        onChange={(event: any) => {\n                                                            const value = event.value || \"\";\n                                                            store.set(\"convert.amount\", String(value));\n                                                            gatherFeeData();\n                                                        }}\n                                                    />\n                                                    {showAmountError && (\n                                                        <Typography className={classes.amountError}>\n                                                            Minimum mint amount is{\" \"}\n                                                            {MIN_TX_AMOUNTS[selectedAsset]}{\" \"}\n                                                            {SYMBOL_MAP[selectedAsset]}\n                                                        </Typography>\n                                                    )}\n                                                </Grid>\n                                                <Grid\n                                                    className={classes.balanceContainer}\n                                                    container\n                                                    justify=\"space-between\"\n                                                >\n                                                    <Typography variant=\"caption\">\n                                                        {SYMBOL_MAP[selectedAsset]} Balance\n                          </Typography>\n                                                    <Typography>\n                                                        <ActionLink\n                                                            onClick={() => {\n                                                                store.set(\"convert.amount\", balance);\n                                                            }}\n                                                        >\n                                                            {balance} {SYMBOL_MAP[selectedAsset]}\n                                                        </ActionLink>\n                                                    </Typography>\n                                                </Grid>\n\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid item xs={6}>\n                                                        Asset\n                          </Grid>\n                                                    <Grid item xs={6}>\n                                                        <CurrencySelect\n                                                            active={SYMBOL_MAP[selectedAsset]}\n                                                            className={classes.currencySelect}\n                                                            items={[\"ETH\"]}\n                                                            onCurrencyChange={(v: string) => {\n                                                                const asset = v.toLowerCase();\n                                                                store.set(\n                                                                    \"convert.selectedFormat\",\n                                                                    `w${asset}`\n                                                                );\n                                                                store.set(\"selectedAsset\", asset);\n                                                                gatherFeeData();\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n\n                                                <Grid\n                                                    className={classes.optionsContainer}\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            Destination\n                            </Grid>\n                                                        <Grid item xs={6}>\n                                                            <DarkTooltip\n                                                                placement=\"top\"\n                                                                title={localWeb3Address}\n                                                                arrow\n                                                            >\n                                                                <div>\n                                                                    <img src={WalletIcon} />\n                                                                    {abbreviateAddress(localWeb3Address)}\n                                                                </div>\n                                                            </DarkTooltip>\n                                                        </Grid>\n                                                    </Grid>\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            You will receive\n                            </Grid>\n                                                        <Grid item xs={6} className={classes.totalCell}>\n                                                            <img src={MINI_ICON_MAP[destAsset]} />\n                                                            {total || \"\"} {SYMBOL_MAP[destAsset]}\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </React.Fragment>\n                                        )}\n\n                                        {selectedDirection === 1 && (\n                                            <React.Fragment>\n                                                <Grid className={classes.amountContainer} container>\n                                                    <BigCurrencyInput\n                                                        symbol={SYMBOL_MAP[selectedFormat]}\n                                                        value={amount}\n                                                        placeholder={\"0.00 \" + SYMBOL_MAP[selectedFormat]}\n                                                        usdValue={usdValue}\n                                                        onChange={(event: any) => {\n                                                            const value = event.value || \"\";\n                                                            store.set(\"convert.amount\", String(value));\n                                                            gatherFeeData();\n                                                        }}\n                                                    />\n                                                    {showAmountError && (\n                                                        <Typography className={classes.amountError}>\n                                                            Please enter a valid amount to release\n                            </Typography>\n                                                    )}\n                                                </Grid>\n                                                <Grid\n                                                    className={classes.balanceContainer}\n                                                    container\n                                                    justify=\"space-between\"\n                                                >\n                                                    <Typography variant=\"caption\">\n                                                        {SYMBOL_MAP[selectedFormat]} Balance\n                          </Typography>\n                                                    <Typography>\n                                                        <ActionLink\n                                                            onClick={() => {\n                                                                store.set(\"convert.amount\", balance);\n                                                            }}\n                                                        >\n                                                            {balance} {SYMBOL_MAP[selectedFormat]}\n                                                        </ActionLink>\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid item xs={6}>\n                                                        Asset\n                          </Grid>\n                                                    <Grid item xs={6} onClick={updateBalance}>\n                                                        <CurrencySelect\n                                                            active={SYMBOL_MAP[selectedFormat]}\n                                                            className={classes.currencySelect}\n                                                            items={[\"renBTC\", \"renZEC\", \"renBCH\"]}\n                                                            // items={[\"ETH\"]}\n                                                            renBTCBalance={store.get(\"renBTCBalance\")}\n                                                            renZECBalance={store.get(\"renZECBalance\")}\n                                                            renBCHBalance={store.get(\"renBCHBalance\")}\n                                                            // ETHBalance={store.get(\"ethbal\")}\n                                                            onCurrencyChange={(v: string) => {\n                                                                const asset = v.toLowerCase();\n                                                                store.set(\"convert.selectedFormat\", asset);\n                                                                store.set(\n                                                                    \"selectedAsset\",\n                                                                    asset.replace(\"ren\", \"\")\n                                                                );\n                                                                gatherFeeData();\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                                <Grid\n                                                    container\n                                                    className={classNames(\n                                                        classes.standaloneOption,\n                                                        classes.option\n                                                    )}\n                                                >\n                                                    <Grid xs={12}>\n                                                        <div className={classes.addressInput}>\n                                                            <TextField\n                                                                label=\"Destination\"\n                                                                placeholder={`Enter ${NAME_MAP[selectedAsset]} Address`}\n                                                                size=\"medium\"\n                                                                fullWidth={true}\n                                                                error={showDestinationError}\n                                                                helperText={\n                                                                    showDestinationError\n                                                                        ? `Please enter a valid ${NAME_MAP[selectedAsset]} address`\n                                                                        : \"\"\n                                                                }\n                                                                InputProps={{\n                                                                    disableUnderline: true,\n                                                                }}\n                                                                InputLabelProps={{\n                                                                    shrink: true,\n                                                                }}\n                                                                inputProps={{\n                                                                    onFocus: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            true\n                                                                        );\n                                                                    },\n                                                                    onBlur: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            false\n                                                                        );\n                                                                    },\n                                                                }}\n                                                                onChange={(event) => {\n                                                                    const value = event.target.value;\n                                                                    store.set(\"convert.destination\", value);\n                                                                    store.set(\n                                                                        \"convert.destinationValid\",\n                                                                        AddressValidator.validate(\n                                                                            value,\n                                                                            selectedAsset.toUpperCase(),\n                                                                            selectedNetwork === \"testnet\"\n                                                                                ? \"testnet\"\n                                                                                : \"prod\"\n                                                                        )\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </Grid>\n                                                </Grid>\n\n                                                <Grid\n                                                    className={classes.optionsContainer}\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid container className={classes.option}>\n                                                        <Grid item xs={6}>\n                                                            You will receive\n                            </Grid>\n                                                        <Grid item xs={6} className={classes.totalCell}>\n                                                            <img src={MINI_ICON_MAP[destAsset]} />\n                                                            {total || \"\"} {SYMBOL_MAP[destAsset]}\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </React.Fragment>\n                                        )}\n                                    </Grid>\n                                </Grid>\n\n                                <Grid\n                                    container\n                                    justify=\"center\"\n                                    className={classes.actionButtonContainer}\n                                >\n                                    {selectedDirection === 0 && (\n                                        <Grid item xs={12}>\n                                            <Button\n                                                disabled={!total || parseFloat(total) < 0.0000001}\n                                                variant={\"contained\"}\n                                                disableRipple\n                                                color=\"primary\"\n                                                size=\"large\"\n                                                fullWidth\n                                                className={classNames(\n                                                    classes.margin,\n                                                    classes.actionButton\n                                                )}\n                                                onClick={this.newDeposit.bind(this)}\n                                            >\n                                                Next\n                      </Button>\n                                        </Grid>\n                                    )}\n                                    {selectedDirection === 1 && (\n                                        <Grid item xs={12}>\n                                            <Button\n                                                disabled={!total || parseFloat(total) < 0.0000001}\n                                                variant={\"contained\"}\n                                                disableRipple\n                                                color=\"primary\"\n                                                fullWidth\n                                                size=\"large\"\n                                                className={classNames(\n                                                    classes.margin,\n                                                    classes.actionButton\n                                                )}\n                                                onClick={this.newWithdraw.bind(this)}\n                                            >\n                                                Next\n                      </Button>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles)(withStore(TransferContainer));\n"]},"metadata":{},"sourceType":"module"}