{"ast":null,"code":"var _jsxFileName = \"/home/ryan/dev/defi/shadowtoken2/src/containers/TransferContainer2.tsx\";\nimport React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { withStyles } from \"@material-ui/styles\";\nimport classNames from \"classnames\";\nimport { gatherFeeData, MIN_TX_AMOUNTS } from \"../utils/txUtils\";\nimport { MINI_ICON_MAP, SYMBOL_MAP, NETWORK_MAP, abbreviateAddress, updateBalance } from \"../utils/walletUtils\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport BigCurrencyInput from \"../components/BigCurrencyInput\";\nimport CurrencyInput from \"../components/CurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\nimport DarkTooltip from \"../components/DarkTooltip\";\nimport WalletIcon from \"../assets/wallet-icon.svg\";\n\nconst styles = theme => ({\n  container: {\n    background: \"#fff\",\n    border: \"1px solid \" + theme.palette.divider,\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    maxWidth: 600,\n    width: \"100%\",\n    margin: \"0px auto \" + theme.spacing(1) + \"px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  },\n  transferActionTabs: {\n    margin: \"0px auto\",\n    // marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  depositAddressContainer: {},\n  depositAddress: {\n    width: \"100%\"\n  },\n  actionButtonContainer: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    textAlign: \"center\",\n    \"& button\": {\n      \"&.Mui-disabled\": {},\n      margin: \"0px auto\",\n      fontSize: 12,\n      minWidth: 175,\n      padding: theme.spacing(1)\n    }\n  },\n  amountField: {\n    width: \"100%\"\n  },\n  depositButton: {},\n  withdrawButton: {},\n  actions: {\n    paddingTop: theme.spacing(1),\n    padding: theme.spacing(3)\n  },\n  transactionsContainer: {\n    padding: theme.spacing(3),\n    paddingTop: theme.spacing(0),\n    marginTop: theme.spacing(2),\n    borderTop: \"1px solid #EBEBEB\"\n  },\n  actionsContainer: {\n    borderRadius: theme.shape.borderRadius,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0\n  },\n  destChooser: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\"\n    },\n    \"& button\": {\n      width: \"50%\"\n    }\n  },\n  fees: {\n    width: \"100%\",\n    border: \"1px solid \" + theme.palette.divider,\n    fontSize: 12,\n    padding: theme.spacing(1),\n    paddingBottom: 0,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& span\": {\n      marginBottom: theme.spacing(1)\n    }\n  },\n  icon: {\n    width: 16,\n    height: 16,\n    marginRight: theme.spacing(0.75)\n  },\n  toggle: {\n    \"& button\": {\n      minHeight: \"auto\",\n      border: \"1px solid transparent\",\n      borderBottom: \"1px solid \" + theme.palette.divider,\n      height: 56,\n      backgroundColor: \"#fff\",\n      \"&:first-child\": {\n        borderRight: \"1px solid \" + theme.palette.divider\n      },\n      \"&.MuiToggleButton-root\": {},\n      \"&.Mui-selected\": {\n        borderBottom: \"1px solid transparent\",\n        color: theme.palette.primary.main,\n        backgroundColor: \"#transparent !important\"\n      },\n      \"& .MuiToggleButton-label\": {\n        fontSize: 16\n      },\n      \"& span\": {\n        textTransform: \"capitalize !important\"\n      }\n    }\n  },\n  title: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(3)\n  },\n  optionsContainer: {\n    border: \"1px solid #EDEFF3\",\n    borderBottom: \"none\",\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  option: {\n    borderBottom: \"1px solid #EDEFF3\",\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    minHeight: 60,\n    fontSize: 14,\n    \"& img\": {\n      height: \"auto\",\n      width: 24,\n      marginRight: theme.spacing(1)\n    },\n    \"& .MuiGrid-root\": {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  },\n  standaloneOption: {\n    border: \"1px solid #DBE0E8\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(2),\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\"\n  },\n  addressInput: {\n    width: \"100%\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2)\n  },\n  currencySelect: {\n    marginLeft: theme.spacing(-1),\n    width: \"calc(100% + 8px)\"\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1)\n  },\n  amountContainer: {\n    paddingTop: theme.spacing(5),\n    paddingBottom: theme.spacing(5)\n  },\n  totalCell: {\n    wordBreak: \"break-word\"\n  },\n  amountError: {\n    textAlign: \"center\",\n    color: \"#FF4545\",\n    fontSize: 12,\n    margin: \"0px auto\"\n  },\n  disclosure: {\n    width: \"100%\",\n    maxWidth: 370,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"center\",\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    padding: theme.spacing(2),\n    color: theme.palette.primary.main,\n    border: \"1px solid \" + theme.palette.primary.main,\n    fontSize: 12,\n    lineHeight: \"17px\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(3),\n    \"& a\": {\n      color: \"inherit\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\"\n    }\n  }\n});\n\nclass TransferContainer2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.burnInputRef = React.createRef();\n    this.state = props.store.getState();\n  }\n\n  showDepositModal(tx) {\n    const {\n      store\n    } = this.props;\n    store.set(\"showDepositModal\", true);\n    store.set(\"depositModalTx\", tx);\n  }\n\n  async gatherFeeData() {}\n\n  getBalance(asset) {\n    console.log(\"getBalance\");\n    const {\n      store\n    } = this.props;\n    console.log(store.get(\"ethBalance\"));\n    return store.get(`${asset}Balance`);\n  }\n\n  validateDeposit() {\n    const {\n      store\n    } = this.props;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const amount = store.get(\"convert.amount\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset];\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n      return false;\n    } else {\n      store.set(\"convert.showAmountError\", false);\n      return true;\n    }\n  }\n\n  validateWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const showAddressError = !convertAddressValid;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const selectedFormat = store.get(\"convert.selectedFormat\");\n    const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n    const amountValid = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance);\n\n    if (showAddressError) {\n      store.set(\"convert.showDestinationError\", true);\n    } else {\n      store.set(\"convert.showDestinationError\", false);\n    }\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n    } else {\n      store.set(\"convert.showAmountError\", false);\n    }\n\n    if (showAddressError || !amount || !amountValid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async newDeposit() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const localWeb3Address = store.get(\"localWeb3Address\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      // awaiting: `${asset}-init`,\n      sourceAsset: asset,\n      sourceNetwork: NETWORK_MAP[asset],\n      sourceNetworkVersion: network,\n      destAddress: localWeb3Address,\n      destNetwork: NETWORK_MAP[format],\n      destNetworkVersion: network,\n      destAsset: format,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateDeposit()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"deposit\");\n  }\n\n  async newWithdraw() {\n    const {\n      store\n    } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const destination = store.get(\"convert.destination\");\n    const network = store.get(\"selectedNetwork\");\n    const format = store.get(\"convert.selectedFormat\");\n    const asset = store.get(\"selectedAsset\");\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      sourceAsset: format,\n      sourceNetwork: NETWORK_MAP[format],\n      sourceNetworkVersion: network,\n      destAddress: destination,\n      destNetwork: NETWORK_MAP[asset],\n      destNetworkVersion: network,\n      destAsset: asset,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\"\n    };\n\n    if (!this.validateWithdraw()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"withdraw\");\n  }\n\n  render() {\n    const {\n      classes,\n      store\n    } = this.props;\n    const selectedNetwork = store.get(\"selectedNetwork\");\n    const selectedTab = store.get(\"selectedTab\");\n    const selectedAsset = store.get(\"selectedAsset\"); // 0 = mint, 1 = release\n\n    const selectedDirection = store.get(\"convert.selectedDirection\");\n    const selectedFormat = store.get(\"convert.selectedFormat\"); // console.log(selectedFormat);\n\n    const localWeb3Address = store.get(\"localWeb3Address\"); // console.log(localWeb3Address);\n\n    const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n    const amount = store.get(\"convert.amount\"); // console.log(amount);\n\n    const total = store.get(\"convert.conversionTotal\");\n    const allowance = store.get(\"convert.adapterWbtcAllowance\");\n    const hasAllowance = Number(amount) <= Number(allowance);\n    const allowanceRequesting = store.get(\"convert.adapterWbtcAllowanceRequesting\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n    const canConvertFrom = Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] && amount <= Number(balance) && convertAddressValid;\n    const showAmountError = store.get(\"convert.showAmountError\");\n    const showDestinationError = store.get(\"convert.showDestinationError\");\n    const destAsset = selectedDirection ? selectedAsset : selectedFormat; // console.log(destAsset);\n\n    const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(2);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.actionsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ETH\", \"ELA\", \"USDT\"],\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", `w${asset}`);\n        store.set(\"selectedAsset\", asset);\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CurrencyInput, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ETH\", \"ELA\", \"USDT\"],\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", `w${asset}`);\n        store.set(\"selectedAsset\", asset);\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }\n    }, \"Test\"), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 19\n      }\n    }, selectedDirection === 0 && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.amountContainer,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BigCurrencyInput, {\n      symbol: SYMBOL_MAP[selectedAsset],\n      placeholder: \"0.00 \" + SYMBOL_MAP[selectedAsset],\n      usdValue: usdValue,\n      value: amount,\n      onChange: event => {\n        const value = event.value || \"\";\n        store.set(\"convert.amount\", String(value));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 27\n      }\n    }), showAmountError && /*#__PURE__*/React.createElement(Typography, {\n      className: classes.amountError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 29\n      }\n    }, \"Minimum mint amount is\", \" \", MIN_TX_AMOUNTS[selectedAsset], \" \", SYMBOL_MAP[selectedAsset])), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.balanceContainer,\n      container: true,\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 27\n      }\n    }, SYMBOL_MAP[selectedAsset], \" Balance\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(ActionLink, {\n      onClick: () => {\n        store.set(\"convert.amount\", balance);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 29\n      }\n    }, balance, \" \", SYMBOL_MAP[selectedAsset]))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 27\n      }\n    }, \"Asset\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedAsset],\n      className: classes.currencySelect,\n      items: [\"ETH\", \"ELA\", \"USDT\"],\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", `w${asset}`);\n        store.set(\"selectedAsset\", asset);\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.optionsContainer,\n      container: true,\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 29\n      }\n    }, \"Destination\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(DarkTooltip, {\n      placement: \"top\",\n      title: localWeb3Address,\n      arrow: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: WalletIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 35\n      }\n    }), abbreviateAddress(localWeb3Address))))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 29\n      }\n    }, \"You will receive\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 31\n      }\n    }), total || \"\", \" \", SYMBOL_MAP[destAsset])))), selectedDirection === 1 && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.amountContainer,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BigCurrencyInput, {\n      symbol: SYMBOL_MAP[selectedFormat],\n      value: amount,\n      placeholder: \"0.00 \" + SYMBOL_MAP[selectedFormat],\n      usdValue: usdValue,\n      onChange: event => {\n        const value = event.value || \"\";\n        store.set(\"convert.amount\", String(value));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 27\n      }\n    }), showAmountError && /*#__PURE__*/React.createElement(Typography, {\n      className: classes.amountError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 29\n      }\n    }, \"Please enter a valid amount to release\")), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.balanceContainer,\n      container: true,\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 27\n      }\n    }, SYMBOL_MAP[selectedFormat], \" Balance\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(ActionLink, {\n      onClick: () => {\n        store.set(\"convert.amount\", balance);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 29\n      }\n    }, balance, \" \", SYMBOL_MAP[selectedFormat]))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 27\n      }\n    }, \"Asset\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      onClick: updateBalance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(CurrencySelect, {\n      active: SYMBOL_MAP[selectedFormat],\n      className: classes.currencySelect,\n      items: [\"wETH\", \"wELA\", \"wUSDT\"] // renBTCBalance={store.get(\"renBTCBalance\")}\n      // renZECBalance={store.get(\"renZECBalance\")}\n      // renBCHBalance={store.get(\"renBCHBalance\")}\n      // ETHBalance={store.get(\"ethbal\")}\n      ,\n      onCurrencyChange: v => {\n        const asset = v.toLowerCase();\n        store.set(\"convert.selectedFormat\", asset);\n        store.set(\"selectedAsset\", asset.replace(\"w\", \"\"));\n        gatherFeeData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classNames(classes.standaloneOption, classes.option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 29\n      }\n    }, \"Destination\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(DarkTooltip, {\n      placement: \"top\",\n      title: localWeb3Address,\n      arrow: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: WalletIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 35\n      }\n    }), abbreviateAddress(localWeb3Address)))))), /*#__PURE__*/React.createElement(Grid, {\n      className: classes.optionsContainer,\n      container: true,\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 29\n      }\n    }, \"You will receive\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      className: classes.totalCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: MINI_ICON_MAP[destAsset],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 31\n      }\n    }), total || \"\", \" \", SYMBOL_MAP[destAsset])))))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      className: classes.actionButtonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 17\n      }\n    }, selectedDirection === 0 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      size: \"large\",\n      fullWidth: true,\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newDeposit.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 23\n      }\n    }, \"Next\")), selectedDirection === 1 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !total || parseFloat(total) < 0.0000001,\n      variant: \"contained\",\n      disableRipple: true,\n      color: \"primary\",\n      fullWidth: true,\n      size: \"large\",\n      className: classNames(classes.margin, classes.actionButton),\n      onClick: this.newWithdraw.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 23\n      }\n    }, \"Next\")))))));\n  }\n\n}\n\nexport default withStyles(styles)(withStore(TransferContainer2));","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/src/containers/TransferContainer2.tsx"],"names":["React","withStore","withStyles","classNames","gatherFeeData","MIN_TX_AMOUNTS","MINI_ICON_MAP","SYMBOL_MAP","NETWORK_MAP","abbreviateAddress","updateBalance","Grid","Button","Typography","CurrencySelect","BigCurrencyInput","CurrencyInput","ActionLink","DarkTooltip","styles","theme","container","background","border","palette","divider","borderRadius","boxShadow","maxWidth","width","margin","spacing","breakpoints","down","transferActionTabs","marginBottom","depositAddressContainer","depositAddress","actionButtonContainer","paddingTop","paddingBottom","textAlign","fontSize","minWidth","padding","amountField","depositButton","withdrawButton","actions","transactionsContainer","marginTop","borderTop","actionsContainer","shape","borderTopLeftRadius","borderTopRightRadius","destChooser","fees","display","flexDirection","icon","height","marginRight","toggle","minHeight","borderBottom","backgroundColor","borderRight","color","primary","main","textTransform","title","optionsContainer","option","paddingLeft","paddingRight","alignItems","standaloneOption","addressInput","currencySelect","marginLeft","balanceContainer","amountContainer","totalCell","wordBreak","amountError","disclosure","lineHeight","TransferContainer2","Component","constructor","props","burnInputRef","createRef","state","store","getState","showDepositModal","tx","set","getBalance","asset","console","log","get","validateDeposit","selectedAsset","amount","amountValid","Number","validateWithdraw","convertAddressValid","showAddressError","selectedFormat","balance","newDeposit","localWeb3Address","network","format","id","Math","floor","random","type","instant","sourceAsset","sourceNetwork","sourceNetworkVersion","destAddress","destNetwork","destNetworkVersion","destAsset","error","txHash","newWithdraw","destination","render","classes","selectedNetwork","selectedTab","selectedDirection","total","allowance","hasAllowance","allowanceRequesting","canConvertTo","canConvertFrom","showAmountError","showDestinationError","usdValue","toFixed","v","toLowerCase","event","value","String","WalletIcon","replace","parseFloat","actionButton","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAAiBC,UAAjB,QAAmC,qBAAnC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAIEC,aAJF,EAKEC,cALF,QAMO,kBANP;AAOA,SACEC,aADF,EAEEC,UAFF,EAGEC,WAHF,EAKEC,iBALF,EAMEC,aANF,QAOO,sBAPP;AASA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AAGA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;AAMA,MAAMC,MAAiC,GAAIC,KAAD,KAAY;AACpDC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,MADH;AAETC,IAAAA,MAAM,EAAE,eAAeH,KAAK,CAACI,OAAN,CAAcC,OAF5B;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,SAAS,EAAE,mCAJF;AAKTC,IAAAA,QAAQ,EAAE,GALD;AAMTC,IAAAA,KAAK,EAAE,MANE;AAOTC,IAAAA,MAAM,EAAE,cAAcV,KAAK,CAACW,OAAN,CAAc,CAAd,CAAd,GAAiC,IAPhC;AAST,KAACX,KAAK,CAACY,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BL,MAAAA,QAAQ,EAAE;AADoB;AATvB,GADyC;AAcpDM,EAAAA,kBAAkB,EAAE;AAClBJ,IAAAA,MAAM,EAAE,UADU;AAElB;AACAK,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd,CAHI;AAIlB,uCAAmC;AACjCF,MAAAA,KAAK,EAAE;AAD0B,KAJjB;AAOlB,gBAAY;AACVA,MAAAA,KAAK,EAAE;AADG;AAPM,GAdgC;AAyBpDO,EAAAA,uBAAuB,EAAE,EAzB2B;AA0BpDC,EAAAA,cAAc,EAAE;AACdR,IAAAA,KAAK,EAAE;AADO,GA1BoC;AA6BpDS,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CADS;AAErBS,IAAAA,aAAa,EAAEpB,KAAK,CAACW,OAAN,CAAc,CAAd,CAFM;AAGrBU,IAAAA,SAAS,EAAE,QAHU;AAIrB,gBAAY;AACV,wBAAkB,EADR;AAEVX,MAAAA,MAAM,EAAE,UAFE;AAGVY,MAAAA,QAAQ,EAAE,EAHA;AAIVC,MAAAA,QAAQ,EAAE,GAJA;AAKVC,MAAAA,OAAO,EAAExB,KAAK,CAACW,OAAN,CAAc,CAAd;AALC;AAJS,GA7B6B;AAyCpDc,EAAAA,WAAW,EAAE;AACXhB,IAAAA,KAAK,EAAE;AADI,GAzCuC;AA4CpDiB,EAAAA,aAAa,EAAE,EA5CqC;AA6CpDC,EAAAA,cAAc,EAAE,EA7CoC;AA8CpDC,EAAAA,OAAO,EAAE;AACPT,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CADL;AAEPa,IAAAA,OAAO,EAAExB,KAAK,CAACW,OAAN,CAAc,CAAd;AAFF,GA9C2C;AAkDpDkB,EAAAA,qBAAqB,EAAE;AACrBL,IAAAA,OAAO,EAAExB,KAAK,CAACW,OAAN,CAAc,CAAd,CADY;AAErBQ,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CAFS;AAGrBmB,IAAAA,SAAS,EAAE9B,KAAK,CAACW,OAAN,CAAc,CAAd,CAHU;AAIrBoB,IAAAA,SAAS,EAAE;AAJU,GAlD6B;AAwDpDC,EAAAA,gBAAgB,EAAE;AAChB1B,IAAAA,YAAY,EAAEN,KAAK,CAACiC,KAAN,CAAY3B,YADV;AAEhB4B,IAAAA,mBAAmB,EAAE,CAFL;AAGhBC,IAAAA,oBAAoB,EAAE;AAHN,GAxDkC;AA6DpDC,EAAAA,WAAW,EAAE;AACX3B,IAAAA,KAAK,EAAE,MADI;AAEXqB,IAAAA,SAAS,EAAE9B,KAAK,CAACW,OAAN,CAAc,CAAd,CAFA;AAGXI,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd,CAHH;AAIX,uCAAmC;AACjCF,MAAAA,KAAK,EAAE;AAD0B,KAJxB;AAOX,gBAAY;AACVA,MAAAA,KAAK,EAAE;AADG;AAPD,GA7DuC;AAwEpD4B,EAAAA,IAAI,EAAE;AACJ5B,IAAAA,KAAK,EAAE,MADH;AAEJN,IAAAA,MAAM,EAAE,eAAeH,KAAK,CAACI,OAAN,CAAcC,OAFjC;AAGJiB,IAAAA,QAAQ,EAAE,EAHN;AAIJE,IAAAA,OAAO,EAAExB,KAAK,CAACW,OAAN,CAAc,CAAd,CAJL;AAKJS,IAAAA,aAAa,EAAE,CALX;AAMJU,IAAAA,SAAS,EAAE9B,KAAK,CAACW,OAAN,CAAc,CAAd,CANP;AAOJI,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd,CAPV;AAQJ2B,IAAAA,OAAO,EAAE,MARL;AASJC,IAAAA,aAAa,EAAE,QATX;AAUJ,cAAU;AACRxB,MAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd;AADN;AAVN,GAxE8C;AAsFpD6B,EAAAA,IAAI,EAAE;AACJ/B,IAAAA,KAAK,EAAE,EADH;AAEJgC,IAAAA,MAAM,EAAE,EAFJ;AAGJC,IAAAA,WAAW,EAAE1C,KAAK,CAACW,OAAN,CAAc,IAAd;AAHT,GAtF8C;AA2FpDgC,EAAAA,MAAM,EAAE;AACN,gBAAY;AACVC,MAAAA,SAAS,EAAE,MADD;AAEVzC,MAAAA,MAAM,EAAE,uBAFE;AAGV0C,MAAAA,YAAY,EAAE,eAAe7C,KAAK,CAACI,OAAN,CAAcC,OAHjC;AAIVoC,MAAAA,MAAM,EAAE,EAJE;AAKVK,MAAAA,eAAe,EAAE,MALP;AAMV,uBAAiB;AACfC,QAAAA,WAAW,EAAE,eAAe/C,KAAK,CAACI,OAAN,CAAcC;AAD3B,OANP;AASV,gCAA0B,EAThB;AAUV,wBAAkB;AAChBwC,QAAAA,YAAY,EAAE,uBADE;AAEhBG,QAAAA,KAAK,EAAEhD,KAAK,CAACI,OAAN,CAAc6C,OAAd,CAAsBC,IAFb;AAGhBJ,QAAAA,eAAe,EAAE;AAHD,OAVR;AAeV,kCAA4B;AAC1BxB,QAAAA,QAAQ,EAAE;AADgB,OAflB;AAkBV,gBAAU;AACR6B,QAAAA,aAAa,EAAE;AADP;AAlBA;AADN,GA3F4C;AAmHpDC,EAAAA,KAAK,EAAE;AACLjC,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CADP;AAELS,IAAAA,aAAa,EAAEpB,KAAK,CAACW,OAAN,CAAc,CAAd;AAFV,GAnH6C;AAuHpD0C,EAAAA,gBAAgB,EAAE;AAChBlD,IAAAA,MAAM,EAAE,mBADQ;AAEhB0C,IAAAA,YAAY,EAAE,MAFE;AAGhBvC,IAAAA,YAAY,EAAE,CAHE;AAIhBC,IAAAA,SAAS,EAAE;AAJK,GAvHkC;AA6HpD+C,EAAAA,MAAM,EAAE;AACNT,IAAAA,YAAY,EAAE,mBADR;AAENU,IAAAA,WAAW,EAAEvD,KAAK,CAACW,OAAN,CAAc,CAAd,CAFP;AAGN6C,IAAAA,YAAY,EAAExD,KAAK,CAACW,OAAN,CAAc,CAAd,CAHR;AAINiC,IAAAA,SAAS,EAAE,EAJL;AAKNtB,IAAAA,QAAQ,EAAE,EALJ;AAMN,aAAS;AACPmB,MAAAA,MAAM,EAAE,MADD;AAEPhC,MAAAA,KAAK,EAAE,EAFA;AAGPiC,MAAAA,WAAW,EAAE1C,KAAK,CAACW,OAAN,CAAc,CAAd;AAHN,KANH;AAWN,uBAAmB;AACjB2B,MAAAA,OAAO,EAAE,MADQ;AAEjBmB,MAAAA,UAAU,EAAE;AAFK;AAXb,GA7H4C;AA6IpDC,EAAAA,gBAAgB,EAAE;AAChBvD,IAAAA,MAAM,EAAE,mBADQ;AAEhBG,IAAAA,YAAY,EAAE,CAFE;AAGhBS,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd,CAHE;AAIhBJ,IAAAA,SAAS,EAAE;AAJK,GA7IkC;AAmJpDoD,EAAAA,YAAY,EAAE;AACZlD,IAAAA,KAAK,EAAE,MADK;AAEZU,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CAFA;AAGZS,IAAAA,aAAa,EAAEpB,KAAK,CAACW,OAAN,CAAc,CAAd;AAHH,GAnJsC;AAwJpDiD,EAAAA,cAAc,EAAE;AACdC,IAAAA,UAAU,EAAE7D,KAAK,CAACW,OAAN,CAAc,CAAC,CAAf,CADE;AAEdF,IAAAA,KAAK,EAAE;AAFO,GAxJoC;AA4JpDqD,EAAAA,gBAAgB,EAAE;AAChBxB,IAAAA,OAAO,EAAE,MADO;AAEhBmB,IAAAA,UAAU,EAAE,UAFI;AAGhB1C,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd;AAHE,GA5JkC;AAiKpDoD,EAAAA,eAAe,EAAE;AACf5C,IAAAA,UAAU,EAAEnB,KAAK,CAACW,OAAN,CAAc,CAAd,CADG;AAEfS,IAAAA,aAAa,EAAEpB,KAAK,CAACW,OAAN,CAAc,CAAd;AAFA,GAjKmC;AAqKpDqD,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF,GArKyC;AAwKpDC,EAAAA,WAAW,EAAE;AACX7C,IAAAA,SAAS,EAAE,QADA;AAEX2B,IAAAA,KAAK,EAAE,SAFI;AAGX1B,IAAAA,QAAQ,EAAE,EAHC;AAIXZ,IAAAA,MAAM,EAAE;AAJG,GAxKuC;AA8KpDyD,EAAAA,UAAU,EAAE;AACV1D,IAAAA,KAAK,EAAE,MADG;AAEVD,IAAAA,QAAQ,EAAE,GAFA;AAGVqD,IAAAA,UAAU,EAAE,MAHF;AAIVnB,IAAAA,WAAW,EAAE,MAJH;AAKVrB,IAAAA,SAAS,EAAE,QALD;AAMVd,IAAAA,SAAS,EAAE,mCAND;AAOViB,IAAAA,OAAO,EAAExB,KAAK,CAACW,OAAN,CAAc,CAAd,CAPC;AAQVqC,IAAAA,KAAK,EAAEhD,KAAK,CAACI,OAAN,CAAc6C,OAAd,CAAsBC,IARnB;AASV/C,IAAAA,MAAM,EAAE,eAAeH,KAAK,CAACI,OAAN,CAAc6C,OAAd,CAAsBC,IATnC;AAUV5B,IAAAA,QAAQ,EAAE,EAVA;AAWV8C,IAAAA,UAAU,EAAE,MAXF;AAYV9D,IAAAA,YAAY,EAAE,CAZJ;AAaVS,IAAAA,YAAY,EAAEf,KAAK,CAACW,OAAN,CAAc,CAAd,CAbJ;AAcV,WAAO;AACLqC,MAAAA,KAAK,EAAE;AADF,KAdG;AAiBV,KAAChD,KAAK,CAACY,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BL,MAAAA,QAAQ,EAAE;AADoB;AAjBtB;AA9KwC,CAAZ,CAA1C;;AAqMA,MAAM6D,kBAAN,SAAiCzF,KAAK,CAAC0F,SAAvC,CAAsD;AAEpDC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AADsB,SADxBC,YACwB,GADT7F,KAAK,CAAC8F,SAAN,EACS;AAEtB,SAAKC,KAAL,GAAaH,KAAK,CAACI,KAAN,CAAYC,QAAZ,EAAb;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,EAAD,EAAU;AACxB,UAAM;AAAEH,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AACAI,IAAAA,KAAK,CAACI,GAAN,CAAU,kBAAV,EAA8B,IAA9B;AACAJ,IAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,EAA4BD,EAA5B;AACD;;AAED,QAAM/F,aAAN,GAAsB,CAAE;;AAExBiG,EAAAA,UAAU,CAACC,KAAD,EAAgB;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAM;AAAER,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,GAAN,CAAU,YAAV,CAAZ;AACA,WAAOT,KAAK,CAACS,GAAN,CAAW,GAAEH,KAAM,SAAnB,CAAP;AACD;;AAEDI,EAAAA,eAAe,GAAG;AAChB,UAAM;AAAEV,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AACA,UAAMe,aAAa,GAAGX,KAAK,CAACS,GAAN,CAAU,eAAV,CAAtB;AACA,UAAMG,MAAM,GAAGZ,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAf;AACA,UAAMI,WAAW,GACfC,MAAM,CAACF,MAAD,CAAN,IACAvG,cAAc,CAACsG,aAAD,CAFhB;;AAIA,QAAI,CAACC,MAAD,IAAW,CAACC,WAAhB,EAA6B;AAC3Bb,MAAAA,KAAK,CAACI,GAAN,CAAU,yBAAV,EAAqC,IAArC;AACA,aAAO,KAAP;AACD,KAHD,MAGO;AACLJ,MAAAA,KAAK,CAACI,GAAN,CAAU,yBAAV,EAAqC,KAArC;AACA,aAAO,IAAP;AACD;AACF;;AAEDW,EAAAA,gBAAgB,GAAG;AACjB,UAAM;AAAEf,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AACA,UAAMgB,MAAM,GAAGZ,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAf;AACA,UAAMO,mBAAmB,GAAGhB,KAAK,CAACS,GAAN,CAAU,0BAAV,CAA5B;AACA,UAAMQ,gBAAgB,GAAG,CAACD,mBAA1B;AACA,UAAML,aAA0C,GAAGX,KAAK,CAACS,GAAN,CACjD,eADiD,CAAnD;AAGA,UAAMS,cAAuC,GAAGlB,KAAK,CAACS,GAAN,CAC9C,wBAD8C,CAAhD;AAGA,UAAMU,OAAO,GAAGnB,KAAK,CAACS,GAAN,CAAUlG,UAAU,CAAC2G,cAAD,CAAV,GAA6B,SAAvC,CAAhB;AAEA,UAAML,WAAW,GACfC,MAAM,CAACF,MAAD,CAAN,IAAkBvG,cAAc,CAACsG,aAAD,CAAhC,IACAC,MAAM,IAAIE,MAAM,CAACK,OAAD,CAFlB;;AAIA,QAAIF,gBAAJ,EAAsB;AACpBjB,MAAAA,KAAK,CAACI,GAAN,CAAU,8BAAV,EAA0C,IAA1C;AACD,KAFD,MAEO;AACLJ,MAAAA,KAAK,CAACI,GAAN,CAAU,8BAAV,EAA0C,KAA1C;AACD;;AAED,QAAI,CAACQ,MAAD,IAAW,CAACC,WAAhB,EAA6B;AAC3Bb,MAAAA,KAAK,CAACI,GAAN,CAAU,yBAAV,EAAqC,IAArC;AACD,KAFD,MAEO;AACLJ,MAAAA,KAAK,CAACI,GAAN,CAAU,yBAAV,EAAqC,KAArC;AACD;;AAED,QAAIa,gBAAgB,IAAI,CAACL,MAArB,IAA+B,CAACC,WAApC,EAAiD;AAC/C,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AAED,QAAMO,UAAN,GAAmB;AACjB,UAAM;AAAEpB,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AAEA,UAAMgB,MAAM,GAAGZ,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAf;AACA,UAAMY,gBAAgB,GAAGrB,KAAK,CAACS,GAAN,CAAU,kBAAV,CAAzB;AACA,UAAMa,OAAO,GAAGtB,KAAK,CAACS,GAAN,CAAU,iBAAV,CAAhB;AACA,UAAMc,MAAgC,GAAGvB,KAAK,CAACS,GAAN,CACvC,wBADuC,CAAzC;AAGA,UAAMH,KAA+B,GAAGN,KAAK,CAACS,GAAN,CAAU,eAAV,CAAxC;AAEA,UAAMN,EAAE,GAAG;AACTqB,MAAAA,EAAE,EAAE,QAAQC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAAM,EAAjC,CADH;AAETC,MAAAA,IAAI,EAAE,SAFG;AAGTC,MAAAA,OAAO,EAAE,KAHA;AAIT;AACAC,MAAAA,WAAW,EAAExB,KALJ;AAMTyB,MAAAA,aAAa,EAAEvH,WAAW,CAAC8F,KAAD,CANjB;AAOT0B,MAAAA,oBAAoB,EAAEV,OAPb;AAQTW,MAAAA,WAAW,EAAEZ,gBARJ;AASTa,MAAAA,WAAW,EAAE1H,WAAW,CAAC+G,MAAD,CATf;AAUTY,MAAAA,kBAAkB,EAAEb,OAVX;AAWTc,MAAAA,SAAS,EAAEb,MAXF;AAYTX,MAAAA,MAAM,EAAEE,MAAM,CAACF,MAAD,CAZL;AAaTyB,MAAAA,KAAK,EAAE,KAbE;AAcTC,MAAAA,MAAM,EAAE;AAdC,KAAX;;AAiBA,QAAI,CAAC,KAAK5B,eAAL,EAAL,EAA6B;AAC3B;AACD;;AAEDV,IAAAA,KAAK,CAACI,GAAN,CAAU,WAAV,EAAuBD,EAAvB;AACAH,IAAAA,KAAK,CAACI,GAAN,CAAU,eAAV,EAA2B,SAA3B;AACD;;AAED,QAAMmC,WAAN,GAAoB;AAClB,UAAM;AAAEvC,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AAEA,UAAMgB,MAAM,GAAGZ,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAf;AACA,UAAM+B,WAAW,GAAGxC,KAAK,CAACS,GAAN,CAAU,qBAAV,CAApB;AACA,UAAMa,OAAO,GAAGtB,KAAK,CAACS,GAAN,CAAU,iBAAV,CAAhB;AACA,UAAMc,MAAgC,GAAGvB,KAAK,CAACS,GAAN,CACvC,wBADuC,CAAzC;AAGA,UAAMH,KAA+B,GAAGN,KAAK,CAACS,GAAN,CAAU,eAAV,CAAxC;AAEA,UAAMN,EAAE,GAAG;AACTqB,MAAAA,EAAE,EAAE,QAAQC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAAM,EAAjC,CADH;AAETC,MAAAA,IAAI,EAAE,SAFG;AAGTC,MAAAA,OAAO,EAAE,KAHA;AAITC,MAAAA,WAAW,EAAEP,MAJJ;AAKTQ,MAAAA,aAAa,EAAEvH,WAAW,CAAC+G,MAAD,CALjB;AAMTS,MAAAA,oBAAoB,EAAEV,OANb;AAOTW,MAAAA,WAAW,EAAEO,WAPJ;AAQTN,MAAAA,WAAW,EAAE1H,WAAW,CAAC8F,KAAD,CARf;AAST6B,MAAAA,kBAAkB,EAAEb,OATX;AAUTc,MAAAA,SAAS,EAAE9B,KAVF;AAWTM,MAAAA,MAAM,EAAEE,MAAM,CAACF,MAAD,CAXL;AAYTyB,MAAAA,KAAK,EAAE,KAZE;AAaTC,MAAAA,MAAM,EAAE;AAbC,KAAX;;AAgBA,QAAI,CAAC,KAAKvB,gBAAL,EAAL,EAA8B;AAC5B;AACD;;AAEDf,IAAAA,KAAK,CAACI,GAAN,CAAU,WAAV,EAAuBD,EAAvB;AACAH,IAAAA,KAAK,CAACI,GAAN,CAAU,eAAV,EAA2B,UAA3B;AACD;;AAEDqC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,OAAF;AAAW1C,MAAAA;AAAX,QAAqB,KAAKJ,KAAhC;AAEA,UAAM+C,eAAe,GAAG3C,KAAK,CAACS,GAAN,CAAU,iBAAV,CAAxB;AACA,UAAMmC,WAAW,GAAG5C,KAAK,CAACS,GAAN,CAAU,aAAV,CAApB;AACA,UAAME,aAA0C,GAAGX,KAAK,CAACS,GAAN,CACjD,eADiD,CAAnD,CALO,CASP;;AACA,UAAMoC,iBAAiB,GAAG7C,KAAK,CAACS,GAAN,CAAU,2BAAV,CAA1B;AACA,UAAMS,cAAuC,GAAGlB,KAAK,CAACS,GAAN,CAC9C,wBAD8C,CAAhD,CAXO,CAeP;;AACA,UAAMY,gBAAgB,GAAGrB,KAAK,CAACS,GAAN,CAAU,kBAAV,CAAzB,CAhBO,CAiBP;;AACA,UAAMU,OAAO,GAAGnB,KAAK,CAACS,GAAN,CAAUlG,UAAU,CAACoG,aAAD,CAAV,GAA4B,SAAtC,CAAhB;AACA,UAAMC,MAAM,GAAGZ,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAf,CAnBO,CAoBP;;AACA,UAAMqC,KAAK,GAAG9C,KAAK,CAACS,GAAN,CAAU,yBAAV,CAAd;AAEA,UAAMsC,SAAS,GAAG/C,KAAK,CAACS,GAAN,CAAU,8BAAV,CAAlB;AACA,UAAMuC,YAAY,GAAGlC,MAAM,CAACF,MAAD,CAAN,IAAkBE,MAAM,CAACiC,SAAD,CAA7C;AACA,UAAME,mBAAmB,GAAGjD,KAAK,CAACS,GAAN,CAC1B,wCAD0B,CAA5B;AAIA,UAAMO,mBAAmB,GAAGhB,KAAK,CAACS,GAAN,CAAU,0BAAV,CAA5B;AACA,UAAMyC,YAAY,GAAGtC,MAAM,IAAIvG,cAAc,CAACsG,aAAD,CAA7C;AACA,UAAMwC,cAAc,GAClBrC,MAAM,CAACF,MAAD,CAAN,IAAkBvG,cAAc,CAACsG,aAAD,CAAhC,IACAC,MAAM,IAAIE,MAAM,CAACK,OAAD,CADhB,IAEAH,mBAHF;AAIA,UAAMoC,eAAe,GAAGpD,KAAK,CAACS,GAAN,CAAU,yBAAV,CAAxB;AACA,UAAM4C,oBAAoB,GAAGrD,KAAK,CAACS,GAAN,CAAU,8BAAV,CAA7B;AACA,UAAM2B,SAAS,GAAGS,iBAAiB,GAAGlC,aAAH,GAAmBO,cAAtD,CArCO,CAsCP;;AAEA,UAAMoC,QAAQ,GAAGxC,MAAM,CAACd,KAAK,CAACS,GAAN,CAAW,GAAEE,aAAc,KAA3B,IAAmCC,MAApC,CAAN,CAAkD2C,OAAlD,CACf,CADe,CAAjB;AAIA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEb,OAAO,CAACrH,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA8BI;AAAK,MAAA,SAAS,EAAEqH,OAAO,CAACtF,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEsF,OAAO,CAAC1F,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAE7C,UAAU,CACnBuI,OAAO,CAAC5D,gBADW,EAEnB4D,OAAO,CAAChE,MAFW,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,MAAM,EAAEnE,UAAU,CAACoG,aAAD,CADpB;AAEE,MAAA,SAAS,EAAE+B,OAAO,CAAC1D,cAFrB;AAGE,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAHT;AAIE,MAAA,gBAAgB,EAAGwE,CAAD,IAAe;AAC/B,cAAMlD,KAAK,GAAGkD,CAAC,CAACC,WAAF,EAAd;AACAzD,QAAAA,KAAK,CAACI,GAAN,CAAU,wBAAV,EAAqC,IAAGE,KAAM,EAA9C;AACAN,QAAAA,KAAK,CAACI,GAAN,CAAU,eAAV,EAA2BE,KAA3B;AACAlG,QAAAA,aAAa;AACd,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,eAoBE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AACE,MAAA,MAAM,EAAEG,UAAU,CAACoG,aAAD,CADpB;AAEE,MAAA,SAAS,EAAE+B,OAAO,CAAC1D,cAFrB;AAGE,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAHT;AAIE,MAAA,gBAAgB,EAAGwE,CAAD,IAAe;AAC/B,cAAMlD,KAAK,GAAGkD,CAAC,CAACC,WAAF,EAAd;AACAzD,QAAAA,KAAK,CAACI,GAAN,CAAU,wBAAV,EAAqC,IAAGE,KAAM,EAA9C;AACAN,QAAAA,KAAK,CAACI,GAAN,CAAU,eAAV,EAA2BE,KAA3B;AACAlG,QAAAA,aAAa;AACd,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApBF,CADF,eAoCE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApCF,eAsCE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGyI,iBAAiB,KAAK,CAAtB,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEH,OAAO,CAACvD,eAAzB;AAA0C,MAAA,SAAS,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AACE,MAAA,MAAM,EAAE5E,UAAU,CAACoG,aAAD,CADpB;AAEE,MAAA,WAAW,EAAE,UAAUpG,UAAU,CAACoG,aAAD,CAFnC;AAGE,MAAA,QAAQ,EAAE2C,QAHZ;AAIE,MAAA,KAAK,EAAE1C,MAJT;AAKE,MAAA,QAAQ,EAAG8C,KAAD,IAAgB;AACxB,cAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,IAAe,EAA7B;AACA3D,QAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,EAA4BwD,MAAM,CAACD,KAAD,CAAlC;AACAvJ,QAAAA,aAAa;AACd,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYGgJ,eAAe,iBACd,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEV,OAAO,CAACpD,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACyB,GADzB,EAEGjF,cAAc,CAACsG,aAAD,CAFjB,EAEkC,GAFlC,EAGGpG,UAAU,CAACoG,aAAD,CAHb,CAbJ,CADF,eAqBE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAE+B,OAAO,CAACxD,gBADrB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,OAAO,EAAC,eAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG3E,UAAU,CAACoG,aAAD,CADb,aALF,eAQE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,MAAM;AACbX,QAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,EAA4Be,OAA5B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGA,OALH,OAKa5G,UAAU,CAACoG,aAAD,CALvB,CADF,CARF,CArBF,eAwCE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAExG,UAAU,CACnBuI,OAAO,CAAC5D,gBADW,EAEnB4D,OAAO,CAAChE,MAFW,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPF,eAUE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,MAAM,EAAEnE,UAAU,CAACoG,aAAD,CADpB;AAEE,MAAA,SAAS,EAAE+B,OAAO,CAAC1D,cAFrB;AAGE,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAHT;AAIE,MAAA,gBAAgB,EAAGwE,CAAD,IAAe;AAC/B,cAAMlD,KAAK,GAAGkD,CAAC,CAACC,WAAF,EAAd;AACAzD,QAAAA,KAAK,CAACI,GAAN,CACE,wBADF,EAEG,IAAGE,KAAM,EAFZ;AAIAN,QAAAA,KAAK,CAACI,GAAN,CAAU,eAAV,EAA2BE,KAA3B;AACAlG,QAAAA,aAAa;AACd,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CAxCF,eAoEE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAEsI,OAAO,CAACjE,gBADrB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAEiE,OAAO,CAAChE,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,SAAS,EAAC,KADZ;AAEE,MAAA,KAAK,EAAE2C,gBAFT;AAGE,MAAA,KAAK,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEwC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGpJ,iBAAiB,CAAC4G,gBAAD,CAFpB,CALF,CADF,CAJF,CALF,eAsBE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAEqB,OAAO,CAAChE,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAIE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,SAAS,EAAEgE,OAAO,CAACtD,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAE9E,aAAa,CAAC8H,SAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGU,KAAK,IAAI,EAFZ,OAEiBvI,UAAU,CAAC6H,SAAD,CAF3B,CAJF,CAtBF,CApEF,CAFJ,EAyGGS,iBAAiB,KAAK,CAAtB,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEH,OAAO,CAACvD,eAAzB;AAA0C,MAAA,SAAS,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AACE,MAAA,MAAM,EAAE5E,UAAU,CAAC2G,cAAD,CADpB;AAEE,MAAA,KAAK,EAAEN,MAFT;AAGE,MAAA,WAAW,EAAE,UAAUrG,UAAU,CAAC2G,cAAD,CAHnC;AAIE,MAAA,QAAQ,EAAEoC,QAJZ;AAKE,MAAA,QAAQ,EAAGI,KAAD,IAAgB;AACxB,cAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,IAAe,EAA7B;AACA3D,QAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,EAA4BwD,MAAM,CAACD,KAAD,CAAlC;AACAvJ,QAAAA,aAAa;AACd,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYGgJ,eAAe,iBACd,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEV,OAAO,CAACpD,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAbJ,CADF,eAmBE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAEoD,OAAO,CAACxD,gBADrB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,OAAO,EAAC,eAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG3E,UAAU,CAAC2G,cAAD,CADb,aALF,eAQE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,MAAM;AACblB,QAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,EAA4Be,OAA5B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGA,OALH,OAKa5G,UAAU,CAAC2G,cAAD,CALvB,CADF,CARF,CAnBF,eAqCE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAE/G,UAAU,CACnBuI,OAAO,CAAC5D,gBADW,EAEnB4D,OAAO,CAAChE,MAFW,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPF,eAUE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,OAAO,EAAEhE,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,MAAM,EAAEH,UAAU,CAAC2G,cAAD,CADpB;AAEE,MAAA,SAAS,EAAEwB,OAAO,CAAC1D,cAFrB;AAGE,MAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAHT,CAIE;AACA;AACA;AACA;AAPF;AAQE,MAAA,gBAAgB,EAAGwE,CAAD,IAAe;AAC/B,cAAMlD,KAAK,GAAGkD,CAAC,CAACC,WAAF,EAAd;AACAzD,QAAAA,KAAK,CAACI,GAAN,CAAU,wBAAV,EAAoCE,KAApC;AACAN,QAAAA,KAAK,CAACI,GAAN,CACE,eADF,EAEEE,KAAK,CAACwD,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAFF;AAIA1J,QAAAA,aAAa;AACd,OAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CArCF,eAoEE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAED,UAAU,CACnBuI,OAAO,CAAC5D,gBADW,EAEnB4D,OAAO,CAAChE,MAFW,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAEgE,OAAO,CAAChE,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,SAAS,EAAC,KADZ;AAEE,MAAA,KAAK,EAAE2C,gBAFT;AAGE,MAAA,KAAK,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEwC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGpJ,iBAAiB,CAAC4G,gBAAD,CAFpB,CALF,CADF,CAJF,CAPF,CApEF,eAgJE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAEqB,OAAO,CAACjE,gBADrB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAEiE,OAAO,CAAChE,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAIE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,SAAS,EAAEgE,OAAO,CAACtD,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAE9E,aAAa,CAAC8H,SAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGU,KAAK,IAAI,EAFZ,OAEiBvI,UAAU,CAAC6H,SAAD,CAF3B,CAJF,CALF,CAhJF,CA1GJ,CADF,CAtCF,eAqTE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAC,QAFV;AAGE,MAAA,SAAS,EAAEM,OAAO,CAACpG,qBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGuG,iBAAiB,KAAK,CAAtB,iBACC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAE,CAACC,KAAD,IAAUiB,UAAU,CAACjB,KAAD,CAAV,GAAoB,SAD1C;AAEE,MAAA,OAAO,EAAE,WAFX;AAGE,MAAA,aAAa,MAHf;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,IAAI,EAAC,OALP;AAME,MAAA,SAAS,MANX;AAOE,MAAA,SAAS,EAAE3I,UAAU,CACnBuI,OAAO,CAAC5G,MADW,EAEnB4G,OAAO,CAACsB,YAFW,CAPvB;AAWE,MAAA,OAAO,EAAE,KAAK5C,UAAL,CAAgB6C,IAAhB,CAAqB,IAArB,CAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CANJ,EAwBGpB,iBAAiB,KAAK,CAAtB,iBACC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAE,CAACC,KAAD,IAAUiB,UAAU,CAACjB,KAAD,CAAV,GAAoB,SAD1C;AAEE,MAAA,OAAO,EAAE,WAFX;AAGE,MAAA,aAAa,MAHf;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,SAAS,MALX;AAME,MAAA,IAAI,EAAC,OANP;AAOE,MAAA,SAAS,EAAE3I,UAAU,CACnBuI,OAAO,CAAC5G,MADW,EAEnB4G,OAAO,CAACsB,YAFW,CAPvB;AAWE,MAAA,OAAO,EAAE,KAAKzB,WAAL,CAAiB0B,IAAjB,CAAsB,IAAtB,CAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAzBJ,CArTF,CADF,CA9BJ,CADF,CADF;AAwYD;;AAtkBmD;;AAykBtD,eAAe/J,UAAU,CAACiB,MAAD,CAAV,CAAmBlB,SAAS,CAACwF,kBAAD,CAA5B,CAAf","sourcesContent":["import React from \"react\";\nimport { withStore } from \"@spyna/react-store\";\nimport { Styles, withStyles } from \"@material-ui/styles\";\nimport classNames from \"classnames\";\nimport AddressValidator from \"wallet-address-validator\";\nimport {\n  addTx,\n  updateTx,\n  removeTx,\n  gatherFeeData,\n  MIN_TX_AMOUNTS,\n} from \"../utils/txUtils\";\nimport {\n  MINI_ICON_MAP,\n  SYMBOL_MAP,\n  NETWORK_MAP,\n  NAME_MAP,\n  abbreviateAddress,\n  updateBalance,\n} from \"../utils/walletUtils\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CurrencySelect from \"../components/CurrencySelect\";\nimport BigCurrencyInput from \"../components/BigCurrencyInput\";\nimport CurrencyInput from \"../components/CurrencyInput\";\nimport ActionLink from \"../components/ActionLink\";\nimport DarkTooltip from \"../components/DarkTooltip\";\n\nimport theme from \"../theme/theme\";\n\nimport WalletIcon from \"../assets/wallet-icon.svg\";\n\nconst styles: Styles<typeof theme, any> = (theme) => ({\n  container: {\n    background: \"#fff\",\n    border: \"1px solid \" + theme.palette.divider,\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    maxWidth: 600,\n    width: \"100%\",\n    margin: \"0px auto \" + theme.spacing(1) + \"px\",\n\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\",\n    },\n  },\n  transferActionTabs: {\n    margin: \"0px auto\",\n    // marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\",\n    },\n    \"& button\": {\n      width: \"50%\",\n    },\n  },\n  depositAddressContainer: {},\n  depositAddress: {\n    width: \"100%\",\n  },\n  actionButtonContainer: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    textAlign: \"center\",\n    \"& button\": {\n      \"&.Mui-disabled\": {},\n      margin: \"0px auto\",\n      fontSize: 12,\n      minWidth: 175,\n      padding: theme.spacing(1),\n    },\n  },\n  amountField: {\n    width: \"100%\",\n  },\n  depositButton: {},\n  withdrawButton: {},\n  actions: {\n    paddingTop: theme.spacing(1),\n    padding: theme.spacing(3),\n  },\n  transactionsContainer: {\n    padding: theme.spacing(3),\n    paddingTop: theme.spacing(0),\n    marginTop: theme.spacing(2),\n    borderTop: \"1px solid #EBEBEB\",\n  },\n  actionsContainer: {\n    borderRadius: theme.shape.borderRadius,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n  },\n  destChooser: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& div.MuiToggleButtonGroup-root\": {\n      width: \"100%\",\n    },\n    \"& button\": {\n      width: \"50%\",\n    },\n  },\n  fees: {\n    width: \"100%\",\n    border: \"1px solid \" + theme.palette.divider,\n    fontSize: 12,\n    padding: theme.spacing(1),\n    paddingBottom: 0,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& span\": {\n      marginBottom: theme.spacing(1),\n    },\n  },\n  icon: {\n    width: 16,\n    height: 16,\n    marginRight: theme.spacing(0.75),\n  },\n  toggle: {\n    \"& button\": {\n      minHeight: \"auto\",\n      border: \"1px solid transparent\",\n      borderBottom: \"1px solid \" + theme.palette.divider,\n      height: 56,\n      backgroundColor: \"#fff\",\n      \"&:first-child\": {\n        borderRight: \"1px solid \" + theme.palette.divider,\n      },\n      \"&.MuiToggleButton-root\": {},\n      \"&.Mui-selected\": {\n        borderBottom: \"1px solid transparent\",\n        color: theme.palette.primary.main,\n        backgroundColor: \"#transparent !important\",\n      },\n      \"& .MuiToggleButton-label\": {\n        fontSize: 16,\n      },\n      \"& span\": {\n        textTransform: \"capitalize !important\",\n      },\n    },\n  },\n  title: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n  },\n  optionsContainer: {\n    border: \"1px solid #EDEFF3\",\n    borderBottom: \"none\",\n    borderRadius: 4,\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n  },\n  option: {\n    borderBottom: \"1px solid #EDEFF3\",\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    minHeight: 60,\n    fontSize: 14,\n    \"& img\": {\n      height: \"auto\",\n      width: 24,\n      marginRight: theme.spacing(1),\n    },\n    \"& .MuiGrid-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  standaloneOption: {\n    border: \"1px solid #DBE0E8\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(2),\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n  },\n  addressInput: {\n    width: \"100%\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n  currencySelect: {\n    marginLeft: theme.spacing(-1),\n    width: \"calc(100% + 8px)\",\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n  },\n  amountContainer: {\n    paddingTop: theme.spacing(5),\n    paddingBottom: theme.spacing(5),\n  },\n  totalCell: {\n    wordBreak: \"break-word\",\n  },\n  amountError: {\n    textAlign: \"center\",\n    color: \"#FF4545\",\n    fontSize: 12,\n    margin: \"0px auto\",\n  },\n  disclosure: {\n    width: \"100%\",\n    maxWidth: 370,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"center\",\n    boxShadow: \"0px 1px 2px rgba(0, 27, 58, 0.05)\",\n    padding: theme.spacing(2),\n    color: theme.palette.primary.main,\n    border: \"1px solid \" + theme.palette.primary.main,\n    fontSize: 12,\n    lineHeight: \"17px\",\n    borderRadius: 4,\n    marginBottom: theme.spacing(3),\n    \"& a\": {\n      color: \"inherit\",\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      maxWidth: \"100%\",\n    },\n  },\n});\n\nclass TransferContainer2 extends React.Component<any> {\n  burnInputRef = React.createRef();\n  constructor(props: any) {\n    super(props);\n    this.state = props.store.getState();\n  }\n\n  showDepositModal(tx: any) {\n    const { store } = this.props;\n    store.set(\"showDepositModal\", true);\n    store.set(\"depositModalTx\", tx);\n  }\n\n  async gatherFeeData() {}\n\n  getBalance(asset: string) {\n    console.log(\"getBalance\");\n    const { store } = this.props;\n    console.log(store.get(\"ethBalance\"));\n    return store.get(`${asset}Balance`);\n  }\n\n  validateDeposit() {\n    const { store } = this.props;\n    const selectedAsset = store.get(\"selectedAsset\");\n    const amount = store.get(\"convert.amount\");\n    const amountValid =\n      Number(amount) >=\n      MIN_TX_AMOUNTS[selectedAsset as keyof typeof MIN_TX_AMOUNTS];\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n      return false;\n    } else {\n      store.set(\"convert.showAmountError\", false);\n      return true;\n    }\n  }\n\n  validateWithdraw() {\n    const { store } = this.props;\n    const amount = store.get(\"convert.amount\");\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const showAddressError = !convertAddressValid;\n    const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n      \"selectedAsset\"\n    );\n    const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n      \"convert.selectedFormat\"\n    );\n    const balance = store.get(SYMBOL_MAP[selectedFormat] + \"Balance\");\n\n    const amountValid =\n      Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n      amount <= Number(balance);\n\n    if (showAddressError) {\n      store.set(\"convert.showDestinationError\", true);\n    } else {\n      store.set(\"convert.showDestinationError\", false);\n    }\n\n    if (!amount || !amountValid) {\n      store.set(\"convert.showAmountError\", true);\n    } else {\n      store.set(\"convert.showAmountError\", false);\n    }\n\n    if (showAddressError || !amount || !amountValid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async newDeposit() {\n    const { store } = this.props;\n\n    const amount = store.get(\"convert.amount\");\n    const localWeb3Address = store.get(\"localWeb3Address\");\n    const network = store.get(\"selectedNetwork\");\n    const format: keyof typeof NETWORK_MAP = store.get(\n      \"convert.selectedFormat\"\n    );\n    const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      // awaiting: `${asset}-init`,\n      sourceAsset: asset,\n      sourceNetwork: NETWORK_MAP[asset],\n      sourceNetworkVersion: network,\n      destAddress: localWeb3Address,\n      destNetwork: NETWORK_MAP[format],\n      destNetworkVersion: network,\n      destAsset: format,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\",\n    };\n\n    if (!this.validateDeposit()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"deposit\");\n  }\n\n  async newWithdraw() {\n    const { store } = this.props;\n\n    const amount = store.get(\"convert.amount\");\n    const destination = store.get(\"convert.destination\");\n    const network = store.get(\"selectedNetwork\");\n    const format: keyof typeof NETWORK_MAP = store.get(\n      \"convert.selectedFormat\"\n    );\n    const asset: keyof typeof NETWORK_MAP = store.get(\"selectedAsset\");\n\n    const tx = {\n      id: \"tx-\" + Math.floor(Math.random() * 10 ** 16),\n      type: \"convert\",\n      instant: false,\n      sourceAsset: format,\n      sourceNetwork: NETWORK_MAP[format],\n      sourceNetworkVersion: network,\n      destAddress: destination,\n      destNetwork: NETWORK_MAP[asset],\n      destNetworkVersion: network,\n      destAsset: asset,\n      amount: Number(amount),\n      error: false,\n      txHash: \"\",\n    };\n\n    if (!this.validateWithdraw()) {\n      return;\n    }\n\n    store.set(\"confirmTx\", tx);\n    store.set(\"confirmAction\", \"withdraw\");\n  }\n\n  render() {\n    const { classes, store } = this.props;\n\n    const selectedNetwork = store.get(\"selectedNetwork\");\n    const selectedTab = store.get(\"selectedTab\");\n    const selectedAsset: keyof typeof MIN_TX_AMOUNTS = store.get(\n      \"selectedAsset\"\n    );\n\n    // 0 = mint, 1 = release\n    const selectedDirection = store.get(\"convert.selectedDirection\");\n    const selectedFormat: keyof typeof SYMBOL_MAP = store.get(\n      \"convert.selectedFormat\"\n    );\n\n    // console.log(selectedFormat);\n    const localWeb3Address = store.get(\"localWeb3Address\");\n    // console.log(localWeb3Address);\n    const balance = store.get(SYMBOL_MAP[selectedAsset] + \"Balance\");\n    const amount = store.get(\"convert.amount\");\n    // console.log(amount);\n    const total = store.get(\"convert.conversionTotal\");\n\n    const allowance = store.get(\"convert.adapterWbtcAllowance\");\n    const hasAllowance = Number(amount) <= Number(allowance);\n    const allowanceRequesting = store.get(\n      \"convert.adapterWbtcAllowanceRequesting\"\n    );\n\n    const convertAddressValid = store.get(\"convert.destinationValid\");\n    const canConvertTo = amount >= MIN_TX_AMOUNTS[selectedAsset];\n    const canConvertFrom =\n      Number(amount) >= MIN_TX_AMOUNTS[selectedAsset] &&\n      amount <= Number(balance) &&\n      convertAddressValid;\n    const showAmountError = store.get(\"convert.showAmountError\");\n    const showDestinationError = store.get(\"convert.showDestinationError\");\n    const destAsset = selectedDirection ? selectedAsset : selectedFormat;\n    // console.log(destAsset);\n\n    const usdValue = Number(store.get(`${selectedAsset}usd`) * amount).toFixed(\n      2\n    );\n\n    return (\n      <React.Fragment>\n        <div className={classes.container}>\n          {/* {\n            <Grid container className={classes.transferActionTabs}>\n              <ToggleButtonGroup\n                size=\"small\"\n                className={classes.toggle}\n                value={String(selectedDirection)}\n                exclusive\n                onChange={(event, newValue) => {\n                  if (newValue) {\n                    store.set(\"convert.selectedDirection\", Number(newValue));\n                    store.set(\"convert.amount\", \"\");\n                    store.set(\"convert.networkFee\", \"\");\n                    store.set(\"convert.conversionTotal\", \"\");\n                    store.set(\"convert.destination\", \"\");\n                    store.set(\"convert.showAmountError\", false);\n                    store.set(\"convert.showDestinationError\", false);\n                  }\n                }}\n              >\n                <ToggleButton disableRipple={true} key={0} value={\"0\"}>\n                  Mint\n                </ToggleButton>\n                <ToggleButton disableRipple={true} key={1} value={\"1\"}>\n                  Release\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          } */}\n          {\n            <div className={classes.actionsContainer}>\n              <Grid className={classes.actions}>\n                <Grid\n                  container\n                  className={classNames(\n                    classes.standaloneOption,\n                    classes.option\n                  )}\n                >\n                  <Grid item xs={4}>\n                    <CurrencySelect\n                      active={SYMBOL_MAP[selectedAsset]}\n                      className={classes.currencySelect}\n                      items={[\"ETH\", \"ELA\", \"USDT\"]}\n                      onCurrencyChange={(v: string) => {\n                        const asset = v.toLowerCase();\n                        store.set(\"convert.selectedFormat\", `w${asset}`);\n                        store.set(\"selectedAsset\", asset);\n                        gatherFeeData();\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={8}>\n                    <CurrencyInput\n                      active={SYMBOL_MAP[selectedAsset]}\n                      className={classes.currencySelect}\n                      items={[\"ETH\", \"ELA\", \"USDT\"]}\n                      onCurrencyChange={(v: string) => {\n                        const asset = v.toLowerCase();\n                        store.set(\"convert.selectedFormat\", `w${asset}`);\n                        store.set(\"selectedAsset\", asset);\n                        gatherFeeData();\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n\n                <Grid container>Test</Grid>\n\n                <Grid container justify=\"center\">\n                  <Grid item xs={12}>\n                    {selectedDirection === 0 && (\n                      <React.Fragment>\n                        <Grid className={classes.amountContainer} container>\n                          <BigCurrencyInput\n                            symbol={SYMBOL_MAP[selectedAsset]}\n                            placeholder={\"0.00 \" + SYMBOL_MAP[selectedAsset]}\n                            usdValue={usdValue}\n                            value={amount}\n                            onChange={(event: any) => {\n                              const value = event.value || \"\";\n                              store.set(\"convert.amount\", String(value));\n                              gatherFeeData();\n                            }}\n                          />\n                          {showAmountError && (\n                            <Typography className={classes.amountError}>\n                              Minimum mint amount is{\" \"}\n                              {MIN_TX_AMOUNTS[selectedAsset]}{\" \"}\n                              {SYMBOL_MAP[selectedAsset]}\n                            </Typography>\n                          )}\n                        </Grid>\n                        <Grid\n                          className={classes.balanceContainer}\n                          container\n                          justify=\"space-between\"\n                        >\n                          <Typography variant=\"caption\">\n                            {SYMBOL_MAP[selectedAsset]} Balance\n                          </Typography>\n                          <Typography>\n                            <ActionLink\n                              onClick={() => {\n                                store.set(\"convert.amount\", balance);\n                              }}\n                            >\n                              {balance} {SYMBOL_MAP[selectedAsset]}\n                            </ActionLink>\n                          </Typography>\n                        </Grid>\n\n                        <Grid\n                          container\n                          className={classNames(\n                            classes.standaloneOption,\n                            classes.option\n                          )}\n                        >\n                          <Grid item xs={6}>\n                            Asset\n                          </Grid>\n                          <Grid item xs={6}>\n                            <CurrencySelect\n                              active={SYMBOL_MAP[selectedAsset]}\n                              className={classes.currencySelect}\n                              items={[\"ETH\", \"ELA\", \"USDT\"]}\n                              onCurrencyChange={(v: string) => {\n                                const asset = v.toLowerCase();\n                                store.set(\n                                  \"convert.selectedFormat\",\n                                  `w${asset}`\n                                );\n                                store.set(\"selectedAsset\", asset);\n                                gatherFeeData();\n                              }}\n                            />\n                          </Grid>\n                        </Grid>\n\n                        <Grid\n                          className={classes.optionsContainer}\n                          container\n                          direction=\"column\"\n                        >\n                          <Grid container className={classes.option}>\n                            <Grid item xs={6}>\n                              Destination\n                            </Grid>\n                            <Grid item xs={6}>\n                              <DarkTooltip\n                                placement=\"top\"\n                                title={localWeb3Address}\n                                arrow\n                              >\n                                <div>\n                                  <img src={WalletIcon} />\n                                  {abbreviateAddress(localWeb3Address)}\n                                </div>\n                              </DarkTooltip>\n                            </Grid>\n                          </Grid>\n                          <Grid container className={classes.option}>\n                            <Grid item xs={6}>\n                              You will receive\n                            </Grid>\n                            <Grid item xs={6} className={classes.totalCell}>\n                              <img src={MINI_ICON_MAP[destAsset]} />\n                              {total || \"\"} {SYMBOL_MAP[destAsset]}\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </React.Fragment>\n                    )}\n\n                    {selectedDirection === 1 && (\n                      <React.Fragment>\n                        <Grid className={classes.amountContainer} container>\n                          <BigCurrencyInput\n                            symbol={SYMBOL_MAP[selectedFormat]}\n                            value={amount}\n                            placeholder={\"0.00 \" + SYMBOL_MAP[selectedFormat]}\n                            usdValue={usdValue}\n                            onChange={(event: any) => {\n                              const value = event.value || \"\";\n                              store.set(\"convert.amount\", String(value));\n                              gatherFeeData();\n                            }}\n                          />\n                          {showAmountError && (\n                            <Typography className={classes.amountError}>\n                              Please enter a valid amount to release\n                            </Typography>\n                          )}\n                        </Grid>\n                        <Grid\n                          className={classes.balanceContainer}\n                          container\n                          justify=\"space-between\"\n                        >\n                          <Typography variant=\"caption\">\n                            {SYMBOL_MAP[selectedFormat]} Balance\n                          </Typography>\n                          <Typography>\n                            <ActionLink\n                              onClick={() => {\n                                store.set(\"convert.amount\", balance);\n                              }}\n                            >\n                              {balance} {SYMBOL_MAP[selectedFormat]}\n                            </ActionLink>\n                          </Typography>\n                        </Grid>\n                        <Grid\n                          container\n                          className={classNames(\n                            classes.standaloneOption,\n                            classes.option\n                          )}\n                        >\n                          <Grid item xs={6}>\n                            Asset\n                          </Grid>\n                          <Grid item xs={6} onClick={updateBalance}>\n                            <CurrencySelect\n                              active={SYMBOL_MAP[selectedFormat]}\n                              className={classes.currencySelect}\n                              items={[\"wETH\", \"wELA\", \"wUSDT\"]}\n                              // renBTCBalance={store.get(\"renBTCBalance\")}\n                              // renZECBalance={store.get(\"renZECBalance\")}\n                              // renBCHBalance={store.get(\"renBCHBalance\")}\n                              // ETHBalance={store.get(\"ethbal\")}\n                              onCurrencyChange={(v: string) => {\n                                const asset = v.toLowerCase();\n                                store.set(\"convert.selectedFormat\", asset);\n                                store.set(\n                                  \"selectedAsset\",\n                                  asset.replace(\"w\", \"\")\n                                );\n                                gatherFeeData();\n                              }}\n                            />\n                          </Grid>\n                        </Grid>\n                        <Grid\n                          container\n                          className={classNames(\n                            classes.standaloneOption,\n                            classes.option\n                          )}\n                        >\n                          <Grid container className={classes.option}>\n                            <Grid item xs={6}>\n                              Destination\n                            </Grid>\n                            <Grid item xs={6}>\n                              <DarkTooltip\n                                placement=\"top\"\n                                title={localWeb3Address}\n                                arrow\n                              >\n                                <div>\n                                  <img src={WalletIcon} />\n                                  {abbreviateAddress(localWeb3Address)}\n                                </div>\n                              </DarkTooltip>\n                            </Grid>\n                          </Grid>\n                          {/* <Grid xs={12}>\n                                                        <div className={classes.addressInput}>\n                                                            <TextField\n                                                                label=\"Destination\"\n                                                                placeholder={`Enter ${NAME_MAP[selectedAsset]} Address`}\n                                                                size=\"medium\"\n                                                                fullWidth={true}\n                                                                error={showDestinationError}\n                                                                helperText={\n                                                                    showDestinationError\n                                                                        ? `Please enter a valid ${NAME_MAP[selectedAsset]} address`\n                                                                        : \"\"\n                                                                }\n                                                                InputProps={{\n                                                                    disableUnderline: true,\n                                                                }}\n                                                                InputLabelProps={{\n                                                                    shrink: true,\n                                                                }}\n                                                                inputProps={{\n                                                                    onFocus: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            true\n                                                                        );\n                                                                    },\n                                                                    onBlur: () => {\n                                                                        store.set(\n                                                                            \"convert.destinationInputFocused\",\n                                                                            false\n                                                                        );\n                                                                    },\n                                                                }}\n                                                                onChange={(event) => {\n                                                                    const value = event.target.value;\n                                                                    store.set(\"convert.destination\", value);\n                                                                    store.set(\n                                                                        \"convert.destinationValid\",\n                                                                        AddressValidator.validate(\n                                                                            value,\n                                                                            selectedAsset.toUpperCase(),\n                                                                            selectedNetwork === \"testnet\"\n                                                                                ? \"testnet\"\n                                                                                : \"prod\"\n                                                                        )\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </Grid> */}\n                        </Grid>\n\n                        <Grid\n                          className={classes.optionsContainer}\n                          container\n                          direction=\"column\"\n                        >\n                          <Grid container className={classes.option}>\n                            <Grid item xs={6}>\n                              You will receive\n                            </Grid>\n                            <Grid item xs={6} className={classes.totalCell}>\n                              <img src={MINI_ICON_MAP[destAsset]} />\n                              {total || \"\"} {SYMBOL_MAP[destAsset]}\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </React.Fragment>\n                    )}\n                  </Grid>\n                </Grid>\n\n                <Grid\n                  container\n                  justify=\"center\"\n                  className={classes.actionButtonContainer}\n                >\n                  {selectedDirection === 0 && (\n                    <Grid item xs={12}>\n                      <Button\n                        disabled={!total || parseFloat(total) < 0.0000001}\n                        variant={\"contained\"}\n                        disableRipple\n                        color=\"primary\"\n                        size=\"large\"\n                        fullWidth\n                        className={classNames(\n                          classes.margin,\n                          classes.actionButton\n                        )}\n                        onClick={this.newDeposit.bind(this)}\n                      >\n                        Next\n                      </Button>\n                    </Grid>\n                  )}\n                  {selectedDirection === 1 && (\n                    <Grid item xs={12}>\n                      <Button\n                        disabled={!total || parseFloat(total) < 0.0000001}\n                        variant={\"contained\"}\n                        disableRipple\n                        color=\"primary\"\n                        fullWidth\n                        size=\"large\"\n                        className={classNames(\n                          classes.margin,\n                          classes.actionButton\n                        )}\n                        onClick={this.newWithdraw.bind(this)}\n                      >\n                        Next\n                      </Button>\n                    </Grid>\n                  )}\n                </Grid>\n              </Grid>\n            </div>\n          }\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(withStore(TransferContainer2));\n"]},"metadata":{},"sourceType":"module"}