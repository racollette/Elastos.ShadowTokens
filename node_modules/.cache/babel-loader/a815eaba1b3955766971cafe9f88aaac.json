{"ast":null,"code":"var typeforce = require('typeforce');\n\nvar UINT31_MAX = Math.pow(2, 31) - 1;\n\nfunction UInt31(value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX;\n}\n\nfunction BIP32Path(value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/);\n}\n\nBIP32Path.toJSON = function () {\n  return 'BIP32 derivation path';\n};\n\nvar SATOSHI_MAX = 21 * 1e14;\n\nfunction Satoshi(value) {\n  return typeforce.UInt53(value) && value <= SATOSHI_MAX;\n} // external dependent types\n\n\nvar BigInt = typeforce.quacksLike('BigInteger');\nvar ECPoint = typeforce.quacksLike('Point'); // exposed, external API\n\nvar ECSignature = typeforce.compile({\n  r: BigInt,\n  s: BigInt\n});\nvar networkVersion = typeforce.oneOf(typeforce.UInt8, typeforce.UInt16);\nvar Network = typeforce.compile({\n  messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  },\n  pubKeyHash: networkVersion,\n  scriptHash: networkVersion,\n  wif: typeforce.UInt8\n}); // extend typeforce types with ours\n\nvar types = {\n  BigInt: BigInt,\n  BIP32Path: BIP32Path,\n  Buffer256bit: typeforce.BufferN(32),\n  ECPoint: ECPoint,\n  ECSignature: ECSignature,\n  Hash160bit: typeforce.BufferN(20),\n  Hash256bit: typeforce.BufferN(32),\n  Network: Network,\n  Satoshi: Satoshi,\n  UInt31: UInt31,\n  NetworkVersion: networkVersion\n};\n\nfor (var typeName in typeforce) {\n  types[typeName] = typeforce[typeName];\n}\n\nmodule.exports = types;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/bitgo-utxo-lib/src/types.js"],"names":["typeforce","require","UINT31_MAX","Math","pow","UInt31","value","UInt32","BIP32Path","String","match","toJSON","SATOSHI_MAX","Satoshi","UInt53","BigInt","quacksLike","ECPoint","ECSignature","compile","r","s","networkVersion","oneOf","UInt8","UInt16","Network","messagePrefix","Buffer","bip32","public","private","pubKeyHash","scriptHash","wif","types","Buffer256bit","BufferN","Hash160bit","Hash256bit","NetworkVersion","typeName","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAnC;;AACA,SAASC,MAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAON,SAAS,CAACO,MAAV,CAAiBD,KAAjB,KAA2BA,KAAK,IAAIJ,UAA3C;AACD;;AAED,SAASM,SAAT,CAAoBF,KAApB,EAA2B;AACzB,SAAON,SAAS,CAACS,MAAV,CAAiBH,KAAjB,KAA2BA,KAAK,CAACI,KAAN,CAAY,yBAAZ,CAAlC;AACD;;AACDF,SAAS,CAACG,MAAV,GAAmB,YAAY;AAAE,SAAO,uBAAP;AAAgC,CAAjE;;AAEA,IAAIC,WAAW,GAAG,KAAK,IAAvB;;AACA,SAASC,OAAT,CAAkBP,KAAlB,EAAyB;AACvB,SAAON,SAAS,CAACc,MAAV,CAAiBR,KAAjB,KAA2BA,KAAK,IAAIM,WAA3C;AACD,C,CAED;;;AACA,IAAIG,MAAM,GAAGf,SAAS,CAACgB,UAAV,CAAqB,YAArB,CAAb;AACA,IAAIC,OAAO,GAAGjB,SAAS,CAACgB,UAAV,CAAqB,OAArB,CAAd,C,CAEA;;AACA,IAAIE,WAAW,GAAGlB,SAAS,CAACmB,OAAV,CAAkB;AAAEC,EAAAA,CAAC,EAAEL,MAAL;AAAaM,EAAAA,CAAC,EAAEN;AAAhB,CAAlB,CAAlB;AACA,IAAIO,cAAc,GAAGtB,SAAS,CAACuB,KAAV,CAAgBvB,SAAS,CAACwB,KAA1B,EAAiCxB,SAAS,CAACyB,MAA3C,CAArB;AACA,IAAIC,OAAO,GAAG1B,SAAS,CAACmB,OAAV,CAAkB;AAC9BQ,EAAAA,aAAa,EAAE3B,SAAS,CAACuB,KAAV,CAAgBvB,SAAS,CAAC4B,MAA1B,EAAkC5B,SAAS,CAACS,MAA5C,CADe;AAE9BoB,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE9B,SAAS,CAACO,MADb;AAELwB,IAAAA,OAAO,EAAE/B,SAAS,CAACO;AAFd,GAFuB;AAM9ByB,EAAAA,UAAU,EAAEV,cANkB;AAO9BW,EAAAA,UAAU,EAAEX,cAPkB;AAQ9BY,EAAAA,GAAG,EAAElC,SAAS,CAACwB;AARe,CAAlB,CAAd,C,CAWA;;AACA,IAAIW,KAAK,GAAG;AACVpB,EAAAA,MAAM,EAAEA,MADE;AAEVP,EAAAA,SAAS,EAAEA,SAFD;AAGV4B,EAAAA,YAAY,EAAEpC,SAAS,CAACqC,OAAV,CAAkB,EAAlB,CAHJ;AAIVpB,EAAAA,OAAO,EAAEA,OAJC;AAKVC,EAAAA,WAAW,EAAEA,WALH;AAMVoB,EAAAA,UAAU,EAAEtC,SAAS,CAACqC,OAAV,CAAkB,EAAlB,CANF;AAOVE,EAAAA,UAAU,EAAEvC,SAAS,CAACqC,OAAV,CAAkB,EAAlB,CAPF;AAQVX,EAAAA,OAAO,EAAEA,OARC;AASVb,EAAAA,OAAO,EAAEA,OATC;AAUVR,EAAAA,MAAM,EAAEA,MAVE;AAWVmC,EAAAA,cAAc,EAAElB;AAXN,CAAZ;;AAcA,KAAK,IAAImB,QAAT,IAAqBzC,SAArB,EAAgC;AAC9BmC,EAAAA,KAAK,CAACM,QAAD,CAAL,GAAkBzC,SAAS,CAACyC,QAAD,CAA3B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBR,KAAjB","sourcesContent":["var typeforce = require('typeforce')\n\nvar UINT31_MAX = Math.pow(2, 31) - 1\nfunction UInt31 (value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX\n}\n\nfunction BIP32Path (value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/)\n}\nBIP32Path.toJSON = function () { return 'BIP32 derivation path' }\n\nvar SATOSHI_MAX = 21 * 1e14\nfunction Satoshi (value) {\n  return typeforce.UInt53(value) && value <= SATOSHI_MAX\n}\n\n// external dependent types\nvar BigInt = typeforce.quacksLike('BigInteger')\nvar ECPoint = typeforce.quacksLike('Point')\n\n// exposed, external API\nvar ECSignature = typeforce.compile({ r: BigInt, s: BigInt })\nvar networkVersion = typeforce.oneOf(typeforce.UInt8, typeforce.UInt16)\nvar Network = typeforce.compile({\n  messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  },\n  pubKeyHash: networkVersion,\n  scriptHash: networkVersion,\n  wif: typeforce.UInt8\n})\n\n// extend typeforce types with ours\nvar types = {\n  BigInt: BigInt,\n  BIP32Path: BIP32Path,\n  Buffer256bit: typeforce.BufferN(32),\n  ECPoint: ECPoint,\n  ECSignature: ECSignature,\n  Hash160bit: typeforce.BufferN(20),\n  Hash256bit: typeforce.BufferN(32),\n  Network: Network,\n  Satoshi: Satoshi,\n  UInt31: UInt31,\n  NetworkVersion: networkVersion\n}\n\nfor (var typeName in typeforce) {\n  types[typeName] = typeforce[typeName]\n}\n\nmodule.exports = types\n"]},"metadata":{},"sourceType":"script"}