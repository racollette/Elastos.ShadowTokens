{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../util/preconditions');\n\nvar buffer = require('buffer');\n\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Signature = require('../crypto/signature');\n\nvar Sighash = require('./sighash');\n\nvar Address = require('../address');\n\nvar UnspentOutput = require('./unspentoutput');\n\nvar Input = require('./input');\n\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\n\nvar Output = require('./output');\n\nvar Script = require('../script');\n\nvar PrivateKey = require('../privatekey');\n\nvar BN = require('../crypto/bn');\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\n\n\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000; // Minimum amount for an output for it not to be considered a dust output\n\nTransaction.DUST_AMOUNT = 546; // Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\n\nTransaction.FEE_SECURITY_MARGIN = 150; // max amount of satoshis in circulation\n\nTransaction.MAX_MONEY = 21000000 * 1e8; // nlocktime limit to be considered block height rather than a timestamp\n\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8; // Max value for an unsigned 32 bit value\n\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295; // Value used for fee estimation (satoshis per kilobyte)\n\nTransaction.FEE_PER_KB = 100000; // Safe upper bound for change address script size in bytes\n\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\n\nTransaction.shallowCopy = function (transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\n\nioProperty.get = function () {\n  return this._getOutputAmount();\n};\n\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\n\nTransaction.prototype._getHash = function () {\n  return Hash.sha256sha256(this.toBuffer());\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\n\n\nTransaction.prototype.serialize = function (unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\n\n\nTransaction.prototype.checkedSerialize = function (opts) {\n  var serializationError = this.getSerializationError(opts);\n\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' + 'https://bitcore.io/api/lib/transaction#serialization-checks';\n    throw serializationError;\n  }\n\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function () {\n  var invalid = false;\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n\n  return invalid;\n};\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\n\n\nTransaction.prototype.getSerializationError = function (opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n\n  var unspentError;\n\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function (opts, unspent) {\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different('Unspent value is ' + unspent + ' but specified fee is ' + this._fee);\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing('Fee is too large and no change address was provided');\n      }\n\n      return new errors.Transaction.FeeError.TooLarge('expected less than ' + maximumFee + ' but got ' + unspent);\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall('expected more than ' + minimumFee + ' but got ' + unspent);\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function () {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function (opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n\n  var index, output;\n\n  for (index in this.outputs) {\n    output = this.outputs[index];\n\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function (opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function () {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function () {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\n\nTransaction.prototype.toBufferWriter = function (writer) {\n  writer.writeInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n\n  _.each(this.inputs, function (input) {\n    input.toBufferWriter(writer);\n  });\n\n  writer.writeVarintNum(this.outputs.length);\n\n  _.each(this.outputs, function (output) {\n    output.toBufferWriter(writer);\n  });\n\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function (buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function (reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n  this.version = reader.readInt32LE();\n  sizeTxIns = reader.readVarintNum();\n\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n\n  sizeTxOuts = reader.readVarintNum();\n\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function (input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function (output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n\n  _.each(transaction.inputs, function (input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n\n    var script = new Script(input.output.script);\n    var txin;\n\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n\n    self.addInput(txin);\n  });\n\n  _.each(transaction.outputs, function (output) {\n    self.addOutput(new Output(output));\n  });\n\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n\n  this._checkConsistency(arg);\n\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function (arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilDate = function (time) {\n  $.checkArgument(time);\n\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilBlockHeight = function (height) {\n  $.checkArgument(_.isNumber(height));\n\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = height;\n  return this;\n};\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\n\n\nTransaction.prototype.getLockTime = function () {\n  if (!this.nLockTime) {\n    return null;\n  }\n\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function (string) {\n  this.fromBuffer(buffer.Buffer.from(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function () {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true and is multisig, don't\n *                      sort the given public keys before creating the script\n */\n\n\nTransaction.prototype.from = function (utxo, pubkeys, threshold, opts) {\n  if (_.isArray(utxo)) {\n    var self = this;\n\n    _.each(utxo, function (utxo) {\n      self.from(utxo, pubkeys, threshold, opts);\n    });\n\n    return this;\n  }\n\n  var exists = _.some(this.inputs, function (input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n\n  if (exists) {\n    return this;\n  }\n\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n\n  return this;\n};\n\nTransaction.prototype._fromNonP2SH = function (utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\n\nTransaction.prototype._fromMultisigUtxo = function (utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length, 'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold, undefined, opts));\n};\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.addInput = function (input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n\n  return this.uncheckedAddInput(input);\n};\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.uncheckedAddInput = function (input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\n\n\nTransaction.prototype.hasAllUtxoInfo = function () {\n  return _.every(this.inputs.map(function (input) {\n    return !!input.output;\n  }));\n};\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.fee = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.feePerKb = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n * fee per Byte will be ignored if fee per KB is set\n *\n * @param {number} amount satoshis per Byte to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.feePerByte = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerByte = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.change = function (address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * @return {Output} change output, if it exists\n */\n\n\nTransaction.prototype.getChangeOutput = function () {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n\n  return null;\n};\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.to = function (address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n\n    _.each(address, function (to) {\n      self.to(to.address, to.satoshis);\n    });\n\n    return this;\n  }\n\n  $.checkArgument(JSUtil.isNaturalNumber(amount), 'Amount is expected to be a positive integer');\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addData = function (value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addOutput = function (output) {\n  $.checkArgumentType(output, Output, 'output');\n\n  this._addOutput(output);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.clearOutputs = function () {\n  this.outputs = [];\n\n  this._clearSignatures();\n\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n\nTransaction.prototype._addOutput = function (output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\n\n\nTransaction.prototype._getOutputAmount = function () {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n\n    _.each(this.outputs, function (output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n\n  return this._outputAmount;\n};\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\n\n\nTransaction.prototype._getInputAmount = function () {\n  if (_.isUndefined(this._inputAmount)) {\n    this._inputAmount = _.sumBy(this.inputs, function (input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n\n      return input.output.satoshis;\n    });\n  }\n\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function () {\n  if (!this._changeScript) {\n    return;\n  }\n\n  this._clearSignatures();\n\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n\n  var available = this._getUnspentValue();\n\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\n\n\nTransaction.prototype.getFee = function () {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  } // if no change output is set, fees should equal all the unspent amount\n\n\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n\n  return this._estimateFee();\n};\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\n\n\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n\n  var available = this._getUnspentValue();\n\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n\n  function getFee(size) {\n    return size * feeRate;\n  }\n\n  var fee = Math.ceil(getFee(estimatedSize));\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\n\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n\n  return feeWithChange;\n};\n\nTransaction.prototype._getUnspentValue = function () {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function () {\n  _.each(this.inputs, function (input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction.prototype._estimateSize = function () {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n\n  _.each(this.inputs, function (input) {\n    result += input._estimateSize();\n  });\n\n  _.each(this.outputs, function (output) {\n    result += output.script.toBuffer().length + 9;\n  });\n\n  return result;\n};\n\nTransaction.prototype._removeOutput = function (index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function (index) {\n  this._removeOutput(index);\n\n  this._updateChangeOutput();\n};\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sort = function () {\n  this.sortInputs(function (inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return compare(first.prevTxId, second.prevTxId) || first.outputIndex - second.outputIndex || first.i - second.i; // to ensure stable sort\n    });\n    return copy;\n  });\n  this.sortOutputs(function (outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return first.satoshis - second.satoshis || compare(first.script.toBuffer(), second.script.toBuffer()) || first.i - second.i; // to ensure stable sort\n    });\n    return copy;\n  });\n  return this;\n};\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.shuffleOutputs = function () {\n  return this.sortOutputs(_.shuffle);\n};\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortOutputs = function (sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortInputs = function (sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n\n  this._clearSignatures();\n\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function (newOutputs) {\n  var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;\n\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function (txId, outputIndex) {\n  var index;\n\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function (input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n};\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.sign = function (privateKey, sigtype, signingMethod) {\n  signingMethod = signingMethod || \"ecdsa\";\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  var self = this;\n\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function (privateKey) {\n      self.sign(privateKey, sigtype, signingMethod);\n    });\n\n    return this;\n  }\n\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function (signature) {\n    self.applySignature(signature, signingMethod);\n  });\n\n  return this;\n};\n\nTransaction.prototype.getSignatures = function (privKey, sigtype, signingMethod) {\n  privKey = new PrivateKey(privKey); // By default, signs using ALL|FORKID\n\n  sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function (signature) {\n      results.push(signature);\n    });\n  });\n\n  return results;\n};\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {String} signingMethod \"ecdsa\" or \"schnorr\"\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.applySignature = function (signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function () {\n  _.each(this.inputs, function (input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n    }\n  });\n\n  return _.every(_.map(this.inputs, function (input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function (signature) {\n  var self = this;\n\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n  }\n\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\n\n\nTransaction.prototype.verifySignature = function (sig, pubkey, nin, subscript, satoshisBN, flags, signingMethod) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript, satoshisBN, flags, signingMethod);\n};\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\n\n\nTransaction.prototype.verify = function () {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  } // Check for negative or overflow output values\n\n\n  var valueoutbn = new BN(0);\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  } // Size limits\n\n\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  } // Check for duplicate inputs\n\n\n  var txinmap = {};\n\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n\n  return true;\n};\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\n\n\nTransaction.prototype.isCoinbase = function () {\n  return this.inputs.length === 1 && this.inputs[0].isNull();\n};\n\nTransaction.prototype.setVersion = function (version) {\n  $.checkArgument(JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION, 'Wrong version number');\n  this.version = version;\n  return this;\n};\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/bitcore-lib-cash/lib/transaction/transaction.js"],"names":["_","require","$","buffer","compare","Buffer","errors","BufferUtil","JSUtil","BufferReader","BufferWriter","Hash","Signature","Sighash","Address","UnspentOutput","Input","PublicKeyHashInput","PublicKeyHash","PublicKeyInput","PublicKey","MultiSigScriptHashInput","MultiSigScriptHash","MultiSigInput","MultiSig","Output","Script","PrivateKey","BN","Transaction","serialized","inputs","outputs","_inputAmount","undefined","_outputAmount","shallowCopy","isHexa","fromString","isBuffer","fromBuffer","isObject","fromObject","InvalidArgument","_newTransaction","CURRENT_VERSION","DEFAULT_NLOCKTIME","MAX_BLOCK_SIZE","DUST_AMOUNT","FEE_SECURITY_MARGIN","MAX_MONEY","NLOCKTIME_BLOCKHEIGHT_LIMIT","NLOCKTIME_MAX_VALUE","FEE_PER_KB","CHANGE_OUTPUT_MAX_SIZE","MAXIMUM_EXTRA_SIZE","transaction","copy","toBuffer","hashProperty","configurable","enumerable","get","_hash","_getHash","readReverse","toString","Object","defineProperty","prototype","ioProperty","_getInputAmount","_getOutputAmount","sha256sha256","serialize","unsafe","disableAll","uncheckedSerialize","checkedSerialize","opts","serializationError","getSerializationError","message","invalidSatoshis","invalid","i","length","InvalidSatoshis","unspent","_getUnspentValue","unspentError","disableMoreOutputThanInput","InvalidOutputAmountSum","_hasFeeError","_hasDustOutputs","_isMissingSignatures","isUndefined","_fee","FeeError","Different","disableLargeFees","maximumFee","Math","floor","_estimateFee","_missingChange","ChangeAddressMissing","TooLarge","disableSmallFees","minimumFee","ceil","TooSmall","_changeScript","disableDustOutputs","index","output","satoshis","script","isDataOut","DustOutputs","disableIsFullySigned","isFullySigned","MissingSignatures","inspect","writer","toBufferWriter","writeInt32LE","version","writeVarintNum","each","input","writeUInt32LE","nLockTime","reader","fromBufferReader","checkArgument","finished","sizeTxIns","sizeTxOuts","readInt32LE","readVarintNum","push","readUInt32LE","toObject","toJSON","forEach","obj","hash","changeScript","_changeIndex","changeIndex","fee","arg","self","uncheckedAddInput","txin","isPublicKeyHashOut","isScriptHashOut","publicKeys","threshold","signatures","isPublicKeyOut","UnsupportedScript","addInput","addOutput","_checkConsistency","checkState","lockUntilDate","time","isNumber","LockTimeTooEarly","isDate","getTime","sequenceNumber","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","lockUntilBlockHeight","height","BlockHeightTooHigh","NLockTimeOutOfRange","getLockTime","Date","string","from","utxo","pubkeys","isArray","exists","some","prevTxId","txId","outputIndex","_fromMultisigUtxo","_fromNonP2SH","clazz","empty","isMultisigOut","Error","outputScript","checkArgumentType","NeedMoreInfo","_updateChangeOutput","hasAllUtxoInfo","every","map","amount","feePerKb","_feePerKb","feePerByte","_feePerByte","change","address","fromAddress","getChangeOutput","to","isNaturalNumber","addData","value","buildDataOut","_addOutput","clearOutputs","_clearSignatures","sumBy","MissingPreviousOutput","_removeOutput","available","getFee","changeAmount","isCoinbase","estimatedSize","_estimateSize","feeRate","size","feeWithChange","clearSignatures","result","without","removeOutput","sort","sortInputs","Array","concat","apply","x","first","second","sortOutputs","shuffleOutputs","shuffle","sortingFunction","outs","_newOutputOrder","newOutputs","isInvalidSorting","difference","InvalidSorting","changeOutput","findIndex","removeInput","InvalidIndex","sign","privateKey","sigtype","signingMethod","getSignatures","signature","applySignature","privKey","SIGHASH_ALL","SIGHASH_FORKID","results","hashData","sha256ripemd160","publicKey","forEachInput","inputIndex","addSignature","UnableToVerifySignature","isValidSignature","verifySignature","sig","pubkey","nin","subscript","satoshisBN","flags","verify","valueoutbn","txout","_satoshisBN","gt","add","txinmap","inputid","buf","_scriptBuffer","isNull","setVersion","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar buffer = require('buffer');\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\n\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 150;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000;\n\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function(transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\n\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function() {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function() {\n  return Hash.sha256sha256(this.toBuffer());\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function(unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function(opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' +\n      'https://bitcore.io/api/lib/transaction#serialization-checks';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function() {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function(opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError ||\n    this._hasDustOutputs(opts) ||\n    this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function(opts, unspent) {\n\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different(\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\n    );\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing(\n          'Fee is too large and no change address was provided'\n        );\n      }\n      return new errors.Transaction.FeeError.TooLarge(\n        'expected less than ' + maximumFee + ' but got ' + unspent\n      );\n    }\n  }\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall(\n        'expected more than ' + minimumFee + ' but got ' + unspent\n      );\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function() {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function(opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function(opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function() {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function() {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\n\nTransaction.prototype.toBufferWriter = function(writer) {\n  writer.writeInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n  _.each(this.inputs, function(input) {\n    input.toBufferWriter(writer);\n  });\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function(output) {\n    output.toBufferWriter(writer);\n  });\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function(buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function(reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n\n  this.version = reader.readInt32LE();\n  sizeTxIns = reader.readVarintNum();\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n  sizeTxOuts = reader.readVarintNum();\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function(input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function(output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function(input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(\n        input, input.publicKeys, input.threshold, input.signatures\n      );\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function(output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function(arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\n      this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function(time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function(height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function() {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function(string) {\n  this.fromBuffer(buffer.Buffer.from(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function() {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true and is multisig, don't\n *                      sort the given public keys before creating the script\n */\nTransaction.prototype.from = function(utxo, pubkeys, threshold, opts) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function(utxo) {\n      self.from(utxo, pubkeys, threshold, opts);\n    });\n    return this;\n  }\n  var exists = _.some(this.inputs, function(input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\n\nTransaction.prototype._fromNonP2SH = function(utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\n\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length,\n    'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold, undefined, opts));\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function(input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function() {\n  return _.every(this.inputs.map(function(input) {\n    return !!input.output;\n  }));\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n * fee per Byte will be ignored if fee per KB is set\n *\n * @param {number} amount satoshis per Byte to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerByte = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerByte = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function(address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function() {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function(address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function(to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n\n  $.checkArgument(\n    JSUtil.isNaturalNumber(amount),\n    'Amount is expected to be a positive integer'\n  );\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function(value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function(output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function() {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n\nTransaction.prototype._addOutput = function(output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function() {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function(output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function() {\n  if (_.isUndefined(this._inputAmount)) {\n    this._inputAmount = _.sumBy(this.inputs, function(input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      return input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function() {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function() {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n  function getFee(size) {\n    return size * feeRate;\n  }\n  var fee = Math.ceil(getFee(estimatedSize));\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n  return feeWithChange;\n};\n\nTransaction.prototype._getUnspentValue = function() {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function() {\n  _.each(this.inputs, function(input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction.prototype._estimateSize = function() {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function(input) {\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function(output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return result;\n};\n\nTransaction.prototype._removeOutput = function(index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function(index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function() {\n  this.sortInputs(function(inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0; \n    copy.forEach((x) => { x.i = i++});\n    copy.sort(function(first, second) {\n      return compare(first.prevTxId, second.prevTxId)\n        || first.outputIndex - second.outputIndex\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  this.sortOutputs(function(outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0; \n    copy.forEach((x) => { x.i = i++});\n    copy.sort(function(first, second) {\n      return first.satoshis - second.satoshis\n        || compare(first.script.toBuffer(), second.script.toBuffer())\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function() {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function(sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function(sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function(newOutputs) {\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\n                          _.difference(this.outputs, newOutputs).length !== 0);\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function(txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function(input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function(privateKey, sigtype, signingMethod) {\n  signingMethod = signingMethod || \"ecdsa\"\n  \n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function(privateKey) {\n      self.sign(privateKey, sigtype, signingMethod);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function(signature) {\n    self.applySignature(signature, signingMethod);\n  });\n  return this;\n};\n\nTransaction.prototype.getSignatures = function(privKey, sigtype, signingMethod) {\n  privKey = new PrivateKey(privKey);\n\n  // By default, signs using ALL|FORKID\n  sigtype = sigtype || (Signature.SIGHASH_ALL |  Signature.SIGHASH_FORKID);\n  var transaction = this;\n  var results = [];\n  \n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function(signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {String} signingMethod \"ecdsa\" or \"schnorr\"\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function(signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function() {\n  _.each(this.inputs, function(input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature(\n        'Unrecognized script kind, or not enough information to execute script.' +\n        'This usually happens when creating a transaction from a serialized transaction'\n      );\n    }\n  });\n  return _.every(_.map(this.inputs, function(input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function(signature) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature(\n      'Unrecognized script kind, or not enough information to execute script.' +\n      'This usually happens when creating a transaction from a serialized transaction'\n    );\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript, satoshisBN, flags, signingMethod) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript, satoshisBN, flags, signingMethod);\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function() {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function() {\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\n};\n\n\nTransaction.prototype.setVersion = function(version) {\n  $.checkArgument(\n    JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION, \n    'Wrong version number');\n  this.version = version;\n  return this;\n};\n\n\nmodule.exports = Transaction;\n"]},"metadata":{},"sourceType":"script"}