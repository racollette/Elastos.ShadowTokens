{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar bcrypto = require('./crypto');\n\nvar bscript = require('./script');\n\nvar {\n  BufferReader,\n  BufferWriter\n} = require('./bufferutils');\n\nvar {\n  ZcashBufferReader,\n  ZcashBufferWriter\n} = require('./forks/zcash/bufferutils');\n\nvar coins = require('./coins');\n\nvar opcodes = require('bitcoin-ops');\n\nvar networks = require('./networks');\n\nvar typeforce = require('typeforce');\n\nvar types = require('./types');\n\nvar varuint = require('varuint-bitcoin');\n\nvar blake2b = require('blake2b');\n\nvar zcashVersion = require('./forks/zcash/version');\n\nfunction varSliceSize(someScript) {\n  var length = someScript.length;\n  return varuint.encodingLength(length) + length;\n}\n\nfunction vectorSize(someVector) {\n  var length = someVector.length;\n  return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n    return sum + varSliceSize(witness);\n  }, 0);\n} // By default, assume is a bitcoin transaction\n\n\nfunction Transaction(network = networks.bitcoin) {\n  this.version = 1;\n  this.locktime = 0;\n  this.ins = [];\n  this.outs = [];\n  this.network = network;\n\n  if (coins.isZcash(network)) {\n    // ZCash version >= 2\n    this.joinsplits = [];\n    this.joinsplitPubkey = [];\n    this.joinsplitSig = []; // ZCash version >= 3\n\n    this.overwintered = 0; // 1 if the transaction is post overwinter upgrade, 0 otherwise\n\n    this.versionGroupId = 0; // 0x03C48270 (63210096) for overwinter and 0x892F2085 (2301567109) for sapling\n\n    this.expiryHeight = 0; // Block height after which this transactions will expire, or 0 to disable expiry\n    // ZCash version >= 4\n\n    this.valueBalance = 0;\n    this.vShieldedSpend = [];\n    this.vShieldedOutput = [];\n    this.bindingSig = 0;\n  }\n\n  if (coins.isDash(network)) {\n    // Dash version = 3\n    this.type = 0;\n    this.extraPayload = Buffer.alloc(0);\n  }\n}\n\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\nTransaction.SIGHASH_BITCOINCASHBIP143 = 0x40;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\nvar EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nvar EMPTY_WITNESS = [];\nvar ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\nvar ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex'); // Used to represent the absence of a value\n\nvar VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nvar BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX\n};\nTransaction.DASH_NORMAL = 0;\nTransaction.DASH_PROVIDER_REGISTER = 1;\nTransaction.DASH_PROVIDER_UPDATE_SERVICE = 2;\nTransaction.DASH_PROVIDER_UPDATE_REGISTRAR = 3;\nTransaction.DASH_PROVIDER_UPDATE_REVOKE = 4;\nTransaction.DASH_COINBASE = 5;\nTransaction.DASH_QUORUM_COMMITMENT = 6;\n\nTransaction.fromBuffer = function (buffer, network = networks.bitcoin, __noStrict) {\n  let bufferReader = new BufferReader(buffer);\n  let tx = new Transaction(network);\n  tx.version = bufferReader.readInt32();\n\n  if (coins.isZcash(network)) {\n    // Split the header into fOverwintered and nVersion\n    tx.overwintered = tx.version >>> 31; // Must be 1 for version 3 and up\n\n    tx.version = tx.version & 0x07FFFFFFF; // 3 for overwinter\n\n    if (!network.consensusBranchId.hasOwnProperty(tx.version)) {\n      throw new Error('Unsupported Zcash transaction');\n    }\n\n    bufferReader = new ZcashBufferReader(bufferReader.buffer, bufferReader.offset, tx.version);\n  }\n\n  if (coins.isDash(network)) {\n    tx.type = tx.version >> 16;\n    tx.version = tx.version & 0xffff;\n\n    if (tx.version === 3 && (tx.type < Transaction.DASH_NORMAL || tx.type > Transaction.DASH_QUORUM_COMMITMENT)) {\n      throw new Error('Unsupported Dash transaction type');\n    }\n  }\n\n  var marker = bufferReader.readUInt8();\n  var flag = bufferReader.readUInt8();\n  var hasWitnesses = false;\n\n  if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG && !coins.isZcash(network)) {\n    hasWitnesses = true;\n  } else {\n    bufferReader.offset -= 2;\n  }\n\n  if (tx.isOverwinterCompatible()) {\n    tx.versionGroupId = bufferReader.readUInt32();\n  }\n\n  var vinLen = bufferReader.readVarInt();\n\n  for (var i = 0; i < vinLen; ++i) {\n    tx.ins.push({\n      hash: bufferReader.readSlice(32),\n      index: bufferReader.readUInt32(),\n      script: bufferReader.readVarSlice(),\n      sequence: bufferReader.readUInt32(),\n      witness: EMPTY_WITNESS\n    });\n  }\n\n  var voutLen = bufferReader.readVarInt();\n\n  for (i = 0; i < voutLen; ++i) {\n    tx.outs.push({\n      value: bufferReader.readUInt64(),\n      script: bufferReader.readVarSlice()\n    });\n  }\n\n  if (hasWitnesses) {\n    for (i = 0; i < vinLen; ++i) {\n      tx.ins[i].witness = bufferReader.readVector();\n    } // was this pointless?\n\n\n    if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data');\n  }\n\n  tx.locktime = bufferReader.readUInt32();\n\n  if (coins.isZcash(network)) {\n    if (tx.isOverwinterCompatible()) {\n      tx.expiryHeight = bufferReader.readUInt32();\n    }\n\n    if (tx.isSaplingCompatible()) {\n      tx.valueBalance = bufferReader.readInt64();\n      var nShieldedSpend = bufferReader.readVarInt();\n\n      for (i = 0; i < nShieldedSpend; ++i) {\n        tx.vShieldedSpend.push(bufferReader.readShieldedSpend());\n      }\n\n      var nShieldedOutput = bufferReader.readVarInt();\n\n      for (i = 0; i < nShieldedOutput; ++i) {\n        tx.vShieldedOutput.push(bufferReader.readShieldedOutput());\n      }\n    }\n\n    if (tx.supportsJoinSplits()) {\n      var joinSplitsLen = bufferReader.readVarInt();\n\n      for (i = 0; i < joinSplitsLen; ++i) {\n        tx.joinsplits.push(bufferReader.readJoinSplit());\n      }\n\n      if (joinSplitsLen > 0) {\n        tx.joinsplitPubkey = bufferReader.readSlice(32);\n        tx.joinsplitSig = bufferReader.readSlice(64);\n      }\n    }\n\n    if (tx.isSaplingCompatible() && tx.vShieldedSpend.length + tx.vShieldedOutput.length > 0) {\n      tx.bindingSig = bufferReader.readSlice(64);\n    }\n  }\n\n  if (tx.isDashSpecialTransaction()) {\n    tx.extraPayload = bufferReader.readVarSlice();\n  }\n\n  tx.network = network;\n  if (__noStrict) return tx;\n  if (bufferReader.offset !== buffer.length) throw new Error('Transaction has unexpected data');\n  return tx;\n};\n\nTransaction.fromHex = function (hex, network) {\n  return Transaction.fromBuffer(Buffer.from(hex, 'hex'), network);\n};\n\nTransaction.isCoinbaseHash = function (buffer) {\n  typeforce(types.Hash256bit, buffer);\n\n  for (var i = 0; i < 32; ++i) {\n    if (buffer[i] !== 0) return false;\n  }\n\n  return true;\n};\n\nTransaction.prototype.isSaplingCompatible = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.SAPLING;\n};\n\nTransaction.prototype.isOverwinterCompatible = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.OVERWINTER;\n};\n\nTransaction.prototype.supportsJoinSplits = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.JOINSPLITS_SUPPORT;\n};\n\nTransaction.prototype.versionSupportsDashSpecialTransactions = function () {\n  return coins.isDash(this.network) && this.version >= 3;\n};\n\nTransaction.prototype.isDashSpecialTransaction = function () {\n  return this.versionSupportsDashSpecialTransactions() && this.type !== Transaction.DASH_NORMAL;\n};\n\nTransaction.prototype.isCoinbase = function () {\n  return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);\n};\n\nTransaction.prototype.addInput = function (hash, index, sequence, scriptSig) {\n  typeforce(types.tuple(types.Hash256bit, types.UInt32, types.maybe(types.UInt32), types.maybe(types.Buffer)), arguments);\n\n  if (types.Null(sequence)) {\n    sequence = Transaction.DEFAULT_SEQUENCE;\n  } // Add the input and return the input's index\n\n\n  return this.ins.push({\n    hash: hash,\n    index: index,\n    script: scriptSig || EMPTY_SCRIPT,\n    sequence: sequence,\n    witness: EMPTY_WITNESS\n  }) - 1;\n};\n\nTransaction.prototype.addOutput = function (scriptPubKey, value) {\n  typeforce(types.tuple(types.Buffer, types.Satoshi), arguments); // Add the output and return the output's index\n\n  return this.outs.push({\n    script: scriptPubKey,\n    value: value\n  }) - 1;\n};\n\nTransaction.prototype.hasWitnesses = function () {\n  return this.ins.some(function (x) {\n    return x.witness.length !== 0;\n  });\n};\n\nTransaction.prototype.weight = function () {\n  var base = this.__byteLength(false);\n\n  var total = this.__byteLength(true);\n\n  return base * 3 + total;\n};\n\nTransaction.prototype.virtualSize = function () {\n  return Math.ceil(this.weight() / 4);\n};\n\nTransaction.prototype.byteLength = function () {\n  return this.__byteLength(true);\n};\n\nTransaction.prototype.getShieldedSpendByteLength = function () {\n  if (!this.isSaplingCompatible()) {\n    return 0;\n  }\n\n  var byteLength = 0;\n  byteLength += varuint.encodingLength(this.vShieldedSpend.length); // nShieldedSpend\n\n  byteLength += 384 * this.vShieldedSpend.length; // vShieldedSpend\n\n  return byteLength;\n};\n\nTransaction.prototype.getShieldedOutputByteLength = function () {\n  if (!this.isSaplingCompatible()) {\n    return 0;\n  }\n\n  var byteLength = 0;\n  byteLength += varuint.encodingLength(this.vShieldedOutput.length); // nShieldedOutput\n\n  byteLength += 948 * this.vShieldedOutput.length; // vShieldedOutput\n\n  return byteLength;\n};\n\nTransaction.prototype.getJoinSplitByteLength = function () {\n  if (!this.supportsJoinSplits()) {\n    return 0;\n  }\n\n  var joinSplitsLen = this.joinsplits.length;\n  var byteLength = 0;\n  byteLength += varuint.encodingLength(joinSplitsLen); // vJoinSplit\n\n  if (joinSplitsLen > 0) {\n    // Both pre and post Sapling JoinSplits are encoded with the following data:\n    // 8 vpub_old, 8 vpub_new, 32 anchor, joinSplitsLen * 32 nullifiers, joinSplitsLen * 32 commitments, 32 ephemeralKey\n    // 32 ephemeralKey, 32 randomSeed, joinsplit.macs.length * 32 vmacs\n    if (this.isSaplingCompatible()) {\n      byteLength += 1698 * joinSplitsLen; // vJoinSplit using JSDescriptionGroth16\n    } else {\n      byteLength += 1802 * joinSplitsLen; // vJoinSplit using JSDescriptionPHGR13\n    }\n\n    byteLength += 32; // joinSplitPubKey\n\n    byteLength += 64; // joinSplitSig\n  }\n\n  return byteLength;\n};\n\nTransaction.prototype.zcashTransactionByteLength = function () {\n  if (!coins.isZcash(this.network)) {\n    throw new Error('zcashTransactionByteLength can only be called when using Zcash network');\n  }\n\n  var byteLength = 0;\n  byteLength += 4; // Header\n\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4; // nVersionGroupId\n  }\n\n  byteLength += varuint.encodingLength(this.ins.length); // tx_in_count\n\n  byteLength += this.ins.reduce(function (sum, input) {\n    return sum + 40 + varSliceSize(input.script);\n  }, 0); // tx_in\n\n  byteLength += varuint.encodingLength(this.outs.length); // tx_out_count\n\n  byteLength += this.outs.reduce(function (sum, output) {\n    return sum + 8 + varSliceSize(output.script);\n  }, 0); // tx_out\n\n  byteLength += 4; // lock_time\n\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4; // nExpiryHeight\n  }\n\n  if (this.isSaplingCompatible()) {\n    byteLength += 8; // valueBalance\n\n    byteLength += this.getShieldedSpendByteLength();\n    byteLength += this.getShieldedOutputByteLength();\n  }\n\n  if (this.supportsJoinSplits()) {\n    byteLength += this.getJoinSplitByteLength();\n  }\n\n  if (this.isSaplingCompatible() && this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    byteLength += 64; // bindingSig\n  }\n\n  return byteLength;\n};\n\nTransaction.prototype.__byteLength = function (__allowWitness) {\n  var hasWitnesses = __allowWitness && this.hasWitnesses();\n\n  if (coins.isZcash(this.network)) {\n    return this.zcashTransactionByteLength();\n  }\n\n  return (hasWitnesses ? 10 : 8) + varuint.encodingLength(this.ins.length) + varuint.encodingLength(this.outs.length) + this.ins.reduce(function (sum, input) {\n    return sum + 40 + varSliceSize(input.script);\n  }, 0) + this.outs.reduce(function (sum, output) {\n    return sum + 8 + varSliceSize(output.script);\n  }, 0) + (this.isDashSpecialTransaction() ? varSliceSize(this.extraPayload) : 0) + (hasWitnesses ? this.ins.reduce(function (sum, input) {\n    return sum + vectorSize(input.witness);\n  }, 0) : 0);\n};\n\nTransaction.prototype.clone = function () {\n  var newTx = new Transaction(this.network);\n  newTx.version = this.version;\n  newTx.locktime = this.locktime;\n  newTx.network = this.network;\n\n  if (coins.isDash(this.network)) {\n    newTx.type = this.type;\n    newTx.extraPayload = this.extraPayload;\n  }\n\n  if (this.isOverwinterCompatible()) {\n    newTx.overwintered = this.overwintered;\n    newTx.versionGroupId = this.versionGroupId;\n    newTx.expiryHeight = this.expiryHeight;\n  }\n\n  if (this.isSaplingCompatible()) {\n    newTx.valueBalance = this.valueBalance;\n  }\n\n  newTx.ins = this.ins.map(function (txIn) {\n    return {\n      hash: txIn.hash,\n      index: txIn.index,\n      script: txIn.script,\n      sequence: txIn.sequence,\n      witness: txIn.witness\n    };\n  });\n  newTx.outs = this.outs.map(function (txOut) {\n    return {\n      script: txOut.script,\n      value: txOut.value\n    };\n  });\n\n  if (this.isSaplingCompatible()) {\n    newTx.vShieldedSpend = this.vShieldedSpend.map(function (shieldedSpend) {\n      return {\n        cv: shieldedSpend.cv,\n        anchor: shieldedSpend.anchor,\n        nullifier: shieldedSpend.nullifier,\n        rk: shieldedSpend.rk,\n        zkproof: shieldedSpend.zkproof,\n        spendAuthSig: shieldedSpend.spendAuthSig\n      };\n    });\n    newTx.vShieldedOutput = this.vShieldedOutput.map(function (shieldedOutput) {\n      return {\n        cv: shieldedOutput.cv,\n        cmu: shieldedOutput.cmu,\n        ephemeralKey: shieldedOutput.ephemeralKey,\n        encCiphertext: shieldedOutput.encCiphertext,\n        outCiphertext: shieldedOutput.outCiphertext,\n        zkproof: shieldedOutput.zkproof\n      };\n    });\n  }\n\n  if (this.supportsJoinSplits()) {\n    newTx.joinsplits = this.joinsplits.map(function (txJoinsplit) {\n      return {\n        vpubOld: txJoinsplit.vpubOld,\n        vpubNew: txJoinsplit.vpubNew,\n        anchor: txJoinsplit.anchor,\n        nullifiers: txJoinsplit.nullifiers,\n        commitments: txJoinsplit.commitments,\n        ephemeralKey: txJoinsplit.ephemeralKey,\n        randomSeed: txJoinsplit.randomSeed,\n        macs: txJoinsplit.macs,\n        zkproof: txJoinsplit.zkproof,\n        ciphertexts: txJoinsplit.ciphertexts\n      };\n    });\n    newTx.joinsplitPubkey = this.joinsplitPubkey;\n    newTx.joinsplitSig = this.joinsplitSig;\n  }\n\n  if (this.isSaplingCompatible() && this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    newTx.bindingSig = this.bindingSig;\n  }\n\n  return newTx;\n};\n/**\n * Get Zcash header or version\n * @returns {number}\n */\n\n\nTransaction.prototype.getHeader = function () {\n  var mask = this.overwintered ? 1 : 0;\n  var header = this.version | mask << 31;\n  return header;\n};\n/**\n * Hash transaction for signing a specific input.\n *\n * Bitcoin uses a different hash for each signed transaction input.\n * This method copies the transaction, makes the necessary changes based on the\n * hashType, and then hashes the result.\n * This hash can then be used to sign the provided transaction input.\n */\n\n\nTransaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer,\n  /* types.UInt8 */\n  types.Number), arguments); // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n\n  if (inIndex >= this.ins.length) return ONE; // ignore OP_CODESEPARATOR\n\n  var ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n    return x !== opcodes.OP_CODESEPARATOR;\n  }));\n  var txTmp = this.clone(); // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n\n  if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n    txTmp.outs = []; // ignore sequence numbers (except at inIndex)\n\n    txTmp.ins.forEach(function (input, i) {\n      if (i === inIndex) return;\n      input.sequence = 0;\n    }); // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n    if (inIndex >= this.outs.length) return ONE; // truncate outputs after\n\n    txTmp.outs.length = inIndex + 1; // \"blank\" outputs before\n\n    for (var i = 0; i < inIndex; i++) {\n      txTmp.outs[i] = BLANK_OUTPUT;\n    } // ignore sequence numbers (except at inIndex)\n\n\n    txTmp.ins.forEach(function (input, y) {\n      if (y === inIndex) return;\n      input.sequence = 0;\n    });\n  } // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n\n\n  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n    txTmp.ins = [txTmp.ins[inIndex]];\n    txTmp.ins[0].script = ourScript; // SIGHASH_ALL: only ignore input scripts\n  } else {\n    // \"blank\" others input scripts\n    txTmp.ins.forEach(function (input) {\n      input.script = EMPTY_SCRIPT;\n    });\n    txTmp.ins[inIndex].script = ourScript;\n  } // serialize and hash\n\n\n  var buffer = Buffer.allocUnsafe(txTmp.__byteLength(false) + 4);\n  buffer.writeInt32LE(hashType, buffer.length - 4);\n\n  txTmp.__toBuffer(buffer, 0, false);\n\n  return bcrypto.hash256(buffer);\n};\n/**\n * Blake2b hashing algorithm for Zcash\n * @param bufferToHash\n * @param personalization\n * @returns 256-bit BLAKE2b hash\n */\n\n\nTransaction.prototype.getBlake2bHash = function (bufferToHash, personalization) {\n  var out = Buffer.allocUnsafe(32);\n  return blake2b(out.length, null, null, Buffer.from(personalization)).update(bufferToHash).digest(out);\n};\n/**\n * Build a hash for all or none of the transaction inputs depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\n\n\nTransaction.prototype.getPrevoutHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(36 * this.ins.length));\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeSlice(txIn.hash);\n      bufferWriter.writeUInt32(txIn.index);\n    });\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashPrevoutHash');\n    }\n\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n\n  return ZERO;\n};\n/**\n * Build a hash for all or none of the transactions inputs sequence numbers depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\n\n\nTransaction.prototype.getSequenceHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(4 * this.ins.length));\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeUInt32(txIn.sequence);\n    });\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashSequencHash');\n    }\n\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n\n  return ZERO;\n};\n/**\n * Build a hash for one, all or none of the transaction outputs depending on the hashtype\n * @param hashType\n * @param inIndex\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\n\n\nTransaction.prototype.getOutputsHash = function (hashType, inIndex) {\n  var bufferWriter;\n\n  if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    // Find out the size of the outputs and write them\n    var txOutsSize = this.outs.reduce(function (sum, output) {\n      return sum + 8 + varSliceSize(output.script);\n    }, 0);\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(txOutsSize));\n    this.outs.forEach(function (out) {\n      bufferWriter.writeUInt64(out.value);\n      bufferWriter.writeVarSlice(out.script);\n    });\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n    }\n\n    return bcrypto.hash256(bufferWriter.buffer);\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n    // Write only the output specified in inIndex\n    var output = this.outs[inIndex];\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(8 + varSliceSize(output.script)));\n    bufferWriter.writeUInt64(output.value);\n    bufferWriter.writeVarSlice(output.script);\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n    }\n\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n\n  return ZERO;\n};\n/**\n * Hash transaction for signing a transparent transaction in Zcash. Protected transactions are not supported.\n * @param inIndex\n * @param prevOutScript\n * @param value\n * @param hashType\n * @returns double SHA-256 or 256-bit BLAKE2b hash\n */\n\n\nTransaction.prototype.hashForZcashSignature = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n\n  if (!coins.isZcash(this.network)) {\n    throw new Error('hashForZcashSignature can only be called when using Zcash network');\n  }\n\n  if (this.joinsplits.length > 0) {\n    throw new Error('Hash signature for Zcash protected transactions is not supported');\n  }\n\n  if (inIndex >= this.ins.length && inIndex !== VALUE_UINT64_MAX) {\n    throw new Error('Input index is out of range');\n  }\n\n  if (this.isOverwinterCompatible()) {\n    var hashPrevouts = this.getPrevoutHash(hashType);\n    var hashSequence = this.getSequenceHash(hashType);\n    var hashOutputs = this.getOutputsHash(hashType, inIndex);\n    var hashJoinSplits = ZERO;\n    var hashShieldedSpends = ZERO;\n    var hashShieldedOutputs = ZERO;\n    var bufferWriter;\n    var baseBufferSize = 0;\n    baseBufferSize += 4 * 5; // header, nVersionGroupId, lock_time, nExpiryHeight, hashType\n\n    baseBufferSize += 32 * 4; // 256 hashes: hashPrevouts, hashSequence, hashOutputs, hashJoinSplits\n\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig), we need extra space\n      baseBufferSize += 4 * 2; // input.index, input.sequence\n\n      baseBufferSize += 8; // value\n\n      baseBufferSize += 32; // input.hash\n\n      baseBufferSize += varSliceSize(prevOutScript); // prevOutScript\n    }\n\n    if (this.isSaplingCompatible()) {\n      baseBufferSize += 32 * 2; // hashShieldedSpends and hashShieldedOutputs\n\n      baseBufferSize += 8; // valueBalance\n    }\n\n    bufferWriter = new BufferWriter(Buffer.alloc(baseBufferSize));\n    bufferWriter.writeInt32(this.getHeader());\n    bufferWriter.writeUInt32(this.versionGroupId);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeSlice(hashJoinSplits);\n\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeSlice(hashShieldedSpends);\n      bufferWriter.writeSlice(hashShieldedOutputs);\n    }\n\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(this.expiryHeight);\n\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeUInt64(this.valueBalance);\n    }\n\n    bufferWriter.writeUInt32(hashType); // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig):\n\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // The input being signed (replacing the scriptSig with scriptCode + amount)\n      // The prevout may already be contained in hashPrevout, and the nSequence\n      // may already be contained in hashSequence.\n      var input = this.ins[inIndex];\n      bufferWriter.writeSlice(input.hash);\n      bufferWriter.writeUInt32(input.index);\n      bufferWriter.writeVarSlice(prevOutScript);\n      bufferWriter.writeUInt64(value);\n      bufferWriter.writeUInt32(input.sequence);\n    }\n\n    var personalization = Buffer.alloc(16);\n    var prefix = 'ZcashSigHash';\n    personalization.write(prefix);\n    personalization.writeUInt32LE(this.network.consensusBranchId[this.version], prefix.length);\n    return this.getBlake2bHash(bufferWriter.buffer, personalization);\n  } // TODO: support non overwinter transactions\n\n};\n\nTransaction.prototype.hashForWitnessV0 = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n  var hashPrevouts = this.getPrevoutHash(hashType);\n  var hashSequence = this.getSequenceHash(hashType);\n  var hashOutputs = this.getOutputsHash(hashType, inIndex);\n  var bufferWriter = new BufferWriter(Buffer.allocUnsafe(156 + varSliceSize(prevOutScript)));\n  var input = this.ins[inIndex];\n  bufferWriter.writeUInt32(this.version);\n  bufferWriter.writeSlice(hashPrevouts);\n  bufferWriter.writeSlice(hashSequence);\n  bufferWriter.writeSlice(input.hash);\n  bufferWriter.writeUInt32(input.index);\n  bufferWriter.writeVarSlice(prevOutScript);\n  bufferWriter.writeUInt64(value);\n  bufferWriter.writeUInt32(input.sequence);\n  bufferWriter.writeSlice(hashOutputs);\n  bufferWriter.writeUInt32(this.locktime);\n  bufferWriter.writeUInt32(hashType);\n  return bcrypto.hash256(bufferWriter.buffer);\n};\n/**\n * Hash transaction for signing a specific input for Bitcoin Cash.\n */\n\n\nTransaction.prototype.hashForCashSignature = function (inIndex, prevOutScript, inAmount, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer,\n  /* types.UInt8 */\n  types.Number, types.maybe(types.UInt53)), arguments); // This function works the way it does because Bitcoin Cash\n  // uses BIP143 as their replay protection, AND their algo\n  // includes `forkId | hashType`, AND since their forkId=0,\n  // this is a NOP, and has no difference to segwit. To support\n  // other forks, another parameter is required, and a new parameter\n  // would be required in the hashForWitnessV0 function, or\n  // it could be broken into two..\n  // BIP143 sighash activated in BitcoinCash via 0x40 bit\n\n  if (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) {\n    if (types.Null(inAmount)) {\n      throw new Error('Bitcoin Cash sighash requires value of input to be signed.');\n    }\n\n    return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, hashType);\n  } else {\n    return this.hashForSignature(inIndex, prevOutScript, hashType);\n  }\n};\n/**\n * Hash transaction for signing a specific input for Bitcoin Gold.\n */\n\n\nTransaction.prototype.hashForGoldSignature = function (inIndex, prevOutScript, inAmount, hashType, sigVersion) {\n  typeforce(types.tuple(types.UInt32, types.Buffer,\n  /* types.UInt8 */\n  types.Number, types.maybe(types.UInt53)), arguments); // Bitcoin Gold also implements segregated witness\n  // therefore we can pull out the setting of nForkHashType\n  // and pass it into the functions.\n\n  var nForkHashType = hashType;\n  var fUseForkId = (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) > 0;\n\n  if (fUseForkId) {\n    nForkHashType |= this.network.forkId << 8;\n  } // BIP143 sighash activated in BitcoinCash via 0x40 bit\n\n\n  if (sigVersion || fUseForkId) {\n    if (types.Null(inAmount)) {\n      throw new Error('Bitcoin Cash sighash requires value of input to be signed.');\n    }\n\n    return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, nForkHashType);\n  } else {\n    return this.hashForSignature(inIndex, prevOutScript, nForkHashType);\n  }\n};\n\nTransaction.prototype.getHash = function () {\n  return bcrypto.hash256(this.__toBuffer(undefined, undefined, false));\n};\n\nTransaction.prototype.getId = function () {\n  // transaction hash's are displayed in reverse order\n  return this.getHash().reverse().toString('hex');\n};\n\nTransaction.prototype.toBuffer = function (buffer, initialOffset) {\n  return this.__toBuffer(buffer, initialOffset, true);\n};\n\nTransaction.prototype.__toBuffer = function (buffer, initialOffset, __allowWitness) {\n  if (!buffer) buffer = Buffer.allocUnsafe(this.__byteLength(__allowWitness));\n  const bufferWriter = coins.isZcash(this.network) ? new ZcashBufferWriter(buffer, initialOffset || 0) : new BufferWriter(buffer, initialOffset || 0);\n\n  function writeUInt16(i) {\n    bufferWriter.offset = bufferWriter.buffer.writeUInt16LE(i, bufferWriter.offset);\n  }\n\n  if (this.isOverwinterCompatible()) {\n    var mask = this.overwintered ? 1 : 0;\n    bufferWriter.writeInt32(this.version | mask << 31); // Set overwinter bit\n\n    bufferWriter.writeUInt32(this.versionGroupId);\n  } else if (this.isDashSpecialTransaction()) {\n    writeUInt16(this.version);\n    writeUInt16(this.type);\n  } else {\n    bufferWriter.writeInt32(this.version);\n  }\n\n  var hasWitnesses = __allowWitness && this.hasWitnesses();\n\n  if (hasWitnesses) {\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n  }\n\n  bufferWriter.writeVarInt(this.ins.length);\n  this.ins.forEach(function (txIn) {\n    bufferWriter.writeSlice(txIn.hash);\n    bufferWriter.writeUInt32(txIn.index);\n    bufferWriter.writeVarSlice(txIn.script);\n    bufferWriter.writeUInt32(txIn.sequence);\n  });\n  bufferWriter.writeVarInt(this.outs.length);\n  this.outs.forEach(function (txOut) {\n    if (!txOut.valueBuffer) {\n      bufferWriter.writeUInt64(txOut.value);\n    } else {\n      bufferWriter.writeSlice(txOut.valueBuffer);\n    }\n\n    bufferWriter.writeVarSlice(txOut.script);\n  });\n\n  if (hasWitnesses) {\n    this.ins.forEach(function (input) {\n      bufferWriter.writeVector(input.witness);\n    });\n  }\n\n  bufferWriter.writeUInt32(this.locktime);\n\n  if (this.isOverwinterCompatible()) {\n    bufferWriter.writeUInt32(this.expiryHeight);\n  }\n\n  if (this.isSaplingCompatible()) {\n    bufferWriter.writeUInt64(this.valueBalance);\n    bufferWriter.writeVarInt(this.vShieldedSpend.length);\n    this.vShieldedSpend.forEach(function (shieldedSpend) {\n      bufferWriter.writeSlice(shieldedSpend.cv);\n      bufferWriter.writeSlice(shieldedSpend.anchor);\n      bufferWriter.writeSlice(shieldedSpend.nullifier);\n      bufferWriter.writeSlice(shieldedSpend.rk);\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sA);\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sB);\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sC);\n      bufferWriter.writeSlice(shieldedSpend.spendAuthSig);\n    });\n    bufferWriter.writeVarInt(this.vShieldedOutput.length);\n    this.vShieldedOutput.forEach(function (shieldedOutput) {\n      bufferWriter.writeSlice(shieldedOutput.cv);\n      bufferWriter.writeSlice(shieldedOutput.cmu);\n      bufferWriter.writeSlice(shieldedOutput.ephemeralKey);\n      bufferWriter.writeSlice(shieldedOutput.encCiphertext);\n      bufferWriter.writeSlice(shieldedOutput.outCiphertext);\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sA);\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sB);\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sC);\n    });\n  }\n\n  if (this.supportsJoinSplits()) {\n    bufferWriter.writeVarInt(this.joinsplits.length);\n    this.joinsplits.forEach(function (joinsplit) {\n      bufferWriter.writeUInt64(joinsplit.vpubOld);\n      bufferWriter.writeUInt64(joinsplit.vpubNew);\n      bufferWriter.writeSlice(joinsplit.anchor);\n      joinsplit.nullifiers.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier);\n      });\n      joinsplit.commitments.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier);\n      });\n      bufferWriter.writeSlice(joinsplit.ephemeralKey);\n      bufferWriter.writeSlice(joinsplit.randomSeed);\n      joinsplit.macs.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier);\n      });\n\n      if (this.isSaplingCompatible()) {\n        bufferWriter.writeSlice(joinsplit.zkproof.sA);\n        bufferWriter.writeSlice(joinsplit.zkproof.sB);\n        bufferWriter.writeSlice(joinsplit.zkproof.sC);\n      } else {\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gA);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gAPrime);\n        bufferWriter.writeCompressedG2(joinsplit.zkproof.gB);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gBPrime);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gC);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gCPrime);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gK);\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gH);\n      }\n\n      joinsplit.ciphertexts.forEach(function (ciphertext) {\n        bufferWriter.writeSlice(ciphertext);\n      });\n    }, this);\n\n    if (this.joinsplits.length > 0) {\n      bufferWriter.writeSlice(this.joinsplitPubkey);\n      bufferWriter.writeSlice(this.joinsplitSig);\n    }\n  }\n\n  if (this.isSaplingCompatible() && this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    bufferWriter.writeSlice(this.bindingSig);\n  }\n\n  if (this.isDashSpecialTransaction()) {\n    bufferWriter.writeVarSlice(this.extraPayload);\n  }\n\n  if (initialOffset !== undefined) return buffer.slice(initialOffset, bufferWriter.offset); // avoid slicing unless necessary\n  // TODO (https://github.com/BitGo/bitgo-utxo-lib/issues/11): we shouldn't have to slice the final buffer\n\n  return buffer.slice(0, bufferWriter.offset);\n};\n\nTransaction.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\n\nTransaction.prototype.setInputScript = function (index, scriptSig) {\n  typeforce(types.tuple(types.Number, types.Buffer), arguments);\n  this.ins[index].script = scriptSig;\n};\n\nTransaction.prototype.setWitness = function (index, witness) {\n  typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n  this.ins[index].witness = witness;\n};\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitgo-utxo-lib/src/transaction.js"],"names":["Buffer","require","bcrypto","bscript","BufferReader","BufferWriter","ZcashBufferReader","ZcashBufferWriter","coins","opcodes","networks","typeforce","types","varuint","blake2b","zcashVersion","varSliceSize","someScript","length","encodingLength","vectorSize","someVector","reduce","sum","witness","Transaction","network","bitcoin","version","locktime","ins","outs","isZcash","joinsplits","joinsplitPubkey","joinsplitSig","overwintered","versionGroupId","expiryHeight","valueBalance","vShieldedSpend","vShieldedOutput","bindingSig","isDash","type","extraPayload","alloc","DEFAULT_SEQUENCE","SIGHASH_ALL","SIGHASH_NONE","SIGHASH_SINGLE","SIGHASH_ANYONECANPAY","SIGHASH_BITCOINCASHBIP143","ADVANCED_TRANSACTION_MARKER","ADVANCED_TRANSACTION_FLAG","EMPTY_SCRIPT","allocUnsafe","EMPTY_WITNESS","ZERO","from","ONE","VALUE_UINT64_MAX","BLANK_OUTPUT","script","valueBuffer","DASH_NORMAL","DASH_PROVIDER_REGISTER","DASH_PROVIDER_UPDATE_SERVICE","DASH_PROVIDER_UPDATE_REGISTRAR","DASH_PROVIDER_UPDATE_REVOKE","DASH_COINBASE","DASH_QUORUM_COMMITMENT","fromBuffer","buffer","__noStrict","bufferReader","tx","readInt32","consensusBranchId","hasOwnProperty","Error","offset","marker","readUInt8","flag","hasWitnesses","isOverwinterCompatible","readUInt32","vinLen","readVarInt","i","push","hash","readSlice","index","readVarSlice","sequence","voutLen","value","readUInt64","readVector","isSaplingCompatible","readInt64","nShieldedSpend","readShieldedSpend","nShieldedOutput","readShieldedOutput","supportsJoinSplits","joinSplitsLen","readJoinSplit","isDashSpecialTransaction","fromHex","hex","isCoinbaseHash","Hash256bit","prototype","SAPLING","OVERWINTER","JOINSPLITS_SUPPORT","versionSupportsDashSpecialTransactions","isCoinbase","addInput","scriptSig","tuple","UInt32","maybe","arguments","Null","addOutput","scriptPubKey","Satoshi","some","x","weight","base","__byteLength","total","virtualSize","Math","ceil","byteLength","getShieldedSpendByteLength","getShieldedOutputByteLength","getJoinSplitByteLength","zcashTransactionByteLength","input","output","__allowWitness","clone","newTx","map","txIn","txOut","shieldedSpend","cv","anchor","nullifier","rk","zkproof","spendAuthSig","shieldedOutput","cmu","ephemeralKey","encCiphertext","outCiphertext","txJoinsplit","vpubOld","vpubNew","nullifiers","commitments","randomSeed","macs","ciphertexts","getHeader","mask","header","hashForSignature","inIndex","prevOutScript","hashType","Number","ourScript","compile","decompile","filter","OP_CODESEPARATOR","txTmp","forEach","y","writeInt32LE","__toBuffer","hash256","getBlake2bHash","bufferToHash","personalization","out","update","digest","getPrevoutHash","bufferWriter","writeSlice","writeUInt32","getSequenceHash","getOutputsHash","txOutsSize","writeUInt64","writeVarSlice","hashForZcashSignature","hashPrevouts","hashSequence","hashOutputs","hashJoinSplits","hashShieldedSpends","hashShieldedOutputs","baseBufferSize","writeInt32","prefix","write","writeUInt32LE","hashForWitnessV0","hashForCashSignature","inAmount","UInt53","hashForGoldSignature","sigVersion","nForkHashType","fUseForkId","forkId","getHash","undefined","getId","reverse","toString","toBuffer","initialOffset","writeUInt16","writeUInt16LE","writeUInt8","writeVarInt","writeVector","sA","sB","sC","joinsplit","writeCompressedG1","gA","gAPrime","writeCompressedG2","gB","gBPrime","gC","gCPrime","gK","gH","ciphertext","slice","toHex","setInputScript","setWitness","module","exports"],"mappings":"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","sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar bcrypto = require('./crypto')\nvar bscript = require('./script')\nvar { BufferReader, BufferWriter } = require('./bufferutils')\nvar { ZcashBufferReader, ZcashBufferWriter } = require('./forks/zcash/bufferutils')\nvar coins = require('./coins')\nvar opcodes = require('bitcoin-ops')\nvar networks = require('./networks')\nvar typeforce = require('typeforce')\nvar types = require('./types')\nvar varuint = require('varuint-bitcoin')\nvar blake2b = require('blake2b')\n\nvar zcashVersion = require('./forks/zcash/version')\n\nfunction varSliceSize (someScript) {\n  var length = someScript.length\n\n  return varuint.encodingLength(length) + length\n}\n\nfunction vectorSize (someVector) {\n  var length = someVector.length\n\n  return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n    return sum + varSliceSize(witness)\n  }, 0)\n}\n\n// By default, assume is a bitcoin transaction\nfunction Transaction (network = networks.bitcoin) {\n  this.version = 1\n  this.locktime = 0\n  this.ins = []\n  this.outs = []\n  this.network = network\n  if (coins.isZcash(network)) {\n    // ZCash version >= 2\n    this.joinsplits = []\n    this.joinsplitPubkey = []\n    this.joinsplitSig = []\n    // ZCash version >= 3\n    this.overwintered = 0  // 1 if the transaction is post overwinter upgrade, 0 otherwise\n    this.versionGroupId = 0  // 0x03C48270 (63210096) for overwinter and 0x892F2085 (2301567109) for sapling\n    this.expiryHeight = 0  // Block height after which this transactions will expire, or 0 to disable expiry\n    // ZCash version >= 4\n    this.valueBalance = 0\n    this.vShieldedSpend = []\n    this.vShieldedOutput = []\n    this.bindingSig = 0\n  }\n  if (coins.isDash(network)) {\n    // Dash version = 3\n    this.type = 0\n    this.extraPayload = Buffer.alloc(0)\n  }\n}\n\nTransaction.DEFAULT_SEQUENCE = 0xffffffff\nTransaction.SIGHASH_ALL = 0x01\nTransaction.SIGHASH_NONE = 0x02\nTransaction.SIGHASH_SINGLE = 0x03\nTransaction.SIGHASH_ANYONECANPAY = 0x80\nTransaction.SIGHASH_BITCOINCASHBIP143 = 0x40\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01\n\nvar EMPTY_SCRIPT = Buffer.allocUnsafe(0)\nvar EMPTY_WITNESS = []\nvar ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex')\nvar ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex')\n// Used to represent the absence of a value\nvar VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex')\nvar BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX\n}\n\nTransaction.DASH_NORMAL = 0\nTransaction.DASH_PROVIDER_REGISTER = 1\nTransaction.DASH_PROVIDER_UPDATE_SERVICE = 2\nTransaction.DASH_PROVIDER_UPDATE_REGISTRAR = 3\nTransaction.DASH_PROVIDER_UPDATE_REVOKE = 4\nTransaction.DASH_COINBASE = 5\nTransaction.DASH_QUORUM_COMMITMENT = 6\n\nTransaction.fromBuffer = function (buffer, network = networks.bitcoin, __noStrict) {\n  let bufferReader = new BufferReader(buffer)\n\n  let tx = new Transaction(network)\n  tx.version = bufferReader.readInt32()\n\n  if (coins.isZcash(network)) {\n    // Split the header into fOverwintered and nVersion\n    tx.overwintered = tx.version >>> 31  // Must be 1 for version 3 and up\n    tx.version = tx.version & 0x07FFFFFFF  // 3 for overwinter\n    if (!network.consensusBranchId.hasOwnProperty(tx.version)) {\n      throw new Error('Unsupported Zcash transaction')\n    }\n    bufferReader = new ZcashBufferReader(\n      bufferReader.buffer,\n      bufferReader.offset,\n      tx.version,\n    )\n  }\n\n  if (coins.isDash(network)) {\n    tx.type = tx.version >> 16\n    tx.version = tx.version & 0xffff\n    if (tx.version === 3 && (tx.type < Transaction.DASH_NORMAL || tx.type > Transaction.DASH_QUORUM_COMMITMENT)) {\n      throw new Error('Unsupported Dash transaction type')\n    }\n  }\n\n  var marker = bufferReader.readUInt8()\n  var flag = bufferReader.readUInt8()\n\n  var hasWitnesses = false\n  if (marker === Transaction.ADVANCED_TRANSACTION_MARKER &&\n      flag === Transaction.ADVANCED_TRANSACTION_FLAG &&\n      !coins.isZcash(network)) {\n    hasWitnesses = true\n  } else {\n    bufferReader.offset -= 2\n  }\n\n  if (tx.isOverwinterCompatible()) {\n    tx.versionGroupId = bufferReader.readUInt32()\n  }\n\n  var vinLen = bufferReader.readVarInt()\n  for (var i = 0; i < vinLen; ++i) {\n    tx.ins.push({\n      hash: bufferReader.readSlice(32),\n      index: bufferReader.readUInt32(),\n      script: bufferReader.readVarSlice(),\n      sequence: bufferReader.readUInt32(),\n      witness: EMPTY_WITNESS\n    })\n  }\n\n  var voutLen = bufferReader.readVarInt()\n  for (i = 0; i < voutLen; ++i) {\n    tx.outs.push({\n      value: bufferReader.readUInt64(),\n      script: bufferReader.readVarSlice()\n    })\n  }\n\n  if (hasWitnesses) {\n    for (i = 0; i < vinLen; ++i) {\n      tx.ins[i].witness = bufferReader.readVector()\n    }\n\n    // was this pointless?\n    if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data')\n  }\n\n  tx.locktime = bufferReader.readUInt32()\n\n  if (coins.isZcash(network)) {\n    if (tx.isOverwinterCompatible()) {\n      tx.expiryHeight = bufferReader.readUInt32()\n    }\n\n    if (tx.isSaplingCompatible()) {\n      tx.valueBalance = bufferReader.readInt64()\n      var nShieldedSpend = bufferReader.readVarInt()\n      for (i = 0; i < nShieldedSpend; ++i) {\n        tx.vShieldedSpend.push(bufferReader.readShieldedSpend())\n      }\n\n      var nShieldedOutput = bufferReader.readVarInt()\n      for (i = 0; i < nShieldedOutput; ++i) {\n        tx.vShieldedOutput.push(bufferReader.readShieldedOutput())\n      }\n    }\n\n    if (tx.supportsJoinSplits()) {\n      var joinSplitsLen = bufferReader.readVarInt()\n      for (i = 0; i < joinSplitsLen; ++i) {\n        tx.joinsplits.push(bufferReader.readJoinSplit())\n      }\n      if (joinSplitsLen > 0) {\n        tx.joinsplitPubkey = bufferReader.readSlice(32)\n        tx.joinsplitSig = bufferReader.readSlice(64)\n      }\n    }\n\n    if (tx.isSaplingCompatible() &&\n      tx.vShieldedSpend.length + tx.vShieldedOutput.length > 0) {\n      tx.bindingSig = bufferReader.readSlice(64)\n    }\n  }\n\n  if (tx.isDashSpecialTransaction()) {\n    tx.extraPayload = bufferReader.readVarSlice()\n  }\n\n  tx.network = network\n\n  if (__noStrict) return tx\n  if (bufferReader.offset !== buffer.length) throw new Error('Transaction has unexpected data')\n\n  return tx\n}\n\nTransaction.fromHex = function (hex, network) {\n  return Transaction.fromBuffer(Buffer.from(hex, 'hex'), network)\n}\n\nTransaction.isCoinbaseHash = function (buffer) {\n  typeforce(types.Hash256bit, buffer)\n  for (var i = 0; i < 32; ++i) {\n    if (buffer[i] !== 0) return false\n  }\n  return true\n}\n\nTransaction.prototype.isSaplingCompatible = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.SAPLING\n}\n\nTransaction.prototype.isOverwinterCompatible = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.OVERWINTER\n}\n\nTransaction.prototype.supportsJoinSplits = function () {\n  return coins.isZcash(this.network) && this.version >= zcashVersion.JOINSPLITS_SUPPORT\n}\n\nTransaction.prototype.versionSupportsDashSpecialTransactions = function () {\n  return coins.isDash(this.network) && this.version >= 3\n}\n\nTransaction.prototype.isDashSpecialTransaction = function () {\n  return this.versionSupportsDashSpecialTransactions() && this.type !== Transaction.DASH_NORMAL\n}\n\nTransaction.prototype.isCoinbase = function () {\n  return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash)\n}\n\nTransaction.prototype.addInput = function (hash, index, sequence, scriptSig) {\n  typeforce(types.tuple(\n    types.Hash256bit,\n    types.UInt32,\n    types.maybe(types.UInt32),\n    types.maybe(types.Buffer)\n  ), arguments)\n\n  if (types.Null(sequence)) {\n    sequence = Transaction.DEFAULT_SEQUENCE\n  }\n\n  // Add the input and return the input's index\n  return (this.ins.push({\n    hash: hash,\n    index: index,\n    script: scriptSig || EMPTY_SCRIPT,\n    sequence: sequence,\n    witness: EMPTY_WITNESS\n  }) - 1)\n}\n\nTransaction.prototype.addOutput = function (scriptPubKey, value) {\n  typeforce(types.tuple(types.Buffer, types.Satoshi), arguments)\n\n  // Add the output and return the output's index\n  return (this.outs.push({\n    script: scriptPubKey,\n    value: value\n  }) - 1)\n}\n\nTransaction.prototype.hasWitnesses = function () {\n  return this.ins.some(function (x) {\n    return x.witness.length !== 0\n  })\n}\n\nTransaction.prototype.weight = function () {\n  var base = this.__byteLength(false)\n  var total = this.__byteLength(true)\n  return base * 3 + total\n}\n\nTransaction.prototype.virtualSize = function () {\n  return Math.ceil(this.weight() / 4)\n}\n\nTransaction.prototype.byteLength = function () {\n  return this.__byteLength(true)\n}\n\nTransaction.prototype.getShieldedSpendByteLength = function () {\n  if (!this.isSaplingCompatible()) {\n    return 0\n  }\n\n  var byteLength = 0\n  byteLength += varuint.encodingLength(this.vShieldedSpend.length)  // nShieldedSpend\n  byteLength += (384 * this.vShieldedSpend.length)  // vShieldedSpend\n  return byteLength\n}\n\nTransaction.prototype.getShieldedOutputByteLength = function () {\n  if (!this.isSaplingCompatible()) {\n    return 0\n  }\n  var byteLength = 0\n  byteLength += varuint.encodingLength(this.vShieldedOutput.length)  // nShieldedOutput\n  byteLength += (948 * this.vShieldedOutput.length)  // vShieldedOutput\n  return byteLength\n}\n\nTransaction.prototype.getJoinSplitByteLength = function () {\n  if (!this.supportsJoinSplits()) {\n    return 0\n  }\n  var joinSplitsLen = this.joinsplits.length\n  var byteLength = 0\n  byteLength += varuint.encodingLength(joinSplitsLen)  // vJoinSplit\n\n  if (joinSplitsLen > 0) {\n    // Both pre and post Sapling JoinSplits are encoded with the following data:\n    // 8 vpub_old, 8 vpub_new, 32 anchor, joinSplitsLen * 32 nullifiers, joinSplitsLen * 32 commitments, 32 ephemeralKey\n    // 32 ephemeralKey, 32 randomSeed, joinsplit.macs.length * 32 vmacs\n    if (this.isSaplingCompatible()) {\n      byteLength += 1698 * joinSplitsLen  // vJoinSplit using JSDescriptionGroth16\n    } else {\n      byteLength += 1802 * joinSplitsLen  // vJoinSplit using JSDescriptionPHGR13\n    }\n    byteLength += 32  // joinSplitPubKey\n    byteLength += 64  // joinSplitSig\n  }\n\n  return byteLength\n}\n\nTransaction.prototype.zcashTransactionByteLength = function () {\n  if (!coins.isZcash(this.network)) {\n    throw new Error('zcashTransactionByteLength can only be called when using Zcash network')\n  }\n  var byteLength = 0\n  byteLength += 4  // Header\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4  // nVersionGroupId\n  }\n  byteLength += varuint.encodingLength(this.ins.length)  // tx_in_count\n  byteLength += this.ins.reduce(function (sum, input) { return sum + 40 + varSliceSize(input.script) }, 0)  // tx_in\n  byteLength += varuint.encodingLength(this.outs.length)  // tx_out_count\n  byteLength += this.outs.reduce(function (sum, output) { return sum + 8 + varSliceSize(output.script) }, 0)  // tx_out\n  byteLength += 4  // lock_time\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4  // nExpiryHeight\n  }\n  if (this.isSaplingCompatible()) {\n    byteLength += 8  // valueBalance\n    byteLength += this.getShieldedSpendByteLength()\n    byteLength += this.getShieldedOutputByteLength()\n  }\n  if (this.supportsJoinSplits()) {\n    byteLength += this.getJoinSplitByteLength()\n  }\n  if (this.isSaplingCompatible() &&\n    this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    byteLength += 64  // bindingSig\n  }\n  return byteLength\n}\n\nTransaction.prototype.__byteLength = function (__allowWitness) {\n  var hasWitnesses = __allowWitness && this.hasWitnesses()\n\n  if (coins.isZcash(this.network)) {\n    return this.zcashTransactionByteLength()\n  }\n\n  return (\n    (hasWitnesses ? 10 : 8) +\n    varuint.encodingLength(this.ins.length) +\n    varuint.encodingLength(this.outs.length) +\n    this.ins.reduce(function (sum, input) { return sum + 40 + varSliceSize(input.script) }, 0) +\n    this.outs.reduce(function (sum, output) { return sum + 8 + varSliceSize(output.script) }, 0) +\n    (this.isDashSpecialTransaction() ? varSliceSize(this.extraPayload) : 0) +\n    (hasWitnesses ? this.ins.reduce(function (sum, input) { return sum + vectorSize(input.witness) }, 0) : 0)\n  )\n}\n\nTransaction.prototype.clone = function () {\n  var newTx = new Transaction(this.network)\n  newTx.version = this.version\n  newTx.locktime = this.locktime\n  newTx.network = this.network\n\n  if (coins.isDash(this.network)) {\n    newTx.type = this.type\n    newTx.extraPayload = this.extraPayload\n  }\n\n  if (this.isOverwinterCompatible()) {\n    newTx.overwintered = this.overwintered\n    newTx.versionGroupId = this.versionGroupId\n    newTx.expiryHeight = this.expiryHeight\n  }\n  if (this.isSaplingCompatible()) {\n    newTx.valueBalance = this.valueBalance\n  }\n\n  newTx.ins = this.ins.map(function (txIn) {\n    return {\n      hash: txIn.hash,\n      index: txIn.index,\n      script: txIn.script,\n      sequence: txIn.sequence,\n      witness: txIn.witness\n    }\n  })\n\n  newTx.outs = this.outs.map(function (txOut) {\n    return {\n      script: txOut.script,\n      value: txOut.value\n    }\n  })\n  if (this.isSaplingCompatible()) {\n    newTx.vShieldedSpend = this.vShieldedSpend.map(function (shieldedSpend) {\n      return {\n        cv: shieldedSpend.cv,\n        anchor: shieldedSpend.anchor,\n        nullifier: shieldedSpend.nullifier,\n        rk: shieldedSpend.rk,\n        zkproof: shieldedSpend.zkproof,\n        spendAuthSig: shieldedSpend.spendAuthSig\n      }\n    })\n\n    newTx.vShieldedOutput = this.vShieldedOutput.map(function (shieldedOutput) {\n      return {\n        cv: shieldedOutput.cv,\n        cmu: shieldedOutput.cmu,\n        ephemeralKey: shieldedOutput.ephemeralKey,\n        encCiphertext: shieldedOutput.encCiphertext,\n        outCiphertext: shieldedOutput.outCiphertext,\n        zkproof: shieldedOutput.zkproof\n      }\n    })\n  }\n\n  if (this.supportsJoinSplits()) {\n    newTx.joinsplits = this.joinsplits.map(function (txJoinsplit) {\n      return {\n        vpubOld: txJoinsplit.vpubOld,\n        vpubNew: txJoinsplit.vpubNew,\n        anchor: txJoinsplit.anchor,\n        nullifiers: txJoinsplit.nullifiers,\n        commitments: txJoinsplit.commitments,\n        ephemeralKey: txJoinsplit.ephemeralKey,\n        randomSeed: txJoinsplit.randomSeed,\n        macs: txJoinsplit.macs,\n        zkproof: txJoinsplit.zkproof,\n        ciphertexts: txJoinsplit.ciphertexts\n      }\n    })\n\n    newTx.joinsplitPubkey = this.joinsplitPubkey\n    newTx.joinsplitSig = this.joinsplitSig\n  }\n\n  if (this.isSaplingCompatible() && this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    newTx.bindingSig = this.bindingSig\n  }\n\n  return newTx\n}\n\n/**\n * Get Zcash header or version\n * @returns {number}\n */\nTransaction.prototype.getHeader = function () {\n  var mask = (this.overwintered ? 1 : 0)\n  var header = this.version | (mask << 31)\n  return header\n}\n\n/**\n * Hash transaction for signing a specific input.\n *\n * Bitcoin uses a different hash for each signed transaction input.\n * This method copies the transaction, makes the necessary changes based on the\n * hashType, and then hashes the result.\n * This hash can then be used to sign the provided transaction input.\n */\nTransaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number), arguments)\n\n  // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n  if (inIndex >= this.ins.length) return ONE\n\n  // ignore OP_CODESEPARATOR\n  var ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n    return x !== opcodes.OP_CODESEPARATOR\n  }))\n\n  var txTmp = this.clone()\n\n  // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n  if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n    txTmp.outs = []\n\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, i) {\n      if (i === inIndex) return\n\n      input.sequence = 0\n    })\n\n    // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n    if (inIndex >= this.outs.length) return ONE\n\n    // truncate outputs after\n    txTmp.outs.length = inIndex + 1\n\n    // \"blank\" outputs before\n    for (var i = 0; i < inIndex; i++) {\n      txTmp.outs[i] = BLANK_OUTPUT\n    }\n\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, y) {\n      if (y === inIndex) return\n\n      input.sequence = 0\n    })\n  }\n\n  // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n    txTmp.ins = [txTmp.ins[inIndex]]\n    txTmp.ins[0].script = ourScript\n\n    // SIGHASH_ALL: only ignore input scripts\n  } else {\n    // \"blank\" others input scripts\n    txTmp.ins.forEach(function (input) { input.script = EMPTY_SCRIPT })\n    txTmp.ins[inIndex].script = ourScript\n  }\n\n  // serialize and hash\n  var buffer = Buffer.allocUnsafe(txTmp.__byteLength(false) + 4)\n  buffer.writeInt32LE(hashType, buffer.length - 4)\n  txTmp.__toBuffer(buffer, 0, false)\n\n  return bcrypto.hash256(buffer)\n}\n\n/**\n * Blake2b hashing algorithm for Zcash\n * @param bufferToHash\n * @param personalization\n * @returns 256-bit BLAKE2b hash\n */\nTransaction.prototype.getBlake2bHash = function (bufferToHash, personalization) {\n  var out = Buffer.allocUnsafe(32)\n  return blake2b(out.length, null, null, Buffer.from(personalization)).update(bufferToHash).digest(out)\n}\n\n/**\n * Build a hash for all or none of the transaction inputs depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getPrevoutHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(36 * this.ins.length))\n\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeSlice(txIn.hash)\n      bufferWriter.writeUInt32(txIn.index)\n    })\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashPrevoutHash')\n    }\n    return bcrypto.hash256(bufferWriter.buffer)\n  }\n  return ZERO\n}\n\n/**\n * Build a hash for all or none of the transactions inputs sequence numbers depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getSequenceHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) &&\n    (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n    (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(4 * this.ins.length))\n\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeUInt32(txIn.sequence)\n    })\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashSequencHash')\n    }\n    return bcrypto.hash256(bufferWriter.buffer)\n  }\n  return ZERO\n}\n\n/**\n * Build a hash for one, all or none of the transaction outputs depending on the hashtype\n * @param hashType\n * @param inIndex\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getOutputsHash = function (hashType, inIndex) {\n  var bufferWriter\n  if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    // Find out the size of the outputs and write them\n    var txOutsSize = this.outs.reduce(function (sum, output) {\n      return sum + 8 + varSliceSize(output.script)\n    }, 0)\n\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(txOutsSize))\n\n    this.outs.forEach(function (out) {\n      bufferWriter.writeUInt64(out.value)\n      bufferWriter.writeVarSlice(out.script)\n    })\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash')\n    }\n    return bcrypto.hash256(bufferWriter.buffer)\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n    // Write only the output specified in inIndex\n    var output = this.outs[inIndex]\n\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(8 + varSliceSize(output.script)))\n    bufferWriter.writeUInt64(output.value)\n    bufferWriter.writeVarSlice(output.script)\n\n    if (coins.isZcash(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash')\n    }\n    return bcrypto.hash256(bufferWriter.buffer)\n  }\n  return ZERO\n}\n\n/**\n * Hash transaction for signing a transparent transaction in Zcash. Protected transactions are not supported.\n * @param inIndex\n * @param prevOutScript\n * @param value\n * @param hashType\n * @returns double SHA-256 or 256-bit BLAKE2b hash\n */\nTransaction.prototype.hashForZcashSignature = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments)\n  if (!coins.isZcash(this.network)) {\n    throw new Error('hashForZcashSignature can only be called when using Zcash network')\n  }\n  if (this.joinsplits.length > 0) {\n    throw new Error('Hash signature for Zcash protected transactions is not supported')\n  }\n\n  if (inIndex >= this.ins.length && inIndex !== VALUE_UINT64_MAX) {\n    throw new Error('Input index is out of range')\n  }\n\n  if (this.isOverwinterCompatible()) {\n    var hashPrevouts = this.getPrevoutHash(hashType)\n    var hashSequence = this.getSequenceHash(hashType)\n    var hashOutputs = this.getOutputsHash(hashType, inIndex)\n    var hashJoinSplits = ZERO\n    var hashShieldedSpends = ZERO\n    var hashShieldedOutputs = ZERO\n\n    var bufferWriter\n    var baseBufferSize = 0\n    baseBufferSize += 4 * 5  // header, nVersionGroupId, lock_time, nExpiryHeight, hashType\n    baseBufferSize += 32 * 4  // 256 hashes: hashPrevouts, hashSequence, hashOutputs, hashJoinSplits\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig), we need extra space\n      baseBufferSize += 4 * 2  // input.index, input.sequence\n      baseBufferSize += 8  // value\n      baseBufferSize += 32  // input.hash\n      baseBufferSize += varSliceSize(prevOutScript)  // prevOutScript\n    }\n    if (this.isSaplingCompatible()) {\n      baseBufferSize += 32 * 2  // hashShieldedSpends and hashShieldedOutputs\n      baseBufferSize += 8  // valueBalance\n    }\n    bufferWriter = new BufferWriter(Buffer.alloc(baseBufferSize))\n\n    bufferWriter.writeInt32(this.getHeader())\n    bufferWriter.writeUInt32(this.versionGroupId)\n    bufferWriter.writeSlice(hashPrevouts)\n    bufferWriter.writeSlice(hashSequence)\n    bufferWriter.writeSlice(hashOutputs)\n    bufferWriter.writeSlice(hashJoinSplits)\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeSlice(hashShieldedSpends)\n      bufferWriter.writeSlice(hashShieldedOutputs)\n    }\n    bufferWriter.writeUInt32(this.locktime)\n    bufferWriter.writeUInt32(this.expiryHeight)\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeUInt64(this.valueBalance)\n    }\n    bufferWriter.writeUInt32(hashType)\n\n    // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig):\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // The input being signed (replacing the scriptSig with scriptCode + amount)\n      // The prevout may already be contained in hashPrevout, and the nSequence\n      // may already be contained in hashSequence.\n      var input = this.ins[inIndex]\n      bufferWriter.writeSlice(input.hash)\n      bufferWriter.writeUInt32(input.index)\n      bufferWriter.writeVarSlice(prevOutScript)\n      bufferWriter.writeUInt64(value)\n      bufferWriter.writeUInt32(input.sequence)\n    }\n\n    var personalization = Buffer.alloc(16)\n    var prefix = 'ZcashSigHash'\n    personalization.write(prefix)\n    personalization.writeUInt32LE(this.network.consensusBranchId[this.version], prefix.length)\n\n    return this.getBlake2bHash(bufferWriter.buffer, personalization)\n  }\n  // TODO: support non overwinter transactions\n}\n\nTransaction.prototype.hashForWitnessV0 = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments)\n\n  var hashPrevouts = this.getPrevoutHash(hashType)\n  var hashSequence = this.getSequenceHash(hashType)\n  var hashOutputs = this.getOutputsHash(hashType, inIndex)\n\n  var bufferWriter = new BufferWriter(Buffer.allocUnsafe(156 + varSliceSize(prevOutScript)))\n  var input = this.ins[inIndex]\n  bufferWriter.writeUInt32(this.version)\n  bufferWriter.writeSlice(hashPrevouts)\n  bufferWriter.writeSlice(hashSequence)\n  bufferWriter.writeSlice(input.hash)\n  bufferWriter.writeUInt32(input.index)\n  bufferWriter.writeVarSlice(prevOutScript)\n  bufferWriter.writeUInt64(value)\n  bufferWriter.writeUInt32(input.sequence)\n  bufferWriter.writeSlice(hashOutputs)\n  bufferWriter.writeUInt32(this.locktime)\n  bufferWriter.writeUInt32(hashType)\n  return bcrypto.hash256(bufferWriter.buffer)\n}\n\n/**\n * Hash transaction for signing a specific input for Bitcoin Cash.\n */\nTransaction.prototype.hashForCashSignature = function (inIndex, prevOutScript, inAmount, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number, types.maybe(types.UInt53)), arguments)\n\n  // This function works the way it does because Bitcoin Cash\n  // uses BIP143 as their replay protection, AND their algo\n  // includes `forkId | hashType`, AND since their forkId=0,\n  // this is a NOP, and has no difference to segwit. To support\n  // other forks, another parameter is required, and a new parameter\n  // would be required in the hashForWitnessV0 function, or\n  // it could be broken into two..\n\n  // BIP143 sighash activated in BitcoinCash via 0x40 bit\n  if (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) {\n    if (types.Null(inAmount)) {\n      throw new Error('Bitcoin Cash sighash requires value of input to be signed.')\n    }\n    return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, hashType)\n  } else {\n    return this.hashForSignature(inIndex, prevOutScript, hashType)\n  }\n}\n\n/**\n * Hash transaction for signing a specific input for Bitcoin Gold.\n */\nTransaction.prototype.hashForGoldSignature = function (inIndex, prevOutScript, inAmount, hashType, sigVersion) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number, types.maybe(types.UInt53)), arguments)\n\n  // Bitcoin Gold also implements segregated witness\n  // therefore we can pull out the setting of nForkHashType\n  // and pass it into the functions.\n\n  var nForkHashType = hashType\n  var fUseForkId = (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) > 0\n  if (fUseForkId) {\n    nForkHashType |= this.network.forkId << 8\n  }\n\n  // BIP143 sighash activated in BitcoinCash via 0x40 bit\n  if (sigVersion || fUseForkId) {\n    if (types.Null(inAmount)) {\n      throw new Error('Bitcoin Cash sighash requires value of input to be signed.')\n    }\n    return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, nForkHashType)\n  } else {\n    return this.hashForSignature(inIndex, prevOutScript, nForkHashType)\n  }\n}\n\nTransaction.prototype.getHash = function () {\n  return bcrypto.hash256(this.__toBuffer(undefined, undefined, false))\n}\n\nTransaction.prototype.getId = function () {\n  // transaction hash's are displayed in reverse order\n  return this.getHash().reverse().toString('hex')\n}\n\nTransaction.prototype.toBuffer = function (buffer, initialOffset) {\n  return this.__toBuffer(buffer, initialOffset, true)\n}\n\nTransaction.prototype.__toBuffer = function (buffer, initialOffset, __allowWitness) {\n  if (!buffer) buffer = Buffer.allocUnsafe(this.__byteLength(__allowWitness))\n\n  const bufferWriter = coins.isZcash(this.network)\n    ? new ZcashBufferWriter(buffer, initialOffset || 0)\n    : new BufferWriter(buffer, initialOffset || 0)\n\n  function writeUInt16 (i) {\n    bufferWriter.offset = bufferWriter.buffer.writeUInt16LE(i, bufferWriter.offset)\n  }\n\n  if (this.isOverwinterCompatible()) {\n    var mask = (this.overwintered ? 1 : 0)\n    bufferWriter.writeInt32(this.version | (mask << 31))  // Set overwinter bit\n    bufferWriter.writeUInt32(this.versionGroupId)\n  } else if (this.isDashSpecialTransaction()) {\n    writeUInt16(this.version)\n    writeUInt16(this.type)\n  } else {\n    bufferWriter.writeInt32(this.version)\n  }\n\n  var hasWitnesses = __allowWitness && this.hasWitnesses()\n\n  if (hasWitnesses) {\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER)\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG)\n  }\n\n  bufferWriter.writeVarInt(this.ins.length)\n\n  this.ins.forEach(function (txIn) {\n    bufferWriter.writeSlice(txIn.hash)\n    bufferWriter.writeUInt32(txIn.index)\n    bufferWriter.writeVarSlice(txIn.script)\n    bufferWriter.writeUInt32(txIn.sequence)\n  })\n\n  bufferWriter.writeVarInt(this.outs.length)\n  this.outs.forEach(function (txOut) {\n    if (!txOut.valueBuffer) {\n      bufferWriter.writeUInt64(txOut.value)\n    } else {\n      bufferWriter.writeSlice(txOut.valueBuffer)\n    }\n\n    bufferWriter.writeVarSlice(txOut.script)\n  })\n\n  if (hasWitnesses) {\n    this.ins.forEach(function (input) {\n      bufferWriter.writeVector(input.witness)\n    })\n  }\n\n  bufferWriter.writeUInt32(this.locktime)\n\n  if (this.isOverwinterCompatible()) {\n    bufferWriter.writeUInt32(this.expiryHeight)\n  }\n\n  if (this.isSaplingCompatible()) {\n    bufferWriter.writeUInt64(this.valueBalance)\n\n    bufferWriter.writeVarInt(this.vShieldedSpend.length)\n    this.vShieldedSpend.forEach(function (shieldedSpend) {\n      bufferWriter.writeSlice(shieldedSpend.cv)\n      bufferWriter.writeSlice(shieldedSpend.anchor)\n      bufferWriter.writeSlice(shieldedSpend.nullifier)\n      bufferWriter.writeSlice(shieldedSpend.rk)\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sA)\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sB)\n      bufferWriter.writeSlice(shieldedSpend.zkproof.sC)\n      bufferWriter.writeSlice(shieldedSpend.spendAuthSig)\n    })\n    bufferWriter.writeVarInt(this.vShieldedOutput.length)\n    this.vShieldedOutput.forEach(function (shieldedOutput) {\n      bufferWriter.writeSlice(shieldedOutput.cv)\n      bufferWriter.writeSlice(shieldedOutput.cmu)\n      bufferWriter.writeSlice(shieldedOutput.ephemeralKey)\n      bufferWriter.writeSlice(shieldedOutput.encCiphertext)\n      bufferWriter.writeSlice(shieldedOutput.outCiphertext)\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sA)\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sB)\n      bufferWriter.writeSlice(shieldedOutput.zkproof.sC)\n    })\n  }\n\n  if (this.supportsJoinSplits()) {\n    bufferWriter.writeVarInt(this.joinsplits.length)\n    this.joinsplits.forEach(function (joinsplit) {\n      bufferWriter.writeUInt64(joinsplit.vpubOld)\n      bufferWriter.writeUInt64(joinsplit.vpubNew)\n      bufferWriter.writeSlice(joinsplit.anchor)\n      joinsplit.nullifiers.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier)\n      })\n      joinsplit.commitments.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier)\n      })\n      bufferWriter.writeSlice(joinsplit.ephemeralKey)\n      bufferWriter.writeSlice(joinsplit.randomSeed)\n      joinsplit.macs.forEach(function (nullifier) {\n        bufferWriter.writeSlice(nullifier)\n      })\n      if (this.isSaplingCompatible()) {\n        bufferWriter.writeSlice(joinsplit.zkproof.sA)\n        bufferWriter.writeSlice(joinsplit.zkproof.sB)\n        bufferWriter.writeSlice(joinsplit.zkproof.sC)\n      } else {\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gA)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gAPrime)\n        bufferWriter.writeCompressedG2(joinsplit.zkproof.gB)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gBPrime)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gC)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gCPrime)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gK)\n        bufferWriter.writeCompressedG1(joinsplit.zkproof.gH)\n      }\n      joinsplit.ciphertexts.forEach(function (ciphertext) {\n        bufferWriter.writeSlice(ciphertext)\n      })\n    }, this)\n    if (this.joinsplits.length > 0) {\n      bufferWriter.writeSlice(this.joinsplitPubkey)\n      bufferWriter.writeSlice(this.joinsplitSig)\n    }\n  }\n\n  if (this.isSaplingCompatible() && this.vShieldedSpend.length + this.vShieldedOutput.length > 0) {\n    bufferWriter.writeSlice(this.bindingSig)\n  }\n\n  if (this.isDashSpecialTransaction()) {\n    bufferWriter.writeVarSlice(this.extraPayload)\n  }\n\n  if (initialOffset !== undefined) return buffer.slice(initialOffset, bufferWriter.offset)\n  // avoid slicing unless necessary\n  // TODO (https://github.com/BitGo/bitgo-utxo-lib/issues/11): we shouldn't have to slice the final buffer\n  return buffer.slice(0, bufferWriter.offset)\n}\n\nTransaction.prototype.toHex = function () {\n  return this.toBuffer().toString('hex')\n}\n\nTransaction.prototype.setInputScript = function (index, scriptSig) {\n  typeforce(types.tuple(types.Number, types.Buffer), arguments)\n\n  this.ins[index].script = scriptSig\n}\n\nTransaction.prototype.setWitness = function (index, witness) {\n  typeforce(types.tuple(types.Number, [types.Buffer]), arguments)\n\n  this.ins[index].witness = witness\n}\n\nmodule.exports = Transaction\n"]},"metadata":{},"sourceType":"script"}