{"ast":null,"code":"var Address = require('../address');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Opcode = require('../opcode');\n\nvar PublicKey = require('../publickey');\n\nvar Signature = require('../crypto/signature');\n\nvar Networks = require('../networks');\n\nvar $ = require('../util/preconditions');\n\nvar _ = require('lodash');\n\nvar errors = require('../errors');\n\nvar buffer = require('buffer');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\n\n\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (_.isString(from)) {\n    return Script.fromString(from);\n  } else if (_.isObject(from) && _.isArray(from.chunks)) {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  $.checkArgument(_.isArray(obj.chunks));\n  this.chunks = obj.chunks;\n  return this;\n};\n\nScript.fromBuffer = function (buffer) {\n  var script = new Script();\n  script.chunks = [];\n  var br = new BufferReader(buffer);\n\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n      var len, buf;\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function () {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function (str) {\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = Buffer.from(tokens[i], 'hex');\n      var opcodenum;\n      var len = buf.length;\n\n      if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n        opcodenum = len;\n      } else if (len < Math.pow(2, 8)) {\n        opcodenum = Opcode.OP_PUSHDATA1;\n      } else if (len < Math.pow(2, 16)) {\n        opcodenum = Opcode.OP_PUSHDATA2;\n      } else if (len < Math.pow(2, 32)) {\n        opcodenum = Opcode.OP_PUSHDATA4;\n      }\n\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.fromHex = function (str) {\n  return new Script(Buffer.from(str, 'hex'));\n};\n\nScript.fromString = function (str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(Buffer.from(str, 'hex'));\n  }\n\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype._chunkToString = function (chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = type === 'asm';\n  var str = '';\n\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      if (asm) {\n        // A few cases where the opcode name differs from reverseMap\n        // aside from 1 to 16 data pushes.\n        if (opcodenum === 0) {\n          // OP_0 -> 0\n          str = str + ' 0';\n        } else if (opcodenum === 79) {\n          // OP_1NEGATE -> 1\n          str = str + ' -1';\n        } else {\n          str = str + ' ' + Opcode(opcodenum).toString();\n        }\n      } else {\n        str = str + ' ' + Opcode(opcodenum).toString();\n      }\n    } else {\n      var numstr = opcodenum.toString(16);\n\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (!asm && (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4)) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n\n  return str;\n};\n\nScript.prototype.toASM = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function () {\n  return '<Script: ' + this.toString() + '>';\n}; // script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\n\n\nScript.prototype.isPublicKeyHashOut = function () {\n  return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === Opcode.OP_DUP && this.chunks[1].opcodenum === Opcode.OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY && this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\n\n\nScript.prototype.isPublicKeyHashIn = function () {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n\n    if (signatureBuf && signatureBuf.length && pubkeyBuf && pubkeyBuf.length) {\n      var version = pubkeyBuf[0];\n\n      if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nScript.prototype.getPublicKey = function () {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function () {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n/**\n * @returns {boolean} if this is a public key output script\n */\n\n\nScript.prototype.isPublicKeyOut = function () {\n  if (this.chunks.length === 2 && this.chunks[0].buf && this.chunks[0].buf.length && this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n\n    if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\n\n\nScript.prototype.isPublicKeyIn = function () {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a p2sh output script\n */\n\n\nScript.prototype.isScriptHashOut = function () {\n  var buf = this.toBuffer();\n  return buf.length === 23 && buf[0] === Opcode.OP_HASH160 && buf[1] === 0x14 && buf[buf.length - 1] === Opcode.OP_EQUAL;\n};\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\n\n\nScript.prototype.isScriptHashIn = function () {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n\n    throw e;\n  }\n\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\n\n\nScript.prototype.isMultisigOut = function () {\n  return this.chunks.length > 3 && Opcode.isSmallIntOp(this.chunks[0].opcodenum) && this.chunks.slice(1, this.chunks.length - 2).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf);\n  }) && Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) && this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG;\n};\n/**\n * @returns {boolean} if this is a multisig input script\n */\n\n\nScript.prototype.isMultisigIn = function () {\n  return this.chunks.length >= 2 && this.chunks[0].opcodenum === 0 && this.chunks.slice(1, this.chunks.length).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf) && Signature.isTxDER(obj.buf);\n  });\n};\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\n\n\nScript.prototype.isDataOut = function () {\n  var step1 = this.chunks.length >= 1 && this.chunks[0].opcodenum === Opcode.OP_RETURN && this.toBuffer().length <= 223; // 223 instead of 220 because (+1 for OP_RETURN, +2 for the pushdata opcodes)\n\n  if (!step1) return false;\n  var chunks = this.chunks.slice(1);\n  var script2 = new Script({\n    chunks: chunks\n  });\n  return script2.isPushOnly();\n};\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\n\n\nScript.prototype.getData = function () {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return Buffer.alloc(0);\n    } else {\n      return Buffer.from(this.chunks[1].buf);\n    }\n  }\n\n  if (this.isPublicKeyHashOut()) {\n    return Buffer.from(this.chunks[2].buf);\n  }\n\n  throw new Error('Unrecognized script type to get data from');\n};\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\n\n\nScript.prototype.isPushOnly = function () {\n  return _.every(this.chunks, function (chunk) {\n    return chunk.opcodenum <= Opcode.OP_16 || chunk.opcodenum === Opcode.OP_PUSHDATA1 || chunk.opcodenum === Opcode.OP_PUSHDATA2 || chunk.opcodenum === Opcode.OP_PUSHDATA4;\n  });\n};\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\nScript.OP_RETURN_STANDARD_SIZE = 220;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classify = function () {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classifyOutput = function () {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classifyInput = function () {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n\n  return Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if script is one of the known types\n */\n\n\nScript.prototype.isStandard = function () {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n}; // Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\n\n\nScript.prototype.prepend = function (obj) {\n  this._addByType(obj, true);\n\n  return this;\n};\n/**\n * Compares a script with another script\n */\n\n\nScript.prototype.equals = function (script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n\n  var i;\n\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\n\n\nScript.prototype.add = function (obj) {\n  this._addByType(obj, false);\n\n  return this;\n};\n\nScript.prototype._addByType = function (obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function (op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function (opcode, prepend) {\n  var op;\n\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype._addBuffer = function (buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype.removeCodeseparators = function () {\n  var chunks = [];\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n\n  this.chunks = chunks;\n  return this;\n}; // high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\n\n\nScript.buildMultisigOut = function (publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length, 'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\n\n\nScript.buildMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n\n  if (opts.signingMethod === \"schnorr\" && opts.checkBits) {\n    // Spec according to https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-11-15-schnorrmultisig.md#scriptsig-size\n    let checkBitsString = Buffer.from(opts.checkBits).reverse().join('');\n    let checkBitsDecimal = parseInt(checkBitsString, 2);\n    let checkBitsHex = parseInt(checkBitsDecimal.toString(16), 16);\n    let N = pubkeys.length; // N should only be 1-20\n\n    if (N >= 1 && N <= 4) {\n      s.add(Opcode(checkBitsHex));\n    } else if (N >= 5 && N <= 8) {\n      if (checkBitsHex === 0x81) {\n        s.add(Opcode(\"OP_1NEGATE\")); // OP_1NEGATE\n      } else if (checkBitsHex > 0x10) {\n        s.add(0x01);\n        s.add(checkBitsHex);\n      } else {\n        s.add(Opcode(checkBitsHex));\n      }\n    } else if (N >= 9 && N <= 16) {\n      s.add(0x02);\n      s.add(checkBitsHex);\n    } else if (N >= 17 && N <= 20) {\n      s.add(0x03);\n      s.add(checkBitsHex);\n    }\n  } else {\n    s.add(Opcode.OP_0); // ecdsa schnorr mode; multisig dummy param of 0\n  }\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  return s;\n};\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n * @param {Uint8Array} opts.checkBits bitfield map 1 or 0 to check which signatures to map against public keys for verification in schnorr multisig mode\n * @param {String} opts.signingMethod method with which input will be signed \"ecdsa\" or \"schnorr\"\n *\n * @returns {Script}\n */\n\n\nScript.buildP2SHMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n\n  if (opts.signingMethod === \"schnorr\" && opts.checkBits) {\n    // Spec according to https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-11-15-schnorrmultisig.md#scriptsig-size\n    let checkBitsString = Buffer.from(opts.checkBits).reverse().join('');\n    let checkBitsDecimal = parseInt(checkBitsString, 2);\n    let checkBitsHex = parseInt(checkBitsDecimal.toString(16), 16);\n    let N = pubkeys.length; // N should only be 1-20\n\n    if (N >= 1 && N <= 4) {\n      s.add(Opcode.smallInt(checkBitsDecimal));\n    } else if (N >= 5 && N <= 8) {\n      if (checkBitsHex === 0x81) {\n        s.add(Opcode(\"OP_1NEGATE\")); // OP_1NEGATE\n      } else if (checkBitsHex > 0x10) {\n        s.add(0x01);\n        s.add(checkBitsHex);\n      } else {\n        s.add(Opcode.smallInt(checkBitsDecimal));\n      }\n    } else if (N >= 9 && N <= 16) {\n      s.add(0x02);\n      s.add(checkBitsHex);\n    } else if (N >= 17 && N <= 20) {\n      s.add(0x03);\n      s.add(checkBitsHex);\n    }\n  } else {\n    s.add(Opcode.OP_0); // ecdsa schnorr mode; multisig dummy param of 0\n  }\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\n\n\nScript.buildPublicKeyHashOut = function (to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_DUP).add(Opcode.OP_HASH160).add(to.hashBuffer).add(Opcode.OP_EQUALVERIFY).add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\n\n\nScript.buildPublicKeyOut = function (pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer()).add(Opcode.OP_CHECKSIG);\n  return s;\n};\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\n\n\nScript.buildDataOut = function (data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n\n  if (_.isString(data)) {\n    data = Buffer.from(data, encoding);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n\n  return s;\n};\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\n\n\nScript.buildScriptHashOut = function (script) {\n  $.checkArgument(script instanceof Script || script instanceof Address && script.isPayToScriptHash());\n  var s = new Script();\n  s.add(Opcode.OP_HASH160).add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer())).add(Opcode.OP_EQUAL);\n  s._network = script._network || script.network;\n  return s;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyIn = function (signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script();\n  script.add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)]));\n  return script;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyHashIn = function (publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script().add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)])).add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n/**\n * @returns {Script} an empty script\n */\n\n\nScript.empty = function () {\n  return new Script();\n};\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\n\n\nScript.prototype.toScriptHashOut = function () {\n  return Script.buildScriptHashOut(this);\n};\n/**\n * @return {Script} an output script built from the address\n */\n\n\nScript.fromAddress = function (address) {\n  address = Address(address);\n\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\n\n\nScript.prototype.getAddressInfo = function (opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n\n    return info;\n  }\n};\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getOutputAddressInfo = function () {\n  var info = {};\n\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getInputAddressInfo = function () {\n  var info = {};\n\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\n\n\nScript.prototype.toAddress = function (network) {\n  var info = this.getAddressInfo();\n\n  if (!info) {\n    return false;\n  }\n\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\n\n\nScript.prototype.findAndDelete = function (script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n\n  return this;\n};\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\n\n\nScript.prototype.checkMinimalPush = function (i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n\n  if (!buf) {\n    return true;\n  }\n\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    // return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n    return false;\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return false;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n\n  return true;\n};\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\n\n\nScript.prototype._decodeOP_N = function (opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\n\n\nScript.prototype.getSignatureOperationsCount = function (accurate) {\n  accurate = _.isUndefined(accurate) ? true : accurate;\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n\n    lastOpcode = opcode;\n  });\n\n  return n;\n};\n\nmodule.exports = Script;","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/bitcore-lib-cash/lib/script/script.js"],"names":["Address","require","BufferReader","BufferWriter","Hash","Opcode","PublicKey","Signature","Networks","$","_","errors","buffer","BufferUtil","JSUtil","Script","from","chunks","isBuffer","fromBuffer","fromAddress","toBuffer","isString","fromString","isObject","isArray","set","prototype","obj","checkArgument","script","br","finished","opcodenum","readUInt8","len","buf","OP_PUSHDATA1","push","read","OP_PUSHDATA2","readUInt16LE","OP_PUSHDATA4","readUInt32LE","e","RangeError","InvalidBuffer","toString","bw","i","length","chunk","writeUInt8","write","writeUInt16LE","writeUInt32LE","concat","fromASM","str","tokens","split","token","opcode","toNumber","isUndefined","Buffer","Math","pow","fromHex","isHexa","parseInt","slice","Error","JSON","stringify","_chunkToString","type","asm","reverseMap","numstr","toASM","substr","toHex","inspect","isPublicKeyHashOut","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","isPublicKeyHashIn","signatureBuf","pubkeyBuf","version","getPublicKey","checkState","isPublicKeyOut","getPublicKeyHash","isVersion","isValid","isPublicKeyIn","isScriptHashOut","OP_EQUAL","isScriptHashIn","redeemChunk","redeemBuf","redeemScript","classify","types","UNKNOWN","isMultisigOut","isSmallIntOp","every","OP_CHECKMULTISIG","isMultisigIn","isTxDER","isDataOut","step1","OP_RETURN","script2","isPushOnly","getData","alloc","OP_16","PUBKEY_OUT","PUBKEY_IN","PUBKEYHASH_OUT","PUBKEYHASH_IN","SCRIPTHASH_OUT","SCRIPTHASH_IN","MULTISIG_OUT","MULTISIG_IN","DATA_OUT","OP_RETURN_STANDARD_SIZE","_isInput","classifyInput","_isOutput","classifyOutput","outputType","outputIdentifiers","bind","inputIdentifiers","isStandard","prepend","_addByType","equals","add","_addOpcode","_addBuffer","_insertAtPosition","op","unshift","removeCodeseparators","OP_CODESEPARATOR","buildMultisigOut","publicKeys","threshold","opts","smallInt","map","sorted","noSorting","sortBy","publicKey","buildMultisigIn","pubkeys","signatures","isNumber","s","signingMethod","checkBits","checkBitsString","reverse","join","checkBitsDecimal","checkBitsHex","N","OP_0","each","signature","buildP2SHMultisigIn","cachedMultisig","buildPublicKeyHashOut","to","toAddress","hashBuffer","_network","network","buildPublicKeyOut","pubkey","buildDataOut","data","encoding","buildScriptHashOut","isPayToScriptHash","sha256ripemd160","buildPublicKeyIn","sigtype","integerAsSingleByteBuffer","SIGHASH_ALL","buildPublicKeyHashIn","empty","toScriptHashOut","address","isPayToPublicKeyHash","UnrecognizedAddress","getAddressInfo","_getInputAddressInfo","_getOutputAddressInfo","info","PayToScriptHash","PayToPublicKeyHash","get","defaultNetwork","findAndDelete","hex","buf2","hex2","splice","checkMinimalPush","_decodeOP_N","OP_1","getSignatureOperationsCount","accurate","self","n","lastOpcode","OP_INVALIDOPCODE","getChunk","OP_CHECKSIGVERIFY","OP_CHECKMULTISIGVERIFY","module","exports"],"mappings":"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","sourcesContent":["var Address = require('../address');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Opcode = require('../opcode');\nvar PublicKey = require('../publickey');\nvar Signature = require('../crypto/signature');\nvar Networks = require('../networks');\nvar $ = require('../util/preconditions');\nvar _ = require('lodash');\nvar errors = require('../errors');\nvar buffer = require('buffer');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (_.isString(from)) {\n    return Script.fromString(from);\n  } else if (_.isObject(from) && _.isArray(from.chunks)) {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  $.checkArgument(_.isArray(obj.chunks));\n  this.chunks = obj.chunks;\n  return this;\n};\n\nScript.fromBuffer = function(buffer) {\n  var script = new Script();\n  script.chunks = [];\n\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function() {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function(str) {\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = Buffer.from(tokens[i], 'hex');\n      var opcodenum;\n      var len = buf.length;\n      if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n        opcodenum = len;\n      } else if (len < Math.pow(2, 8)) {\n        opcodenum = Opcode.OP_PUSHDATA1;\n      } else if (len < Math.pow(2, 16)) {\n        opcodenum = Opcode.OP_PUSHDATA2;\n      } else if (len < Math.pow(2, 32)) {\n        opcodenum = Opcode.OP_PUSHDATA4;\n      }\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.fromHex = function(str) {\n  return new Script(Buffer.from(str, 'hex'));\n};\n\nScript.fromString = function(str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(Buffer.from(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.prototype._chunkToString = function(chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = (type === 'asm');\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      if (asm) {\n        // A few cases where the opcode name differs from reverseMap\n        // aside from 1 to 16 data pushes.\n        if (opcodenum === 0) {\n          // OP_0 -> 0\n          str = str + ' 0';\n        } else if(opcodenum === 79) {\n          // OP_1NEGATE -> 1\n          str = str + ' -1';\n        } else {\n          str = str + ' ' + Opcode(opcodenum).toString();\n        }\n      } else {\n        str = str + ' ' + Opcode(opcodenum).toString();\n      }\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (!asm && (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4)) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\n\nScript.prototype.toASM = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function() {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function() {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function() {\n  return !!(this.chunks.length === 5 &&\n    this.chunks[0].opcodenum === Opcode.OP_DUP &&\n    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&\n    this.chunks[2].buf &&\n    this.chunks[2].buf.length === 20 &&\n    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&\n    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function() {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        pubkeyBuf &&\n        pubkeyBuf.length\n       ) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 ||\n           version === 0x06 ||\n           version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nScript.prototype.getPublicKey = function() {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function() {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function() {\n  if (this.chunks.length === 2 &&\n      this.chunks[0].buf &&\n      this.chunks[0].buf.length &&\n      this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 ||\n         version === 0x06 ||\n         version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function() {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 23 &&\n    buf[0] === Opcode.OP_HASH160 &&\n    buf[1] === 0x14 &&\n    buf[buf.length - 1] === Opcode.OP_EQUAL);\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function() {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function() {\n  return (this.chunks.length > 3 &&\n    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&\n    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {\n      return obj.buf && BufferUtil.isBuffer(obj.buf);\n    }) &&\n    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&\n    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);\n};\n\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function() {\n  return this.chunks.length >= 2 &&\n    this.chunks[0].opcodenum === 0 &&\n    this.chunks.slice(1, this.chunks.length).every(function(obj) {\n      return obj.buf &&\n        BufferUtil.isBuffer(obj.buf) &&\n        Signature.isTxDER(obj.buf);\n    });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function() {\n  var step1 = this.chunks.length >= 1 &&\n    this.chunks[0].opcodenum === Opcode.OP_RETURN &&\n    this.toBuffer().length <= 223; // 223 instead of 220 because (+1 for OP_RETURN, +2 for the pushdata opcodes)\n  if (!step1) return false;\n  var chunks = this.chunks.slice(1);\n  var script2 = new Script({chunks: chunks});\n  return script2.isPushOnly();\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function() {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return Buffer.alloc(0);\n    } else {\n      return Buffer.from(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return Buffer.from(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function() {\n  return _.every(this.chunks, function(chunk) {\n    return chunk.opcodenum <= Opcode.OP_16 ||\n      chunk.opcodenum === Opcode.OP_PUSHDATA1 ||\n      chunk.opcodenum === Opcode.OP_PUSHDATA2 ||\n      chunk.opcodenum === Opcode.OP_PUSHDATA4;\n  });\n};\n\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\n\nScript.OP_RETURN_STANDARD_SIZE = 220;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function() {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyOutput = function() {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyInput = function() {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function() {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function(obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function(script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function(obj) {\n  this._addByType(obj, false);\n  return this;\n};\n\nScript.prototype._addByType = function(obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function(op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function(opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\n\nScript.prototype._addBuffer = function(buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\n\n\nScript.prototype.removeCodeseparators = function() {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function(publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length,\n    'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function(publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n\n  if (opts.signingMethod === \"schnorr\" && opts.checkBits) {\n\n    // Spec according to https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-11-15-schnorrmultisig.md#scriptsig-size\n    let checkBitsString = Buffer.from(opts.checkBits).reverse().join('');\n    let checkBitsDecimal = parseInt(checkBitsString, 2);\n    let checkBitsHex = parseInt(checkBitsDecimal.toString(16), 16);\n    let N = pubkeys.length;\n      // N should only be 1-20\n        if (N >= 1 && N <= 4) {\n          s.add(Opcode(checkBitsHex));\n        }\n        else if (N >= 5 && N <= 8) {\n        if(checkBitsHex === 0x81) {\n            s.add(Opcode(\"OP_1NEGATE\")) // OP_1NEGATE\n          } else if(checkBitsHex > 0x10) {\n            s.add(0x01);\n            s.add(checkBitsHex);\n          } else {\n            s.add(Opcode(checkBitsHex));\n          }\n          \n        }\n        else if (N >= 9 && N <= 16) {\n          s.add(0x02);\n          s.add(checkBitsHex);\n        } \n        else if (N >= 17 && N <= 20) {\n          s.add(0x03);\n          s.add(checkBitsHex);\n        }\n    } else {\n      s.add(Opcode.OP_0); // ecdsa schnorr mode; multisig dummy param of 0\n    }\n  \n  \n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n * @param {Uint8Array} opts.checkBits bitfield map 1 or 0 to check which signatures to map against public keys for verification in schnorr multisig mode\n * @param {String} opts.signingMethod method with which input will be signed \"ecdsa\" or \"schnorr\"\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  \n  if (opts.signingMethod === \"schnorr\" && opts.checkBits) {\n\n    // Spec according to https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-11-15-schnorrmultisig.md#scriptsig-size\n    let checkBitsString = Buffer.from(opts.checkBits).reverse().join('');\n    let checkBitsDecimal = parseInt(checkBitsString, 2);\n    let checkBitsHex = parseInt(checkBitsDecimal.toString(16), 16);\n    let N = pubkeys.length;\n    // N should only be 1-20\n      if (N >= 1 && N <= 4) {\n        s.add(Opcode.smallInt(checkBitsDecimal));\n      }\n      else if (N >= 5 && N <= 8) {\n       if(checkBitsHex === 0x81) {\n          s.add(Opcode(\"OP_1NEGATE\")) // OP_1NEGATE\n        } else if(checkBitsHex > 0x10) {\n          s.add(0x01);\n          s.add(checkBitsHex);\n        } else {\n          s.add(Opcode.smallInt(checkBitsDecimal));\n        }\n      }\n      else if (N >= 9 && N <= 16) {\n        s.add(0x02);\n        s.add(checkBitsHex);\n      } \n      else if (N >= 17 && N <= 20) {\n        s.add(0x03);\n        s.add(checkBitsHex);\n      }\n  } else {\n    s.add(Opcode.OP_0); // ecdsa schnorr mode; multisig dummy param of 0\n  }\n  \n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function(to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP)\n    .add(Opcode.OP_HASH160)\n    .add(to.hashBuffer)\n    .add(Opcode.OP_EQUALVERIFY)\n    .add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function(pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer())\n    .add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function(data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n  if (_.isString(data)) {\n    data = Buffer.from(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function(script) {\n  $.checkArgument(script instanceof Script ||\n    (script instanceof Address && script.isPayToScriptHash()));\n  var s = new Script();\n  s.add(Opcode.OP_HASH160)\n    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))\n    .add(Opcode.OP_EQUAL);\n\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function(signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([\n    signature,\n    BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n  ]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script()\n    .add(BufferUtil.concat([\n      signature,\n      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n    ]))\n    .add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function() {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function() {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function(address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function(opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function() {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function() {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function(network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function(script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function(i) {\n  var chunk = this.   chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    // return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n    return false;\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return false;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\nScript.prototype._decodeOP_N = function(opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function(accurate) {\n  accurate = (_.isUndefined(accurate) ? true : accurate);\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  });\n  return n;\n};\n\nmodule.exports = Script;\n"]},"metadata":{},"sourceType":"script"}