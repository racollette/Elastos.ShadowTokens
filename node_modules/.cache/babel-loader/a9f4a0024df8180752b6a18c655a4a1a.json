{"ast":null,"code":"import QrCode from 'qrcode';\nimport { logo, refresh, spaceman, playStoreButton, appStoreButton, camera } from './images/index';\nimport { cssStyles, htmlDesign, noticetext, windowInformer } from './popupWindowDesign';\nimport debugLogger from 'debug'; // TODO add debug logging\n\nconst debug = debugLogger('MEWconnect:popup-window'); // const debugConnectionState = debugLogger('MEWconnect:connection-state');\n\ndebug;\nexport default class PopUpCreator {\n  constructor() {\n    this.sessionId = '';\n    this.sessionId = false;\n    this.logo = logo;\n    this.spaceman = spaceman;\n    this.refreshIcon = refresh;\n    this.playStoreButton = playStoreButton;\n    this.appStoreButton = appStoreButton;\n    this.camera = camera;\n    this.popupWindowOpen = false;\n\n    this.windowClosedListener = () => {};\n\n    window.addEventListener('beforeunload', () => {\n      this.closePopupWindow();\n    });\n  }\n\n  openPopupWindow(text) {\n    this.showPopupWindow(text);\n  }\n\n  get window() {\n    return this.popupWindow;\n  }\n\n  setWindowClosedListener(func) {\n    this.windowClosedListener = func;\n  }\n\n  removeWindowClosedListener() {\n    this.windowClosedListener = () => {};\n  }\n\n  hideNotifier() {\n    const notify = document.getElementById('Notifications');\n    notify.className = 'hidden';\n  }\n\n  createWindowInformer() {\n    const css = document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = noticetext;else css.innerText = noticetext;\n    document.body.appendChild(css);\n    const div = window.document.createElement('div');\n    div.id = 'Notifications';\n    div.className = 'hidden';\n    div.innerHTML = windowInformer(spaceman);\n    window.document.body.appendChild(div);\n  }\n\n  showWindowInformer() {\n    const notify = document.getElementById('Notifications');\n    notify.className = 'shown';\n    const showButton = document.getElementById('NotificationButton1');\n    showButton.addEventListener('click', () => {\n      this.showPopupWindow();\n    });\n    const cancelButton = document.getElementById('NotificationButton2');\n    cancelButton.addEventListener('click', () => {\n      this.popupWindowOpen = false;\n      this.hideNotifier();\n      this.windowClosedListener();\n      this.closePopupWindow();\n    });\n  }\n\n  showPopupWindow(qrcode) {\n    if (this.popupWindow && this.popupWindow.opener) {\n      this.popupWindow.focus();\n      return this.popupWindow;\n    }\n\n    if (!qrcode) {\n      throw Error('No connection string supplied to popup window');\n    }\n\n    this.createWindowInformer();\n    const width = 448;\n    const height = 558;\n    const left = Math.floor(window.outerWidth / 2 - width / 2 + window.screenX);\n    const top = Math.floor(window.outerHeight / 2 - height / 2 + window.screenY);\n    this.popupUrl = Math.random().toString();\n    this.popupWindow = window.open(this.popupUrl, 'windowName', [`width=${width}`, `height=${height}`, `left=${left}`, `top=${top}`, 'resizable=0'].join(','));\n    this.popupWindow.document.write(htmlDesign(this.refreshIcon, this.spaceman, this.playStoreButton, this.appStoreButton, this.camera));\n    const element = this.popupWindow.document.getElementById('canvas');\n    QrCode.toCanvas(element, qrcode, {\n      errorCorrectionLevel: 'H',\n      width: 200\n    });\n    const css = this.popupWindow.document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = cssStyles;else css.innerText = cssStyles;\n    this.popupWindow.document.body.appendChild(css);\n    this.showWindowInformer();\n    this.popupWindow.addEventListener('beforeunload', () => {\n      this.hideNotifier();\n      this.windowClosedListener();\n      this.popupWindowOpen = false;\n      this.popupWindow = null;\n    });\n    const channel = new BroadcastChannel('refresh-channel');\n    channel.addEventListener('message', val => {\n      if (val.data === 'refresh') {\n        this.refreshQrcode();\n      }\n    });\n    this.popupWindowOpen = true;\n    return this.popupWindow;\n  }\n\n  updateQrCode(qrcode) {\n    const element = this.popupWindow.document.getElementById('canvas');\n    QrCode.toCanvas(element, qrcode, {\n      errorCorrectionLevel: 'H',\n      width: 200\n    });\n  }\n\n  closePopupWindow() {\n    if (this.popupWindow) {\n      this.popupWindow.close();\n      this.popupUrl = null;\n      this.popupWindow = null;\n    }\n\n    this.removeWindowClosedListener();\n    window.focus();\n  }\n\n  handleBeforeUnload() {\n    this.closePopupWindow();\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/@myetherwallet/mewconnect-web-client/src/connectWindow/popUpCreator.js"],"names":["QrCode","logo","refresh","spaceman","playStoreButton","appStoreButton","camera","cssStyles","htmlDesign","noticetext","windowInformer","debugLogger","debug","PopUpCreator","constructor","sessionId","refreshIcon","popupWindowOpen","windowClosedListener","window","addEventListener","closePopupWindow","openPopupWindow","text","showPopupWindow","popupWindow","setWindowClosedListener","func","removeWindowClosedListener","hideNotifier","notify","document","getElementById","className","createWindowInformer","css","createElement","type","textContent","innerText","body","appendChild","div","id","innerHTML","showWindowInformer","showButton","cancelButton","qrcode","opener","focus","Error","width","height","left","Math","floor","outerWidth","screenX","top","outerHeight","screenY","popupUrl","random","toString","open","join","write","element","toCanvas","errorCorrectionLevel","channel","BroadcastChannel","val","data","refreshQrcode","updateQrCode","close","handleBeforeUnload"],"mappings":"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","sourcesContent":["import QrCode from 'qrcode';\nimport {\n  logo,\n  refresh,\n  spaceman,\n  playStoreButton,\n  appStoreButton,\n  camera\n} from './images/index';\nimport {\n  cssStyles,\n  htmlDesign,\n  noticetext,\n  windowInformer\n} from './popupWindowDesign';\nimport debugLogger from 'debug';\n\n// TODO add debug logging\nconst debug = debugLogger('MEWconnect:popup-window');\n// const debugConnectionState = debugLogger('MEWconnect:connection-state');\n\ndebug;\nexport default class PopUpCreator {\n  constructor() {\n    this.sessionId = '';\n    this.sessionId = false;\n    this.logo = logo;\n    this.spaceman = spaceman;\n    this.refreshIcon = refresh;\n    this.playStoreButton = playStoreButton;\n    this.appStoreButton = appStoreButton;\n    this.camera = camera;\n    this.popupWindowOpen = false;\n    this.windowClosedListener = () => {};\n\n    window.addEventListener('beforeunload', () => {\n      this.closePopupWindow();\n    });\n  }\n\n  openPopupWindow(text) {\n    this.showPopupWindow(text);\n  }\n\n  get window() {\n    return this.popupWindow;\n  }\n\n  setWindowClosedListener(func) {\n    this.windowClosedListener = func;\n  }\n\n  removeWindowClosedListener() {\n    this.windowClosedListener = () => {};\n  }\n\n  hideNotifier() {\n    const notify = document.getElementById('Notifications');\n    notify.className = 'hidden';\n  }\n\n  createWindowInformer() {\n    const css = document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = noticetext;\n    else css.innerText = noticetext;\n    document.body.appendChild(css);\n    const div = window.document.createElement('div');\n    div.id = 'Notifications';\n    div.className = 'hidden';\n\n    div.innerHTML = windowInformer(spaceman);\n    window.document.body.appendChild(div);\n  }\n\n  showWindowInformer() {\n    const notify = document.getElementById('Notifications');\n    notify.className = 'shown';\n\n    const showButton = document.getElementById('NotificationButton1');\n    showButton.addEventListener('click', () => {\n      this.showPopupWindow();\n    });\n\n    const cancelButton = document.getElementById('NotificationButton2');\n    cancelButton.addEventListener('click', () => {\n      this.popupWindowOpen = false;\n      this.hideNotifier();\n      this.windowClosedListener();\n      this.closePopupWindow();\n    });\n  }\n\n  showPopupWindow(qrcode) {\n    if (this.popupWindow && this.popupWindow.opener) {\n      this.popupWindow.focus();\n      return this.popupWindow;\n    }\n    if (!qrcode) {\n      throw Error('No connection string supplied to popup window');\n    }\n\n    this.createWindowInformer();\n\n    const width = 448;\n    const height = 558;\n    const left = Math.floor(window.outerWidth / 2 - width / 2 + window.screenX);\n    const top = Math.floor(\n      window.outerHeight / 2 - height / 2 + window.screenY\n    );\n    this.popupUrl = Math.random().toString();\n    this.popupWindow = window.open(\n      this.popupUrl,\n      'windowName',\n      [\n        `width=${width}`,\n        `height=${height}`,\n        `left=${left}`,\n        `top=${top}`,\n        'resizable=0'\n      ].join(',')\n    );\n    this.popupWindow.document.write(\n      htmlDesign(\n        this.refreshIcon,\n        this.spaceman,\n        this.playStoreButton,\n        this.appStoreButton,\n        this.camera\n      )\n    );\n    const element = this.popupWindow.document.getElementById('canvas');\n    QrCode.toCanvas(element, qrcode, { errorCorrectionLevel: 'H', width: 200 });\n\n    const css = this.popupWindow.document.createElement('style');\n    css.type = 'text/css';\n    if ('textContent' in css) css.textContent = cssStyles;\n    else css.innerText = cssStyles;\n    this.popupWindow.document.body.appendChild(css);\n\n    this.showWindowInformer();\n    this.popupWindow.addEventListener('beforeunload', () => {\n      this.hideNotifier();\n      this.windowClosedListener();\n      this.popupWindowOpen = false;\n      this.popupWindow = null;\n    });\n\n    const channel = new BroadcastChannel('refresh-channel');\n    channel.addEventListener('message', val => {\n          if(val.data === 'refresh'){\n            this.refreshQrcode();\n          }\n        });\n\n    this.popupWindowOpen = true;\n    return this.popupWindow;\n  }\n\n  updateQrCode(qrcode) {\n    const element = this.popupWindow.document.getElementById('canvas');\n    QrCode.toCanvas(element, qrcode, { errorCorrectionLevel: 'H', width: 200 });\n  }\n\n  closePopupWindow() {\n    if (this.popupWindow) {\n      this.popupWindow.close();\n      this.popupUrl = null;\n      this.popupWindow = null;\n    }\n    this.removeWindowClosedListener();\n    window.focus();\n  }\n\n  handleBeforeUnload() {\n    this.closePopupWindow();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}