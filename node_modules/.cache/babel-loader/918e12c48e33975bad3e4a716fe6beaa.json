{"ast":null,"code":"/**\n * The `value` function converts between different cryptocurrency units.\n * See `value.spec.ts` for example usage.\n */\nimport BigNumber from \"bignumber.js\";\n\nconst convert = (valueIn, fromUnit, toUnit) => {\n  return valueIn.multipliedBy(fromUnit).dividedBy(toUnit);\n};\n\nexport const toBigNumber = valueIn => BigNumber.isBigNumber(valueIn) ? new BigNumber(valueIn) : new BigNumber(valueIn.toString());\nexport const toFixed = input => input.toFixed ? input.toFixed() : input.toString();\n\nclass BaseValue {\n  constructor(unitTypes, valueIn, unit) {\n    // tslint:disable-next-line: no-use-before-declare\n    this.to = unit => convert(this.value, new BigNumber(\"1\"), this.unitTypes[resolveUnit(unit)]);\n\n    this.unitTypes = unitTypes;\n    this.value = convert(toBigNumber(valueIn), this.unitTypes[unit], new BigNumber(\"1\"));\n  }\n\n} // BTC /////////////////////////////////////////////////////////////////////////\n\n\nconst BTCUnits = {\n  sats: new BigNumber(\"0.00000001\"),\n  ubtc: new BigNumber(\"0.000001\"),\n  mbtc: new BigNumber(\"0.001\"),\n  btc: new BigNumber(\"1\")\n};\n\nclass BTCValue extends BaseValue {\n  constructor(valueIn, unit) {\n    super(BTCUnits, valueIn, unit);\n\n    this.sats = () => this.to(\"sats\");\n\n    this.btc = () => this.to(\"btc\");\n\n    this._smallest = () => this.to(\"sats\");\n\n    this._readable = () => this.to(\"btc\");\n  }\n\n}\n\nBTCValue.units = BTCUnits;\nBTCValue.synonyms = [{\n  synonyms: [\"bitcoin\", \"bitcoins\", \"tbtc\"],\n  unit: \"btc\"\n}]; // tbtc is used to indicate testnet btc\n// BCH /////////////////////////////////////////////////////////////////////////\n\nconst BCHUnits = {\n  sats: new BigNumber(\"0.00000001\"),\n  ubch: new BigNumber(\"0.000001\"),\n  mbch: new BigNumber(\"0.001\"),\n  bch: new BigNumber(\"1\")\n};\n\nclass BCHValue extends BaseValue {\n  constructor(valueIn, unit) {\n    super(BCHUnits, valueIn, unit);\n\n    this.sats = () => this.to(\"sats\");\n\n    this.bch = () => this.to(\"bch\");\n\n    this._smallest = () => this.to(\"sats\");\n\n    this._readable = () => this.to(\"bch\");\n  }\n\n}\n\nBCHValue.units = BCHUnits;\nBCHValue.synonyms = [{\n  synonyms: [\"bitcoin-cash\", \"bcash\", \"tbch\"],\n  unit: \"btc\"\n}]; // ZEC /////////////////////////////////////////////////////////////////////////\n\nconst ZECUnits = {\n  zats: new BigNumber(\"0.00000001\"),\n  uzec: new BigNumber(\"0.000001\"),\n  mzec: new BigNumber(\"0.001\"),\n  zec: new BigNumber(\"1\")\n};\n\nclass ZECValue extends BaseValue {\n  constructor(valueIn, unit) {\n    super(ZECUnits, valueIn, unit);\n\n    this.zats = () => this.to(\"zats\");\n\n    this.zec = () => this.to(\"zec\");\n\n    this._smallest = () => this.to(\"zats\");\n\n    this._readable = () => this.to(\"zec\");\n  }\n\n}\n\nZECValue.units = ZECUnits;\nZECValue.synonyms = [{\n  synonyms: [\"zcash\", \"tzec\", \"taz\"],\n  unit: \"zec\"\n}]; // Sats ////////////////////////////////////////////////////////////////////////\n\nconst SatsUnits = {\n  sats: new BigNumber(\"0.00000001\"),\n  bch: new BigNumber(\"1\"),\n  btc: new BigNumber(\"1\")\n};\n\nclass SatsValue extends BaseValue {\n  constructor(valueIn, unit) {\n    super(SatsUnits, valueIn, unit);\n\n    this.sats = () => this.to(\"sats\");\n\n    this.btc = () => this.to(\"btc\");\n\n    this.bch = () => this.to(\"bch\");\n\n    this._smallest = () => this.to(\"sats\");\n\n    this._readable = () => this.to(\"btc\");\n  }\n\n}\n\nSatsValue.units = SatsUnits;\nSatsValue.synonyms = [{}]; // ETH /////////////////////////////////////////////////////////////////////////\n\nconst ETHUnits = {\n  wei: new BigNumber(\"0.000000000000000001\"),\n  kwei: new BigNumber(\"0.000000000000001\"),\n  mwei: new BigNumber(\"0.000000000001\"),\n  gwei: new BigNumber(\"0.000000001\"),\n  finney: new BigNumber(\"0.001\"),\n  eth: new BigNumber(\"1\")\n};\n\nclass ETHValue extends BaseValue {\n  constructor(valueIn, unit) {\n    super(ETHUnits, valueIn, unit);\n\n    this.wei = () => this.to(\"wei\");\n\n    this.eth = () => this.to(\"eth\");\n\n    this._smallest = () => this.to(\"wei\");\n\n    this._readable = () => this.to(\"eth\");\n  }\n\n}\n\nETHValue.units = ETHUnits;\nETHValue.synonyms = [{\n  synonyms: [\"ethereum\", \"ether\", \"keth\"],\n  unit: \"eth\"\n}]; ////////////////////////////////////////////////////////////////////////////////\n// General /////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nconst valueClasses = [BTCValue, BCHValue, ZECValue, ETHValue];\n\nconst resolveUnit = unitIn => {\n  const unit = unitIn.toLowerCase().replace(/Âµ/, \"u\"); // Satoshis\n\n  if (unit.slice(0, 3) === \"sat\") {\n    return \"sats\";\n  }\n\n  for (const ValueClass of valueClasses) {\n    // Check if the unit belongs to the class\n    if (new Set(Object.keys(ValueClass.units)).has(unit)) {\n      return unit;\n    } // Handle synonyms\n\n\n    for (const {\n      synonyms,\n      unit: synonymUnit\n    } of ValueClass.synonyms) {\n      if (new Set(synonyms).has(unit)) {\n        return synonymUnit;\n      }\n    }\n  }\n\n  throw new Error(`Unknown unit ${unitIn}`);\n};\n\nexport const value = (valueIn, unitIn) => {\n  const unit = resolveUnit(unitIn); // Satoshis\n\n  if (unit === \"sats\") {\n    return new SatsValue(valueIn, \"sats\");\n  }\n\n  for (const ValueClass of valueClasses) {\n    // Check if the unit belongs to the class\n    if (new Set(Object.keys(ValueClass.units)).has(unit)) {\n      return new ValueClass(valueIn, unit);\n    }\n  }\n\n  throw new Error(`Unknown unit ${unitIn}`);\n};","map":{"version":3,"sources":["../../src/value.ts"],"names":[],"mappings":"AAAA;;;;AAMA,OAAO,SAAP,MAAsB,cAAtB;;AAEA,MAAM,OAAO,GAAG,CAAC,OAAD,EAAqB,QAArB,EAA0C,MAA1C,KAA+D;AAC3E,SAAO,OAAO,CAAC,YAAR,CAAqB,QAArB,EAA+B,SAA/B,CAAyC,MAAzC,CAAP;AACH,CAFD;;AAIA,OAAO,MAAM,WAAW,GAAI,OAAD,IAAqC,SAAS,CAAC,WAAV,CAAsB,OAAtB,IAAiC,IAAI,SAAJ,CAAc,OAAd,CAAjC,GAA0D,IAAI,SAAJ,CAAc,OAAO,CAAC,QAAR,EAAd,CAAnH;AACP,OAAO,MAAM,OAAO,GAAI,KAAD,IAAiF,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,OAAN,EAAhB,GAAkC,KAAK,CAAC,QAAN,EAAnI;;AAEP,MAAM,SAAN,CAAe;AAGX,EAAA,WAAA,CAAY,SAAZ,EAA0B,OAA1B,EAAgD,IAAhD,EAA6D;AAC7D;AACO,SAAA,EAAA,GAAM,IAAD,IAA8B,OAAO,CAAC,KAAK,KAAN,EAAa,IAAI,SAAJ,CAAc,GAAd,CAAb,EAAiC,KAAK,SAAL,CAAe,WAAW,CAAC,IAAD,CAA1B,CAAjC,CAA1C;;AAF0D,SAAK,SAAL,GAAiB,SAAjB;AAA4B,SAAK,KAAL,GAAa,OAAO,CAAC,WAAW,CAAC,OAAD,CAAZ,EAAuB,KAAK,SAAL,CAAe,IAAf,CAAvB,EAA6C,IAAI,SAAJ,CAAc,GAAd,CAA7C,CAApB;AAAuF;;AAHzK,C,CAQf;;;AAEA,MAAM,QAAQ,GAAG;AACb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,YAAd,CADO;AAEb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,UAAd,CAFO;AAGb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,OAAd,CAHO;AAIb,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd;AAJQ,CAAjB;;AAOA,MAAM,QAAN,SAAuB,SAAvB,CAAiD;AAG7C,EAAA,WAAA,CAAY,OAAZ,EAAkC,IAAlC,EAA6D;AAAI,UAAM,QAAN,EAAgB,OAAhB,EAAyB,IAAzB;;AAC1D,SAAA,IAAA,GAAO,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAb;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAlB;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;AAJ2F;;AAHrD;;AAC/B,QAAA,CAAA,KAAA,GAAQ,QAAR;AACA,QAAA,CAAA,QAAA,GAAW,CAAC;AAAE,EAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,MAAxB,CAAZ;AAA6C,EAAA,IAAI,EAAE;AAAnD,CAAD,CAAX,C,CAAkF;AAQpG;;AAEA,MAAM,QAAQ,GAAG;AACb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,YAAd,CADO;AAEb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,UAAd,CAFO;AAGb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,OAAd,CAHO;AAIb,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd;AAJQ,CAAjB;;AAOA,MAAM,QAAN,SAAuB,SAAvB,CAAiD;AAG7C,EAAA,WAAA,CAAY,OAAZ,EAAkC,IAAlC,EAA6D;AAAI,UAAM,QAAN,EAAgB,OAAhB,EAAyB,IAAzB;;AAC1D,SAAA,IAAA,GAAO,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAb;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAlB;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;AAJ2F;;AAHrD;;AAC/B,QAAA,CAAA,KAAA,GAAQ,QAAR;AACA,QAAA,CAAA,QAAA,GAAW,CAAC;AAAE,EAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,OAAjB,EAA0B,MAA1B,CAAZ;AAA+C,EAAA,IAAI,EAAE;AAArD,CAAD,CAAX,C,CAQlB;;AAEA,MAAM,QAAQ,GAAG;AACb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,YAAd,CADO;AAEb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,UAAd,CAFO;AAGb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,OAAd,CAHO;AAIb,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd;AAJQ,CAAjB;;AAOA,MAAM,QAAN,SAAuB,SAAvB,CAAiD;AAG7C,EAAA,WAAA,CAAY,OAAZ,EAAkC,IAAlC,EAA6D;AAAI,UAAM,QAAN,EAAgB,OAAhB,EAAyB,IAAzB;;AAC1D,SAAA,IAAA,GAAO,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAb;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAlB;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;AAJ2F;;AAHrD;;AAC/B,QAAA,CAAA,KAAA,GAAQ,QAAR;AACA,QAAA,CAAA,QAAA,GAAW,CAAC;AAAE,EAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,CAAZ;AAAsC,EAAA,IAAI,EAAE;AAA5C,CAAD,CAAX,C,CAQlB;;AAEA,MAAM,SAAS,GAAG;AACd,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,YAAd,CADQ;AAEd,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd,CAFS;AAGd,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd;AAHS,CAAlB;;AAMA,MAAM,SAAN,SAAwB,SAAxB,CAAmD;AAG/C,EAAA,WAAA,CAAY,OAAZ,EAAkC,IAAlC,EAA8D;AAAI,UAAM,SAAN,EAAiB,OAAjB,EAA0B,IAA1B;;AAC3D,SAAA,IAAA,GAAO,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAb;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,MAAR,CAAlB;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;AAL6F;;AAHrD;;AACjC,SAAA,CAAA,KAAA,GAAQ,SAAR;AACA,SAAA,CAAA,QAAA,GAAW,CAAC,EAAD,CAAX,C,CASlB;;AAEA,MAAM,QAAQ,GAAG;AACb,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,sBAAd,CADQ;AAEb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,mBAAd,CAFO;AAGb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,gBAAd,CAHO;AAIb,EAAA,IAAI,EAAE,IAAI,SAAJ,CAAc,aAAd,CAJO;AAKb,EAAA,MAAM,EAAE,IAAI,SAAJ,CAAc,OAAd,CALK;AAMb,EAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,GAAd;AANQ,CAAjB;;AASA,MAAM,QAAN,SAAuB,SAAvB,CAAiD;AAG7C,EAAA,WAAA,CAAY,OAAZ,EAAkC,IAAlC,EAA6D;AAAI,UAAM,QAAN,EAAgB,OAAhB,EAAyB,IAAzB;;AAC1D,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,GAAA,GAAM,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAZ;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;;AACA,SAAA,SAAA,GAAY,MAAM,KAAK,EAAL,CAAQ,KAAR,CAAlB;AAJ2F;;AAHrD;;AAC/B,QAAA,CAAA,KAAA,GAAQ,QAAR;AACA,QAAA,CAAA,QAAA,GAAW,CAAC;AAAE,EAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,CAAZ;AAA2C,EAAA,IAAI,EAAE;AAAjD,CAAD,CAAX,C,CAQlB;AACA;AACA;;AAEA,MAAM,YAAY,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CAArB;;AAUA,MAAM,WAAW,GAAI,MAAD,IAA0B;AAC1C,QAAM,IAAI,GAAG,MAAM,CAAC,WAAP,GAAqB,OAArB,CAA6B,GAA7B,EAAkC,GAAlC,CAAb,CAD0C,CAG1C;;AACA,MAAI,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,KAAzB,EAAgC;AAAE,WAAO,MAAP;AAAgB;;AAElD,OAAK,MAAM,UAAX,IAAyB,YAAzB,EAAuC;AACnC;AACA,QAAI,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,KAAvB,CAAR,EAAuC,GAAvC,CAA2C,IAA3C,CAAJ,EAAsD;AAAE,aAAO,IAAP;AAA+C,KAFpE,CAInC;;;AACA,SAAK,MAAM;AAAE,MAAA,QAAF;AAAY,MAAA,IAAI,EAAE;AAAlB,KAAX,IAA8C,UAAU,CAAC,QAAzD,EAAmE;AAC/D,UAAI,IAAI,GAAJ,CAAQ,QAAR,EAAkB,GAAlB,CAAsB,IAAtB,CAAJ,EAAiC;AAAE,eAAO,WAAP;AAAqB;AAC3D;AACJ;;AAED,QAAM,IAAI,KAAJ,CAAU,gBAAgB,MAAM,EAAhC,CAAN;AACH,CAjBD;;AAmBA,OAAO,MAAM,KAAK,GAAG,CAAqB,OAArB,EAA2C,MAA3C,KAAwE;AACzF,QAAM,IAAI,GAAG,WAAW,CAAC,MAAD,CAAxB,CADyF,CAGzF;;AACA,MAAI,IAAI,KAAK,MAAb,EAAqB;AAAE,WAAO,IAAI,SAAJ,CAAc,OAAd,EAAuB,MAAvB,CAAP;AAAuD;;AAE9E,OAAK,MAAM,UAAX,IAAyB,YAAzB,EAAuC;AACnC;AACA,QAAI,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,KAAvB,CAAR,EAAuC,GAAvC,CAA2C,IAA3C,CAAJ,EAAsD;AAAE,aAAO,IAAI,UAAJ,CAAe,OAAf,EAAwB,IAAxB,CAAP;AAAuF;AAClJ;;AAED,QAAM,IAAI,KAAJ,CAAU,gBAAgB,MAAM,EAAhC,CAAN;AACH,CAZM","sourceRoot":"","sourcesContent":["/**\n * The `value` function converts between different cryptocurrency units.\n * See `value.spec.ts` for example usage.\n */\nimport BigNumber from \"bignumber.js\";\nconst convert = (valueIn, fromUnit, toUnit) => {\n    return valueIn.multipliedBy(fromUnit).dividedBy(toUnit);\n};\nexport const toBigNumber = (valueIn) => BigNumber.isBigNumber(valueIn) ? new BigNumber(valueIn) : new BigNumber(valueIn.toString());\nexport const toFixed = (input) => input.toFixed ? input.toFixed() : input.toString();\nclass BaseValue {\n    constructor(unitTypes, valueIn, unit) {\n        // tslint:disable-next-line: no-use-before-declare\n        this.to = (unit) => convert(this.value, new BigNumber(\"1\"), this.unitTypes[resolveUnit(unit)]);\n        this.unitTypes = unitTypes;\n        this.value = convert(toBigNumber(valueIn), this.unitTypes[unit], new BigNumber(\"1\"));\n    }\n}\n// BTC /////////////////////////////////////////////////////////////////////////\nconst BTCUnits = {\n    sats: new BigNumber(\"0.00000001\"),\n    ubtc: new BigNumber(\"0.000001\"),\n    mbtc: new BigNumber(\"0.001\"),\n    btc: new BigNumber(\"1\"),\n};\nclass BTCValue extends BaseValue {\n    constructor(valueIn, unit) {\n        super(BTCUnits, valueIn, unit);\n        this.sats = () => this.to(\"sats\");\n        this.btc = () => this.to(\"btc\");\n        this._smallest = () => this.to(\"sats\");\n        this._readable = () => this.to(\"btc\");\n    }\n}\nBTCValue.units = BTCUnits;\nBTCValue.synonyms = [{ synonyms: [\"bitcoin\", \"bitcoins\", \"tbtc\"], unit: \"btc\" }]; // tbtc is used to indicate testnet btc\n// BCH /////////////////////////////////////////////////////////////////////////\nconst BCHUnits = {\n    sats: new BigNumber(\"0.00000001\"),\n    ubch: new BigNumber(\"0.000001\"),\n    mbch: new BigNumber(\"0.001\"),\n    bch: new BigNumber(\"1\"),\n};\nclass BCHValue extends BaseValue {\n    constructor(valueIn, unit) {\n        super(BCHUnits, valueIn, unit);\n        this.sats = () => this.to(\"sats\");\n        this.bch = () => this.to(\"bch\");\n        this._smallest = () => this.to(\"sats\");\n        this._readable = () => this.to(\"bch\");\n    }\n}\nBCHValue.units = BCHUnits;\nBCHValue.synonyms = [{ synonyms: [\"bitcoin-cash\", \"bcash\", \"tbch\"], unit: \"btc\" }];\n// ZEC /////////////////////////////////////////////////////////////////////////\nconst ZECUnits = {\n    zats: new BigNumber(\"0.00000001\"),\n    uzec: new BigNumber(\"0.000001\"),\n    mzec: new BigNumber(\"0.001\"),\n    zec: new BigNumber(\"1\"),\n};\nclass ZECValue extends BaseValue {\n    constructor(valueIn, unit) {\n        super(ZECUnits, valueIn, unit);\n        this.zats = () => this.to(\"zats\");\n        this.zec = () => this.to(\"zec\");\n        this._smallest = () => this.to(\"zats\");\n        this._readable = () => this.to(\"zec\");\n    }\n}\nZECValue.units = ZECUnits;\nZECValue.synonyms = [{ synonyms: [\"zcash\", \"tzec\", \"taz\"], unit: \"zec\" }];\n// Sats ////////////////////////////////////////////////////////////////////////\nconst SatsUnits = {\n    sats: new BigNumber(\"0.00000001\"),\n    bch: new BigNumber(\"1\"),\n    btc: new BigNumber(\"1\"),\n};\nclass SatsValue extends BaseValue {\n    constructor(valueIn, unit) {\n        super(SatsUnits, valueIn, unit);\n        this.sats = () => this.to(\"sats\");\n        this.btc = () => this.to(\"btc\");\n        this.bch = () => this.to(\"bch\");\n        this._smallest = () => this.to(\"sats\");\n        this._readable = () => this.to(\"btc\");\n    }\n}\nSatsValue.units = SatsUnits;\nSatsValue.synonyms = [{}];\n// ETH /////////////////////////////////////////////////////////////////////////\nconst ETHUnits = {\n    wei: new BigNumber(\"0.000000000000000001\"),\n    kwei: new BigNumber(\"0.000000000000001\"),\n    mwei: new BigNumber(\"0.000000000001\"),\n    gwei: new BigNumber(\"0.000000001\"),\n    finney: new BigNumber(\"0.001\"),\n    eth: new BigNumber(\"1\"),\n};\nclass ETHValue extends BaseValue {\n    constructor(valueIn, unit) {\n        super(ETHUnits, valueIn, unit);\n        this.wei = () => this.to(\"wei\");\n        this.eth = () => this.to(\"eth\");\n        this._smallest = () => this.to(\"wei\");\n        this._readable = () => this.to(\"eth\");\n    }\n}\nETHValue.units = ETHUnits;\nETHValue.synonyms = [{ synonyms: [\"ethereum\", \"ether\", \"keth\"], unit: \"eth\" }];\n////////////////////////////////////////////////////////////////////////////////\n// General /////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nconst valueClasses = [BTCValue, BCHValue, ZECValue, ETHValue];\nconst resolveUnit = (unitIn) => {\n    const unit = unitIn.toLowerCase().replace(/Âµ/, \"u\");\n    // Satoshis\n    if (unit.slice(0, 3) === \"sat\") {\n        return \"sats\";\n    }\n    for (const ValueClass of valueClasses) {\n        // Check if the unit belongs to the class\n        if (new Set(Object.keys(ValueClass.units)).has(unit)) {\n            return unit;\n        }\n        // Handle synonyms\n        for (const { synonyms, unit: synonymUnit } of ValueClass.synonyms) {\n            if (new Set(synonyms).has(unit)) {\n                return synonymUnit;\n            }\n        }\n    }\n    throw new Error(`Unknown unit ${unitIn}`);\n};\nexport const value = (valueIn, unitIn) => {\n    const unit = resolveUnit(unitIn);\n    // Satoshis\n    if (unit === \"sats\") {\n        return new SatsValue(valueIn, \"sats\");\n    }\n    for (const ValueClass of valueClasses) {\n        // Check if the unit belongs to the class\n        if (new Set(Object.keys(ValueClass.units)).has(unit)) {\n            return new ValueClass(valueIn, unit);\n        }\n    }\n    throw new Error(`Unknown unit ${unitIn}`);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBR0gsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBRXJDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBa0IsRUFBRSxRQUFtQixFQUFFLE1BQWlCLEVBQUUsRUFBRTtJQUMzRSxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQW9CLEVBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM1SixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUEyRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUUzSixNQUFNLFNBQVM7SUFHWCxZQUFZLFNBQVksRUFBRSxPQUFvQixFQUFFLElBQWE7UUFDN0Qsa0RBQWtEO1FBQzNDLE9BQUUsR0FBRyxDQUFDLElBQWEsRUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBYyxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBRnpFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQUMsSUFBSSxDQUFD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"]},"metadata":{},"sourceType":"module"}