{"ast":null,"code":"import BlocknativeSdk from \"bnc-sdk\";\nimport { AbiCoder } from \"web3-eth-abi\";\nimport { keccak256 as web3Keccak256 } from \"web3-utils\";\nimport { Ox, SECONDS, sleep, strip0x } from \"./common\";\nexport const BURN_TOPIC = web3Keccak256(\"LogBurn(bytes,uint256,uint256,bytes)\");\n/**\n * Waits for the receipt of a transaction to be available, retrying every 3\n * seconds until it is.\n *\n * @param web3 A web3 instance.\n * @param transactionHash The hash of the transaction being read.\n *\n * @/param nonce The nonce of the transaction, to detect if it has been\n *        overwritten.\n */\n\nexport const waitForReceipt = async (web3, transactionHash, blocknative) => new Promise(async (resolve, reject) => {\n  let blocknativeInitialized = false;\n\n  try {\n    if (!blocknative) {\n      // Initialize Blocknative SDK.\n      blocknative = new BlocknativeSdk({\n        dappId: \"6b3d07f1-b158-4cf1-99ec-919b11fe3654\",\n        networkId: await web3.eth.net.getId()\n      });\n      blocknativeInitialized = true;\n    }\n\n    const {\n      emitter\n    } = blocknative.transaction(transactionHash);\n    emitter.on(\"txSpeedUp\", state => {\n      if (state.hash) {\n        transactionHash = Ox(state.hash);\n      }\n    });\n    emitter.on(\"txCancel\", () => {\n      reject(new Error(\"Ethereum transaction was cancelled.\"));\n    });\n  } catch (error) {// Ignore blocknative error.\n  } // Wait for confirmation\n\n\n  let receipt;\n\n  while (!receipt || !receipt.blockHash) {\n    receipt = await web3.eth.getTransactionReceipt(transactionHash);\n\n    if (receipt && receipt.blockHash) {\n      break;\n    }\n\n    await sleep(3 * SECONDS);\n  }\n\n  try {\n    // Destroy blocknative SDK.\n    if (blocknative && blocknativeInitialized) {\n      blocknative.destroy();\n    }\n  } catch (error) {// Ignore blocknative error.\n  } // Status might be undefined - so check against `false` explicitly.\n\n\n  if (receipt.status === false) {\n    reject(new Error(`Transaction was reverted. { \"transactionHash\": \"${transactionHash}\" }`));\n    return;\n  }\n\n  resolve(receipt);\n  return;\n});\nexport const extractBurnReference = async (web3, txHash) => {\n  const receipt = await waitForReceipt(web3, txHash);\n\n  if (!receipt.logs) {\n    throw Error(\"No events found in transaction\");\n  }\n\n  let burnReference;\n\n  for (const [, event] of Object.entries(receipt.logs)) {\n    if (event.topics[0] === BURN_TOPIC) {\n      burnReference = event.topics[1];\n      break;\n    }\n  }\n\n  if (!burnReference && burnReference !== 0) {\n    throw Error(\"No reference ID found in logs\");\n  }\n\n  return burnReference;\n};\nexport const defaultAccountError = \"No accounts found in Web3 wallet.\";\nexport const withDefaultAccount = async (web3, config) => {\n  if (!config.from) {\n    if (web3.eth.defaultAccount) {\n      config.from = web3.eth.defaultAccount;\n    } else {\n      const accounts = await web3.eth.getAccounts();\n\n      if (accounts.length === 0) {\n        throw new Error(defaultAccountError);\n      }\n\n      config.from = accounts[0];\n    }\n  }\n\n  return config;\n};\nexport const rawEncode = (types, // tslint:disable-next-line:no-any\nparameters) => Buffer.from(strip0x(new AbiCoder().encodeParameters(types, parameters)), \"hex\");","map":{"version":3,"sources":["../../src/ethereumUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import BlocknativeSdk from \"bnc-sdk\";\nimport { AbiCoder } from \"web3-eth-abi\";\nimport { keccak256 as web3Keccak256 } from \"web3-utils\";\nimport { Ox, SECONDS, sleep, strip0x } from \"./common\";\nexport const BURN_TOPIC = web3Keccak256(\"LogBurn(bytes,uint256,uint256,bytes)\");\n/**\n * Waits for the receipt of a transaction to be available, retrying every 3\n * seconds until it is.\n *\n * @param web3 A web3 instance.\n * @param transactionHash The hash of the transaction being read.\n *\n * @/param nonce The nonce of the transaction, to detect if it has been\n *        overwritten.\n */\nexport const waitForReceipt = async (web3, transactionHash, blocknative) => new Promise(async (resolve, reject) => {\n    let blocknativeInitialized = false;\n    try {\n        if (!blocknative) {\n            // Initialize Blocknative SDK.\n            blocknative = new BlocknativeSdk({\n                dappId: \"6b3d07f1-b158-4cf1-99ec-919b11fe3654\",\n                networkId: await web3.eth.net.getId(),\n            });\n            blocknativeInitialized = true;\n        }\n        const { emitter } = blocknative.transaction(transactionHash);\n        emitter.on(\"txSpeedUp\", (state) => {\n            if (state.hash) {\n                transactionHash = Ox(state.hash);\n            }\n        });\n        emitter.on(\"txCancel\", () => {\n            reject(new Error(\"Ethereum transaction was cancelled.\"));\n        });\n    }\n    catch (error) {\n        // Ignore blocknative error.\n    }\n    // Wait for confirmation\n    let receipt;\n    while (!receipt || !receipt.blockHash) {\n        receipt = (await web3.eth.getTransactionReceipt(transactionHash));\n        if (receipt && receipt.blockHash) {\n            break;\n        }\n        await sleep(3 * SECONDS);\n    }\n    try {\n        // Destroy blocknative SDK.\n        if (blocknative && blocknativeInitialized) {\n            blocknative.destroy();\n        }\n    }\n    catch (error) {\n        // Ignore blocknative error.\n    }\n    // Status might be undefined - so check against `false` explicitly.\n    if (receipt.status === false) {\n        reject(new Error(`Transaction was reverted. { \"transactionHash\": \"${transactionHash}\" }`));\n        return;\n    }\n    resolve(receipt);\n    return;\n});\nexport const extractBurnReference = async (web3, txHash) => {\n    const receipt = await waitForReceipt(web3, txHash);\n    if (!receipt.logs) {\n        throw Error(\"No events found in transaction\");\n    }\n    let burnReference;\n    for (const [, event] of Object.entries(receipt.logs)) {\n        if (event.topics[0] === BURN_TOPIC) {\n            burnReference = event.topics[1];\n            break;\n        }\n    }\n    if (!burnReference && burnReference !== 0) {\n        throw Error(\"No reference ID found in logs\");\n    }\n    return burnReference;\n};\nexport const defaultAccountError = \"No accounts found in Web3 wallet.\";\nexport const withDefaultAccount = async (web3, config) => {\n    if (!config.from) {\n        if (web3.eth.defaultAccount) {\n            config.from = web3.eth.defaultAccount;\n        }\n        else {\n            const accounts = await web3.eth.getAccounts();\n            if (accounts.length === 0) {\n                throw new Error(defaultAccountError);\n            }\n            config.from = accounts[0];\n        }\n    }\n    return config;\n};\nexport const rawEncode = (types, \n// tslint:disable-next-line:no-any\nparameters) => Buffer.from(strip0x(new AbiCoder().encodeParameters(types, parameters)), \"hex\");\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1VdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ldGhlcmV1bVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sY0FBYyxNQUFNLFNBQVMsQ0FBQztBQUdyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLElBQUksYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXhELE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdkQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBRWhGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQy9CLElBQVUsRUFDVixlQUF1QixFQUN2QixXQUE0QixFQUM5QixFQUFFLENBQ0EsSUFBSSxPQUFPLENBQXFCLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDdEQsSUFBSSxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFFbkMsSUFBSTtRQUNBLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCw4QkFBOEI7WUFDOUIsV0FBVyxHQUFHLElBQUksY0FBYyxDQUFDO2dCQUM3QixNQUFNLEVBQUUsc0NBQXNDO2dCQUM5QyxTQUFTLEVBQUUsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7YUFDeEMsQ0FBQyxDQUFDO1lBQ0gsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QixJ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"]},"metadata":{},"sourceType":"module"}