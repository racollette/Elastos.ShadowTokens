{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../../util/preconditions');\n\nconst errors = require('../../errors');\n\nvar BufferWriter = require('../../encoding/bufferwriter');\n\nvar buffer = require('buffer');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar JSUtil = require('../../util/js');\n\nvar Script = require('../../script');\n\nvar Sighash = require('../sighash');\n\nvar Output = require('../output');\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\n\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nconst SEQUENCE_LOCKTIME_DISABLE_FLAG = Math.pow(2, 31); // (1 << 31);\n\nconst SEQUENCE_LOCKTIME_TYPE_FLAG = Math.pow(2, 22); // (1 << 22);\n\nconst SEQUENCE_LOCKTIME_MASK = 0xffff;\nconst SEQUENCE_LOCKTIME_GRANULARITY = 512; // 512 seconds\n\nconst SEQUENCE_BLOCKDIFF_LIMIT = Math.pow(2, 16) - 1; // 16 bits \n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\nInput.SEQUENCE_LOCKTIME_TYPE_FLAG = SEQUENCE_LOCKTIME_TYPE_FLAG;\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    if (this.isNull()) {\n      return null;\n    }\n\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n\n    return this._script;\n  }\n});\n\nInput.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function (params) {\n  var prevTxId;\n\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = Buffer.from(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n\n  this.witnesses = [];\n  this.output = params.output ? params.output instanceof Output ? params.output : new Output(params.output) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ? _.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum : params.sequenceNumber;\n\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex')\n  }; // add human readable form if input contains valid script\n\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n\n  return obj;\n};\n\nInput.fromBufferReader = function (br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE(); // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n\n  return input;\n};\n\nInput.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function (script) {\n  this._script = null;\n\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = Buffer.from(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = Buffer.from(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n\n  return this;\n};\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\n\n\nInput.prototype.getSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' + ' for input: ' + JSON.stringify(this));\n};\n\nInput.prototype.getSatoshisBuffer = function () {\n  $.checkState(this.output instanceof Output);\n  $.checkState(this.output._satoshisBN);\n  return new BufferWriter().writeUInt64LEBN(this.output._satoshisBN).toBuffer();\n};\n\nInput.prototype.isFullySigned = function () {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function () {\n  return this.sequenceNumber !== Input.MAXINT;\n};\n\nInput.prototype.addSignature = function () {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.hasWitnesses = function () {\n  if (this.witnesses && this.witnesses.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nInput.prototype.getWitnesses = function () {\n  return this.witnesses;\n};\n\nInput.prototype.setWitnesses = function (witnesses) {\n  this.witnesses = witnesses;\n};\n\nInput.prototype.isValidSignature = function (transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signingMethod = signingMethod || 'ecdsa';\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, signingMethod);\n};\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\n\n\nInput.prototype.isNull = function () {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' && this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function () {\n  return this.toBufferWriter().toBuffer().length;\n};\n/**\n * Sets sequence number so that transaction is not valid until the desired seconds\n *  since the transaction is mined\n *\n * @param {Number} time in seconds\n * @return {Transaction} this\n */\n\n\nInput.prototype.lockForSeconds = function (seconds) {\n  $.checkArgument(_.isNumber(seconds));\n\n  if (seconds < 0 || seconds >= SEQUENCE_LOCKTIME_GRANULARITY * SEQUENCE_LOCKTIME_MASK) {\n    throw new errors.Transaction.Input.LockTimeRange();\n  }\n\n  seconds = parseInt(Math.floor(seconds / SEQUENCE_LOCKTIME_GRANULARITY)); // SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 \n\n  this.sequenceNumber = seconds | SEQUENCE_LOCKTIME_TYPE_FLAG;\n  return this;\n};\n/**\n * Sets sequence number so that transaction is not valid until the desired block height differnece since the tx is mined\n *\n * @param {Number} height\n * @return {Transaction} this\n */\n\n\nInput.prototype.lockUntilBlockHeight = function (heightDiff) {\n  $.checkArgument(_.isNumber(heightDiff));\n\n  if (heightDiff < 0 || heightDiff >= SEQUENCE_BLOCKDIFF_LIMIT) {\n    throw new errors.Transaction.Input.BlockHeightOutOfRange();\n  } // SEQUENCE_LOCKTIME_TYPE_FLAG = 0\n  // SEQUENCE_LOCKTIME_DISABLE_FLAG = 0\n\n\n  this.sequenceNumber = heightDiff;\n  return this;\n};\n/**\n *  Returns a semantic version of the input's sequence nLockTime.\n *  @return {Number|Date}\n *  If sequence lock is disabled  it returns null,\n *  if is set to block height lock, returns a block height (number)\n *  else it returns a Date object.\n */\n\n\nInput.prototype.getLockTime = function () {\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n    return null;\n  }\n\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_TYPE_FLAG) {\n    var seconds = SEQUENCE_LOCKTIME_GRANULARITY * (this.sequenceNumber & SEQUENCE_LOCKTIME_MASK);\n    return seconds;\n  } else {\n    var blockHeight = this.sequenceNumber & SEQUENCE_LOCKTIME_MASK;\n    return blockHeight;\n  }\n};\n\nmodule.exports = Input;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib/lib/transaction/input/input.js"],"names":["_","require","$","errors","BufferWriter","buffer","BufferUtil","JSUtil","Script","Sighash","Output","MAXINT","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","DEFAULT_RBF_SEQNUMBER","SEQUENCE_LOCKTIME_DISABLE_FLAG","Math","pow","SEQUENCE_LOCKTIME_TYPE_FLAG","SEQUENCE_LOCKTIME_MASK","SEQUENCE_LOCKTIME_GRANULARITY","SEQUENCE_BLOCKDIFF_LIMIT","Input","params","_fromObject","Object","defineProperty","prototype","configurable","enumerable","get","isNull","_script","_scriptBuffer","_isInput","fromObject","obj","checkArgument","isObject","input","prevTxId","isString","isHexa","Buffer","from","witnesses","output","undefined","txidbuf","outputIndex","isUndefined","txoutnum","sequenceNumber","seqnum","script","scriptBuffer","Transaction","MissingScript","setScript","toObject","toJSON","toString","scriptString","fromBufferReader","br","readReverse","readUInt32LE","readVarLengthBuffer","toBufferWriter","writer","writeReverse","writeUInt32LE","writeVarintNum","length","write","toBuffer","isBuffer","TypeError","getSignatures","AbstractMethodInvoked","JSON","stringify","getSatoshisBuffer","checkState","_satoshisBN","writeUInt64LEBN","isFullySigned","isFinal","addSignature","clearSignatures","hasWitnesses","getWitnesses","setWitnesses","isValidSignature","transaction","signature","signingMethod","nhashtype","sigtype","verify","publicKey","inputIndex","_estimateSize","lockForSeconds","seconds","isNumber","LockTimeRange","parseInt","floor","lockUntilBlockHeight","heightDiff","BlockHeightOutOfRange","getLockTime","blockHeight","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../../util/preconditions');\nconst errors = require('../../errors');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar buffer = require('buffer');\nvar BufferUtil = require('../../util/buffer');\nvar JSUtil = require('../../util/js');\nvar Script = require('../../script');\nvar Sighash = require('../sighash');\nvar Output = require('../output');\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nconst SEQUENCE_LOCKTIME_DISABLE_FLAG =  Math.pow(2,31); // (1 << 31);\nconst SEQUENCE_LOCKTIME_TYPE_FLAG = Math.pow(2,22); // (1 << 22);\nconst SEQUENCE_LOCKTIME_MASK = 0xffff;\nconst SEQUENCE_LOCKTIME_GRANULARITY = 512; // 512 seconds\nconst SEQUENCE_BLOCKDIFF_LIMIT = Math.pow(2,16)-1; // 16 bits \n\n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\nInput.SEQUENCE_LOCKTIME_TYPE_FLAG = SEQUENCE_LOCKTIME_TYPE_FLAG;\n\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    if (this.isNull()) {\n      return null;\n    }\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n    return this._script;\n  }\n});\n\nInput.fromObject = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function(params) {\n  var prevTxId;\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = Buffer.from(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n  this.witnesses = [];\n  this.output = params.output ?\n    (params.output instanceof Output ? params.output : new Output(params.output)) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ?\n    (_.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum) : params.sequenceNumber;\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex'),\n  };\n  // add human readable form if input contains valid script\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n  return obj;\n};\n\nInput.fromBufferReader = function(br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE();\n  // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n  return input;\n};\n\nInput.prototype.toBufferWriter = function(writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function(script) {\n  this._script = null;\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = Buffer.from(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = Buffer.from(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\nInput.prototype.getSignatures = function() {\n  throw new errors.AbstractMethodInvoked(\n    'Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' +\n    ' for input: ' + JSON.stringify(this)\n  );\n};\n\nInput.prototype.getSatoshisBuffer = function() {\n  $.checkState(this.output instanceof Output);\n  $.checkState(this.output._satoshisBN);\n  return new BufferWriter().writeUInt64LEBN(this.output._satoshisBN).toBuffer();\n};\n\n\nInput.prototype.isFullySigned = function() {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function() {\n  return this.sequenceNumber !== Input.MAXINT;\n};\n\nInput.prototype.addSignature = function() {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function() {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.hasWitnesses = function() {\n  if (this.witnesses && this.witnesses.length > 0) {\n    return true;\n  }\n  return false;\n};\n\nInput.prototype.getWitnesses = function() {\n  return this.witnesses;\n};\n\nInput.prototype.setWitnesses = function(witnesses) {\n  this.witnesses = witnesses;\n};\n\nInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signingMethod = signingMethod || 'ecdsa';\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script,\n    signingMethod\n  );\n};\n\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\nInput.prototype.isNull = function() {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' &&\n    this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function() {\n  return this.toBufferWriter().toBuffer().length;\n};\n\n\n/**\n * Sets sequence number so that transaction is not valid until the desired seconds\n *  since the transaction is mined\n *\n * @param {Number} time in seconds\n * @return {Transaction} this\n */\nInput.prototype.lockForSeconds = function(seconds) {\n  $.checkArgument(_.isNumber(seconds));\n  if (seconds < 0 ||  seconds >= SEQUENCE_LOCKTIME_GRANULARITY * SEQUENCE_LOCKTIME_MASK) {\n    throw new errors.Transaction.Input.LockTimeRange();\n  }\n  seconds = parseInt(Math.floor(seconds / SEQUENCE_LOCKTIME_GRANULARITY));\n\n  // SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 \n  this.sequenceNumber = seconds | SEQUENCE_LOCKTIME_TYPE_FLAG ;\n  return this;\n};\n\n/**\n * Sets sequence number so that transaction is not valid until the desired block height differnece since the tx is mined\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nInput.prototype.lockUntilBlockHeight = function(heightDiff) {\n  $.checkArgument(_.isNumber(heightDiff));\n  if (heightDiff < 0 || heightDiff >= SEQUENCE_BLOCKDIFF_LIMIT) {\n    throw new errors.Transaction.Input.BlockHeightOutOfRange();\n  }\n  // SEQUENCE_LOCKTIME_TYPE_FLAG = 0\n  // SEQUENCE_LOCKTIME_DISABLE_FLAG = 0\n  this.sequenceNumber = heightDiff ;\n  return this;\n};\n\n\n/**\n *  Returns a semantic version of the input's sequence nLockTime.\n *  @return {Number|Date}\n *  If sequence lock is disabled  it returns null,\n *  if is set to block height lock, returns a block height (number)\n *  else it returns a Date object.\n */\nInput.prototype.getLockTime = function() {\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n    return null;\n  }\n\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_TYPE_FLAG) {\n    var seconds = SEQUENCE_LOCKTIME_GRANULARITY * (this.sequenceNumber & SEQUENCE_LOCKTIME_MASK);\n    return seconds;\n  } else {\n    var blockHeight = this.sequenceNumber & SEQUENCE_LOCKTIME_MASK;\n    return blockHeight;\n  }\n};\n\n\n\n\nmodule.exports = Input;\n"]},"metadata":{},"sourceType":"script"}