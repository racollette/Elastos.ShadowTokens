{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    var containsArg = function (key) {\n      return networks[index][key] === arg;\n    };\n\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n\n    return undefined;\n  }\n\n  if (networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      if (!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n\n      networkMaps[value].push(network);\n    }\n  });\n\n  networks.push(network);\n  return network;\n}\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  for (var key in networkMaps) {\n    const index = networkMaps[key].indexOf(network);\n\n    if (index >= 0) {\n      delete networkMaps[key][index];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: ['seed.bitcoin.sipa.be', 'dnsseed.bluematt.me', 'dnsseed.bitcoin.dashjr.org', 'seed.bitcoinstats.com', 'seed.bitnodes.io', 'bitseed.xf2.org']\n});\n/**\n * @instance\n * @member Networks#livenet\n */\n\nvar livenet = get('livenet');\naddNetwork({\n  name: 'testnet',\n  alias: 'test',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0x0b110907,\n  port: 18333,\n  dnsSeeds: ['testnet-seed.bitcoin.petertodd.org', 'testnet-seed.bluematt.me', 'testnet-seed.alexykot.me', 'testnet-seed.bitcoin.schildbach.de']\n});\n/**\n * @instance\n * @member Networks#testnet\n */\n\nvar testnet = get('testnet');\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xfabfb5da,\n  port: 18444,\n  dnsSeeds: []\n});\n/**\n * @instance\n * @member Networks#testnet\n */\n\nvar regtest = get('regtest');\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib/lib/networks.js"],"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","containsArg","key","index","some","undefined","length","addNetwork","data","network","defineImmutable","alias","pubkeyhash","privatekey","scripthash","bech32prefix","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","each","value","isUndefined","isObject","push","removeNetwork","i","splice","livenet","testnet","regtest","enableRegtest","regtestEnabled","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"mappings":"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","sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  if(networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function(value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      if(!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n      networkMaps[value].push(network);\n    }\n  });\n\n  networks.push(network);\n\n  return network;\n\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    const index = networkMaps[key].indexOf(network);\n    if (index >= 0) {\n      delete networkMaps[key][index];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: [\n    'seed.bitcoin.sipa.be',\n    'dnsseed.bluematt.me',\n    'dnsseed.bitcoin.dashjr.org',\n    'seed.bitcoinstats.com',\n    'seed.bitnodes.io',\n    'bitseed.xf2.org'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\n\naddNetwork({\n  name: 'testnet',\n  alias: 'test',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0x0b110907,\n  port: 18333,\n  dnsSeeds: [\n    'testnet-seed.bitcoin.petertodd.org',\n    'testnet-seed.bluematt.me',\n    'testnet-seed.alexykot.me',\n    'testnet-seed.bitcoin.schildbach.de'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\n\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xfabfb5da,\n  port: 18444,\n  dnsSeeds: []\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar regtest = get('regtest');\n\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"]},"metadata":{},"sourceType":"script"}