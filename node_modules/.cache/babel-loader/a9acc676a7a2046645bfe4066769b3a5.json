{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar bip66 = require('bip66');\n\nvar pushdata = require('pushdata-bitcoin');\n\nvar typeforce = require('typeforce');\n\nvar types = require('./types');\n\nvar scriptNumber = require('./script_number');\n\nvar OPS = require('bitcoin-ops');\n\nvar REVERSE_OPS = require('bitcoin-ops/map');\n\nvar OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1\n\nfunction isOPInt(value) {\n  return types.Number(value) && (value === OPS.OP_0 || value >= OPS.OP_1 && value <= OPS.OP_16 || value === OPS.OP_1NEGATE);\n}\n\nfunction isPushOnlyChunk(value) {\n  return types.Buffer(value) || isOPInt(value);\n}\n\nfunction isPushOnly(value) {\n  return types.Array(value) && value.every(isPushOnlyChunk);\n}\n\nfunction asMinimalOP(buffer) {\n  if (buffer.length === 0) return OPS.OP_0;\n  if (buffer.length !== 1) return;\n  if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0];\n  if (buffer[0] === 0x81) return OPS.OP_1NEGATE;\n}\n\nfunction compile(chunks) {\n  // TODO: remove me\n  if (Buffer.isBuffer(chunks)) return chunks;\n  typeforce(types.Array, chunks);\n  var bufferSize = chunks.reduce(function (accum, chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {\n        return accum + 1;\n      }\n\n      return accum + pushdata.encodingLength(chunk.length) + chunk.length;\n    } // opcode\n\n\n    return accum + 1;\n  }, 0.0);\n  var buffer = Buffer.allocUnsafe(bufferSize);\n  var offset = 0;\n  chunks.forEach(function (chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      var opcode = asMinimalOP(chunk);\n\n      if (opcode !== undefined) {\n        buffer.writeUInt8(opcode, offset);\n        offset += 1;\n        return;\n      }\n\n      offset += pushdata.encode(buffer, chunk.length, offset);\n      chunk.copy(buffer, offset);\n      offset += chunk.length; // opcode\n    } else {\n      buffer.writeUInt8(chunk, offset);\n      offset += 1;\n    }\n  });\n  if (offset !== buffer.length) throw new Error('Could not decode chunks');\n  return buffer;\n}\n\nfunction decompile(buffer) {\n  // TODO: remove me\n  if (types.Array(buffer)) return buffer;\n  typeforce(types.Buffer, buffer);\n  var chunks = [];\n  var i = 0;\n\n  while (i < buffer.length) {\n    var opcode = buffer[i]; // data chunk\n\n    if (opcode > OPS.OP_0 && opcode <= OPS.OP_PUSHDATA4) {\n      var d = pushdata.decode(buffer, i); // did reading a pushDataInt fail? empty script\n\n      if (d === null) return [];\n      i += d.size; // attempt to read too much data? empty script\n\n      if (i + d.number > buffer.length) return [];\n      var data = buffer.slice(i, i + d.number);\n      i += d.number; // decompile minimally\n\n      var op = asMinimalOP(data);\n\n      if (op !== undefined) {\n        chunks.push(op);\n      } else {\n        chunks.push(data);\n      } // opcode\n\n    } else {\n      chunks.push(opcode);\n      i += 1;\n    }\n  }\n\n  return chunks;\n}\n\nfunction toASM(chunks) {\n  if (Buffer.isBuffer(chunks)) {\n    chunks = decompile(chunks);\n  }\n\n  return chunks.map(function (chunk) {\n    // data?\n    if (Buffer.isBuffer(chunk)) {\n      var op = asMinimalOP(chunk);\n      if (op === undefined) return chunk.toString('hex');\n      chunk = op;\n    } // opcode!\n\n\n    return REVERSE_OPS[chunk];\n  }).join(' ');\n}\n\nfunction fromASM(asm) {\n  typeforce(types.String, asm);\n  return compile(asm.split(' ').map(function (chunkStr) {\n    // opcode?\n    if (OPS[chunkStr] !== undefined) return OPS[chunkStr];\n    typeforce(types.Hex, chunkStr); // data!\n\n    return Buffer.from(chunkStr, 'hex');\n  }));\n}\n\nfunction toStack(chunks) {\n  chunks = decompile(chunks);\n  typeforce(isPushOnly, chunks);\n  return chunks.map(function (op) {\n    if (Buffer.isBuffer(op)) return op;\n    if (op === OPS.OP_0) return Buffer.allocUnsafe(0);\n    return scriptNumber.encode(op - OP_INT_BASE);\n  });\n}\n\nfunction isCanonicalPubKey(buffer) {\n  if (!Buffer.isBuffer(buffer)) return false;\n  if (buffer.length < 33) return false;\n\n  switch (buffer[0]) {\n    case 0x02:\n    case 0x03:\n      return buffer.length === 33;\n\n    case 0x04:\n      return buffer.length === 65;\n  }\n\n  return false;\n}\n\nfunction isDefinedHashType(hashType) {\n  var hashTypeMod = hashType & ~0xc0; // return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE\n\n  return hashTypeMod > 0x00 && hashTypeMod < 0x04;\n}\n\nfunction isCanonicalSignature(buffer) {\n  if (!Buffer.isBuffer(buffer)) return false;\n  if (!isDefinedHashType(buffer[buffer.length - 1])) return false;\n  return bip66.check(buffer.slice(0, -1));\n}\n\nmodule.exports = {\n  compile: compile,\n  decompile: decompile,\n  fromASM: fromASM,\n  toASM: toASM,\n  toStack: toStack,\n  number: require('./script_number'),\n  isCanonicalPubKey: isCanonicalPubKey,\n  isCanonicalSignature: isCanonicalSignature,\n  isPushOnly: isPushOnly,\n  isDefinedHashType: isDefinedHashType\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitgo-utxo-lib/src/script.js"],"names":["Buffer","require","bip66","pushdata","typeforce","types","scriptNumber","OPS","REVERSE_OPS","OP_INT_BASE","OP_RESERVED","isOPInt","value","Number","OP_0","OP_1","OP_16","OP_1NEGATE","isPushOnlyChunk","isPushOnly","Array","every","asMinimalOP","buffer","length","compile","chunks","isBuffer","bufferSize","reduce","accum","chunk","undefined","encodingLength","allocUnsafe","offset","forEach","opcode","writeUInt8","encode","copy","Error","decompile","i","OP_PUSHDATA4","d","decode","size","number","data","slice","op","push","toASM","map","toString","join","fromASM","asm","String","split","chunkStr","Hex","from","toStack","isCanonicalPubKey","isDefinedHashType","hashType","hashTypeMod","isCanonicalSignature","check","module","exports"],"mappings":"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","sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar bip66 = require('bip66')\nvar pushdata = require('pushdata-bitcoin')\nvar typeforce = require('typeforce')\nvar types = require('./types')\nvar scriptNumber = require('./script_number')\n\nvar OPS = require('bitcoin-ops')\nvar REVERSE_OPS = require('bitcoin-ops/map')\nvar OP_INT_BASE = OPS.OP_RESERVED // OP_1 - 1\n\nfunction isOPInt (value) {\n  return types.Number(value) &&\n    ((value === OPS.OP_0) ||\n    (value >= OPS.OP_1 && value <= OPS.OP_16) ||\n    (value === OPS.OP_1NEGATE))\n}\n\nfunction isPushOnlyChunk (value) {\n  return types.Buffer(value) || isOPInt(value)\n}\n\nfunction isPushOnly (value) {\n  return types.Array(value) && value.every(isPushOnlyChunk)\n}\n\nfunction asMinimalOP (buffer) {\n  if (buffer.length === 0) return OPS.OP_0\n  if (buffer.length !== 1) return\n  if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0]\n  if (buffer[0] === 0x81) return OPS.OP_1NEGATE\n}\n\nfunction compile (chunks) {\n  // TODO: remove me\n  if (Buffer.isBuffer(chunks)) return chunks\n\n  typeforce(types.Array, chunks)\n\n  var bufferSize = chunks.reduce(function (accum, chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {\n        return accum + 1\n      }\n\n      return accum + pushdata.encodingLength(chunk.length) + chunk.length\n    }\n\n    // opcode\n    return accum + 1\n  }, 0.0)\n\n  var buffer = Buffer.allocUnsafe(bufferSize)\n  var offset = 0\n\n  chunks.forEach(function (chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      var opcode = asMinimalOP(chunk)\n      if (opcode !== undefined) {\n        buffer.writeUInt8(opcode, offset)\n        offset += 1\n        return\n      }\n\n      offset += pushdata.encode(buffer, chunk.length, offset)\n      chunk.copy(buffer, offset)\n      offset += chunk.length\n\n    // opcode\n    } else {\n      buffer.writeUInt8(chunk, offset)\n      offset += 1\n    }\n  })\n\n  if (offset !== buffer.length) throw new Error('Could not decode chunks')\n  return buffer\n}\n\nfunction decompile (buffer) {\n  // TODO: remove me\n  if (types.Array(buffer)) return buffer\n\n  typeforce(types.Buffer, buffer)\n\n  var chunks = []\n  var i = 0\n\n  while (i < buffer.length) {\n    var opcode = buffer[i]\n\n    // data chunk\n    if ((opcode > OPS.OP_0) && (opcode <= OPS.OP_PUSHDATA4)) {\n      var d = pushdata.decode(buffer, i)\n\n      // did reading a pushDataInt fail? empty script\n      if (d === null) return []\n      i += d.size\n\n      // attempt to read too much data? empty script\n      if (i + d.number > buffer.length) return []\n\n      var data = buffer.slice(i, i + d.number)\n      i += d.number\n\n      // decompile minimally\n      var op = asMinimalOP(data)\n      if (op !== undefined) {\n        chunks.push(op)\n      } else {\n        chunks.push(data)\n      }\n\n    // opcode\n    } else {\n      chunks.push(opcode)\n\n      i += 1\n    }\n  }\n\n  return chunks\n}\n\nfunction toASM (chunks) {\n  if (Buffer.isBuffer(chunks)) {\n    chunks = decompile(chunks)\n  }\n\n  return chunks.map(function (chunk) {\n    // data?\n    if (Buffer.isBuffer(chunk)) {\n      var op = asMinimalOP(chunk)\n      if (op === undefined) return chunk.toString('hex')\n      chunk = op\n    }\n\n    // opcode!\n    return REVERSE_OPS[chunk]\n  }).join(' ')\n}\n\nfunction fromASM (asm) {\n  typeforce(types.String, asm)\n\n  return compile(asm.split(' ').map(function (chunkStr) {\n    // opcode?\n    if (OPS[chunkStr] !== undefined) return OPS[chunkStr]\n    typeforce(types.Hex, chunkStr)\n\n    // data!\n    return Buffer.from(chunkStr, 'hex')\n  }))\n}\n\nfunction toStack (chunks) {\n  chunks = decompile(chunks)\n  typeforce(isPushOnly, chunks)\n\n  return chunks.map(function (op) {\n    if (Buffer.isBuffer(op)) return op\n    if (op === OPS.OP_0) return Buffer.allocUnsafe(0)\n\n    return scriptNumber.encode(op - OP_INT_BASE)\n  })\n}\n\nfunction isCanonicalPubKey (buffer) {\n  if (!Buffer.isBuffer(buffer)) return false\n  if (buffer.length < 33) return false\n\n  switch (buffer[0]) {\n    case 0x02:\n    case 0x03:\n      return buffer.length === 33\n    case 0x04:\n      return buffer.length === 65\n  }\n\n  return false\n}\n\nfunction isDefinedHashType (hashType) {\n  var hashTypeMod = hashType & ~0xc0\n\n// return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE\n  return hashTypeMod > 0x00 && hashTypeMod < 0x04\n}\n\nfunction isCanonicalSignature (buffer) {\n  if (!Buffer.isBuffer(buffer)) return false\n  if (!isDefinedHashType(buffer[buffer.length - 1])) return false\n\n  return bip66.check(buffer.slice(0, -1))\n}\n\nmodule.exports = {\n  compile: compile,\n  decompile: decompile,\n  fromASM: fromASM,\n  toASM: toASM,\n  toStack: toStack,\n\n  number: require('./script_number'),\n\n  isCanonicalPubKey: isCanonicalPubKey,\n  isCanonicalSignature: isCanonicalSignature,\n  isPushOnly: isPushOnly,\n  isDefinedHashType: isDefinedHashType\n}\n"]},"metadata":{},"sourceType":"script"}