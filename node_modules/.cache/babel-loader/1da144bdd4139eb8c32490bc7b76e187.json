{"ast":null,"code":"import { bchAddressFrom, bchAddressToHex, btcAddressFrom, btcAddressToHex, createBCHAddress, createBTCAddress, createZECAddress, getBitcoinCashUTXO, getBitcoinCashUTXOs, getBitcoinUTXO, getBitcoinUTXOs, getZcashUTXO, getZcashUTXOs, zecAddressFrom, zecAddressToHex } from \"@renproject/chains\";\nimport { Chain, Tokens as CommonTokens } from \"@renproject/interfaces\";\nimport { ripemd160, sha256 } from \"ethereumjs-util\";\nimport { Ox } from \"./common\";\nimport { parseRenContract } from \"./renVMUtils\"; // const hexOrBase64ToBuffer = (value: string | Buffer): Buffer =>\n//     typeof value === \"string\" ?\n//         value.slice(0, 2) === \"0x\" ?\n//             Buffer.from(strip0x(value), \"hex\") :\n//             Buffer.from(value, \"base64\") :\n//         Buffer.from(value);\n\nexport const hash160 = publicKey => ripemd160(sha256(publicKey), false);\n/**\n * Generate Gateway address for a cross-chain transfer's origin chain.\n */\n\nexport const generateAddress = (renContract, gHash, mpkh, isTestnet) => {\n  const chain = parseRenContract(renContract).from;\n\n  switch (chain) {\n    case Chain.Bitcoin:\n      return createBTCAddress(isTestnet, Ox(mpkh), gHash);\n\n    case Chain.Zcash:\n      return createZECAddress(isTestnet, Ox(mpkh), gHash);\n\n    case Chain.BitcoinCash:\n      return createBCHAddress(isTestnet, Ox(mpkh), gHash);\n\n    default:\n      throw new Error(`Unable to generate deposit address for chain ${chain}`);\n  }\n};\n/**\n * Retrieves unspent deposits at the provided address.\n * An optional `confirmations` parameter limits UTXOs to ones with at least that\n * amount of confirmations.\n */\n\nexport const retrieveDeposits = async (_network, renContract, address, confirmations = 0) => {\n  const chain = parseRenContract(renContract).from;\n\n  switch (chain) {\n    case Chain.Bitcoin:\n      return (await getBitcoinUTXOs(_network)(address, confirmations)).map(utxo => ({\n        chain: Chain.Bitcoin,\n        utxo\n      }));\n\n    case Chain.Zcash:\n      return (await getZcashUTXOs(_network)(address, confirmations)).map(utxo => ({\n        chain: Chain.Zcash,\n        utxo\n      }));\n\n    case Chain.BitcoinCash:\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      return (await getBitcoinCashUTXOs(_network)(address, confirmations)).map(utxo => ({\n        chain: Chain.BitcoinCash,\n        utxo\n      }));\n\n    default:\n      throw new Error(`Unable to retrieve deposits for chain ${chain}`);\n  }\n};\n/**\n * Returns the number of confirmations for the specified UTXO.\n */\n\nexport const retrieveUTXO = async (_network, chain, transaction) => {\n  // tslint:disable-next-line: no-any\n  const {\n    txHash,\n    vOut\n  } = transaction;\n\n  switch (chain) {\n    case Chain.Bitcoin:\n      return await getBitcoinUTXO(_network)(txHash, vOut);\n\n    case Chain.Zcash:\n      return await getZcashUTXO(_network)(txHash, vOut);\n\n    case Chain.BitcoinCash:\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      return await getBitcoinCashUTXO(_network)(txHash, vOut);\n\n    default:\n      throw new Error(`Unable to retrieve deposits for chain ${chain}`);\n  }\n};\nexport const btcUtils = {\n  getUTXOs: getBitcoinUTXOs,\n  addressToHex: btcAddressToHex,\n  addressFrom: btcAddressFrom\n};\nexport const zecUtils = {\n  getUTXOs: getZcashUTXOs,\n  addressToHex: zecAddressToHex,\n  addressFrom: zecAddressFrom\n};\nexport const bchUtils = {\n  getUTXOs: getBitcoinCashUTXOs,\n  addressToHex: bchAddressToHex,\n  addressFrom: bchAddressFrom\n};\nexport const Tokens = {\n  // Bitcoin\n  BTC: { ...CommonTokens.BTC,\n    ...btcUtils\n  },\n  // Zcash\n  ZEC: { ...CommonTokens.ZEC,\n    ...zecUtils\n  },\n  // Bitcoin Cash\n  BCH: { ...CommonTokens.BCH,\n    ...bchUtils\n  }\n};","map":{"version":3,"sources":["../../src/chains.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { bchAddressFrom, bchAddressToHex, btcAddressFrom, btcAddressToHex, createBCHAddress, createBTCAddress, createZECAddress, getBitcoinCashUTXO, getBitcoinCashUTXOs, getBitcoinUTXO, getBitcoinUTXOs, getZcashUTXO, getZcashUTXOs, zecAddressFrom, zecAddressToHex, } from \"@renproject/chains\";\nimport { Chain, Tokens as CommonTokens, } from \"@renproject/interfaces\";\nimport { ripemd160, sha256 } from \"ethereumjs-util\";\nimport { Ox } from \"./common\";\nimport { parseRenContract } from \"./renVMUtils\";\n// const hexOrBase64ToBuffer = (value: string | Buffer): Buffer =>\n//     typeof value === \"string\" ?\n//         value.slice(0, 2) === \"0x\" ?\n//             Buffer.from(strip0x(value), \"hex\") :\n//             Buffer.from(value, \"base64\") :\n//         Buffer.from(value);\nexport const hash160 = (publicKey) => ripemd160(sha256(publicKey), false);\n/**\n * Generate Gateway address for a cross-chain transfer's origin chain.\n */\nexport const generateAddress = (renContract, gHash, mpkh, isTestnet) => {\n    const chain = parseRenContract(renContract).from;\n    switch (chain) {\n        case Chain.Bitcoin:\n            return createBTCAddress(isTestnet, Ox(mpkh), gHash);\n        case Chain.Zcash:\n            return createZECAddress(isTestnet, Ox(mpkh), gHash);\n        case Chain.BitcoinCash:\n            return createBCHAddress(isTestnet, Ox(mpkh), gHash);\n        default:\n            throw new Error(`Unable to generate deposit address for chain ${chain}`);\n    }\n};\n/**\n * Retrieves unspent deposits at the provided address.\n * An optional `confirmations` parameter limits UTXOs to ones with at least that\n * amount of confirmations.\n */\nexport const retrieveDeposits = async (_network, renContract, address, confirmations = 0) => {\n    const chain = parseRenContract(renContract).from;\n    switch (chain) {\n        case Chain.Bitcoin:\n            return (await getBitcoinUTXOs(_network)(address, confirmations)).map((utxo) => ({\n                chain: Chain.Bitcoin,\n                utxo,\n            }));\n        case Chain.Zcash:\n            return (await getZcashUTXOs(_network)(address, confirmations)).map((utxo) => ({\n                chain: Chain.Zcash,\n                utxo,\n            }));\n        case Chain.BitcoinCash:\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            return (await getBitcoinCashUTXOs(_network)(address, confirmations)).map((utxo) => ({\n                chain: Chain.BitcoinCash,\n                utxo,\n            }));\n        default:\n            throw new Error(`Unable to retrieve deposits for chain ${chain}`);\n    }\n};\n/**\n * Returns the number of confirmations for the specified UTXO.\n */\nexport const retrieveUTXO = async (_network, chain, transaction) => {\n    // tslint:disable-next-line: no-any\n    const { txHash, vOut } = transaction;\n    switch (chain) {\n        case Chain.Bitcoin:\n            return await getBitcoinUTXO(_network)(txHash, vOut);\n        case Chain.Zcash:\n            return await getZcashUTXO(_network)(txHash, vOut);\n        case Chain.BitcoinCash:\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            return await getBitcoinCashUTXO(_network)(txHash, vOut);\n        default:\n            throw new Error(`Unable to retrieve deposits for chain ${chain}`);\n    }\n};\nexport const btcUtils = {\n    getUTXOs: getBitcoinUTXOs,\n    addressToHex: btcAddressToHex,\n    addressFrom: btcAddressFrom,\n};\nexport const zecUtils = {\n    getUTXOs: getZcashUTXOs,\n    addressToHex: zecAddressToHex,\n    addressFrom: zecAddressFrom,\n};\nexport const bchUtils = {\n    getUTXOs: getBitcoinCashUTXOs,\n    addressToHex: bchAddressToHex,\n    addressFrom: bchAddressFrom,\n};\nexport const Tokens = {\n    // Bitcoin\n    BTC: {\n        ...CommonTokens.BTC,\n        ...btcUtils,\n    },\n    // Zcash\n    ZEC: {\n        ...CommonTokens.ZEC,\n        ...zecUtils,\n    },\n    // Bitcoin Cash\n    BCH: {\n        ...CommonTokens.BCH,\n        ...bchUtils,\n    },\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NoYWlucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsY0FBYyxFQUNkLGVBQWUsRUFDZixjQUFjLEVBQ2QsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixtQkFBbUIsRUFFbkIsY0FBYyxFQUNkLGVBQWUsRUFFZixZQUFZLEVBQ1osYUFBYSxFQUNiLGNBQWMsRUFDZCxlQUFlLEdBQ2xCLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUNILEtBQUssRUFFTCxNQUFNLElBQUksWUFBWSxHQUt6QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHcEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFaEQsa0VBQWtFO0FBQ2xFLGtDQUFrQztBQUNsQyx1Q0FBdUM7QUFDdkMsbURBQW1EO0FBQ25ELDZDQUE2QztBQUM3Qyw4QkFBOEI7QUFFOUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsU0FBaUIsRUFBVSxFQUFFLENBQ2pELFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDM0IsV0FBd0IsRUFDeEIsS0FBYSxFQUNiLElBQVksRUFDWixTQUFrQixFQUNaLEVBQUU7SUFDUixNQUFNLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakQsUUFBUSxLQUFLLEVBQUU7UUFDWCxLQUFLLEtBQUssQ0FBQyxPQUFPO1lBQ2QsT0FBTyxn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"]},"metadata":{},"sourceType":"module"}