{"ast":null,"code":"import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 10 * 1000; //10 seconds\n\nconst memcache = {\n  timestamp: 0,\n  blockNumber: 0\n};\nexport default (async ({\n  payload,\n  requestManager\n}, res, next) => {\n  if (payload.method !== 'eth_blockNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n\n  if (memcache.timestamp < new Date().getTime() - WAIT_TIME) {\n    try {\n      const blockNumber = await ethCalls.getBlockNumber();\n      memcache.blockNumber = blockNumber;\n      memcache.timestamp = new Date().getTime();\n      res(null, toPayload(payload.id, blockNumber));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(null, toPayload(payload.id, memcache.blockNumber || null));\n  }\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/eth_blockNumber.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","timestamp","blockNumber","payload","requestManager","res","next","method","ethCalls","Date","getTime","getBlockNumber","id","e"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,MAAMC,QAAQ,GAAG;AAAEC,EAAAA,SAAS,EAAE,CAAb;AAAgBC,EAAAA,WAAW,EAAE;AAA7B,CAAjB;AACA,gBAAe,OAAO;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAP,EAAoCC,GAApC,EAAyCC,IAAzC,KAAkD;AAC/D,MAAIH,OAAO,CAACI,MAAR,KAAmB,iBAAvB,EAA0C,OAAOD,IAAI,EAAX;AAC1C,QAAME,QAAQ,GAAG,IAAIV,QAAJ,CAAaM,cAAb,CAAjB;;AACA,MAAIJ,QAAQ,CAACC,SAAT,GAAqB,IAAIQ,IAAJ,GAAWC,OAAX,KAAuBX,SAAhD,EAA2D;AACzD,QAAI;AACF,YAAMG,WAAW,GAAG,MAAMM,QAAQ,CAACG,cAAT,EAA1B;AACAX,MAAAA,QAAQ,CAACE,WAAT,GAAuBA,WAAvB;AACAF,MAAAA,QAAQ,CAACC,SAAT,GAAqB,IAAIQ,IAAJ,GAAWC,OAAX,EAArB;AACAL,MAAAA,GAAG,CAAC,IAAD,EAAOR,SAAS,CAACM,OAAO,CAACS,EAAT,EAAaV,WAAb,CAAhB,CAAH;AACD,KALD,CAKE,OAAOW,CAAP,EAAU;AACVR,MAAAA,GAAG,CAAC,IAAD,EAAOR,SAAS,CAACM,OAAO,CAACS,EAAT,EAAa,IAAb,CAAhB,CAAH;AACD;AACF,GATD,MASO;AACLP,IAAAA,GAAG,CAAC,IAAD,EAAOR,SAAS,CAACM,OAAO,CAACS,EAAT,EAAaZ,QAAQ,CAACE,WAAT,IAAwB,IAArC,CAAhB,CAAH;AACD;AACF,CAfD","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\n\nconst WAIT_TIME = 10 * 1000; //10 seconds\nconst memcache = { timestamp: 0, blockNumber: 0 };\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_blockNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n  if (memcache.timestamp < new Date().getTime() - WAIT_TIME) {\n    try {\n      const blockNumber = await ethCalls.getBlockNumber();\n      memcache.blockNumber = blockNumber;\n      memcache.timestamp = new Date().getTime();\n      res(null, toPayload(payload.id, blockNumber));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(null, toPayload(payload.id, memcache.blockNumber || null));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}