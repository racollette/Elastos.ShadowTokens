{"ast":null,"code":"var assert = require('nanoassert');\n\nvar wasm = require('./blake2b.js')();\n\nvar head = 64;\nvar freeList = [];\nmodule.exports = Blake2b;\nvar BYTES_MIN = module.exports.BYTES_MIN = 16;\nvar BYTES_MAX = module.exports.BYTES_MAX = 64;\nvar BYTES = module.exports.BYTES = 32;\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16;\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64;\nvar KEYBYTES = module.exports.KEYBYTES = 32;\nvar SALTBYTES = module.exports.SALTBYTES = 16;\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16;\n\nfunction Blake2b(digestLength, key, salt, personal, noAssert) {\n  if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert);\n  if (!(wasm && wasm.exports)) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)');\n  if (!digestLength) digestLength = 32;\n\n  if (noAssert !== true) {\n    assert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength);\n    assert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength);\n\n    if (key != null) {\n      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer');\n      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length);\n      assert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length);\n    }\n\n    if (salt != null) {\n      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer');\n      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length);\n    }\n\n    if (personal != null) {\n      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer');\n      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length);\n    }\n  }\n\n  if (!freeList.length) {\n    freeList.push(head);\n    head += 216;\n  }\n\n  this.digestLength = digestLength;\n  this.finalized = false;\n  this.pointer = freeList.pop();\n  wasm.memory.fill(0, 0, 64);\n  wasm.memory[0] = this.digestLength;\n  wasm.memory[1] = key ? key.length : 0;\n  wasm.memory[2] = 1; // fanout\n\n  wasm.memory[3] = 1; // depth\n\n  if (salt) wasm.memory.set(salt, 32);\n  if (personal) wasm.memory.set(personal, 48);\n  if (this.pointer + 216 > wasm.memory.length) wasm.realloc(this.pointer + 216); // we need 216 bytes for the state\n\n  wasm.exports.blake2b_init(this.pointer, this.digestLength);\n\n  if (key) {\n    this.update(key);\n    wasm.memory.fill(0, head, head + key.length); // whiteout key\n\n    wasm.memory[this.pointer + 200] = 128;\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  assert(this.finalized === false, 'Hash instance finalized');\n  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer');\n  if (head + input.length > wasm.memory.length) wasm.realloc(head + input.length);\n  wasm.memory.set(input, head);\n  wasm.exports.blake2b_update(this.pointer, head, head + input.length);\n  return this;\n};\n\nBlake2b.prototype.digest = function (enc) {\n  assert(this.finalized === false, 'Hash instance finalized');\n  this.finalized = true;\n  freeList.push(this.pointer);\n  wasm.exports.blake2b_final(this.pointer);\n\n  if (!enc || enc === 'binary') {\n    return wasm.memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength);\n  }\n\n  if (enc === 'hex') {\n    return hexSlice(wasm.memory, this.pointer + 128, this.digestLength);\n  }\n\n  assert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer');\n\n  for (var i = 0; i < this.digestLength; i++) {\n    enc[i] = wasm.memory[this.pointer + 128 + i];\n  }\n\n  return enc;\n}; // libsodium compat\n\n\nBlake2b.prototype.final = Blake2b.prototype.digest;\nBlake2b.WASM = wasm && wasm.buffer;\nBlake2b.SUPPORTED = typeof WebAssembly !== 'undefined';\n\nBlake2b.ready = function (cb) {\n  if (!cb) cb = noop;\n  if (!wasm) return cb(new Error('WebAssembly not supported')); // backwards compat, can be removed in a new major\n\n  var p = new Promise(function (reject, resolve) {\n    wasm.onload(function (err) {\n      if (err) resolve();else reject();\n      cb(err);\n    });\n  });\n  return p;\n};\n\nBlake2b.prototype.ready = Blake2b.ready;\n\nfunction noop() {}\n\nfunction hexSlice(buf, start, len) {\n  var str = '';\n\n  for (var i = 0; i < len; i++) str += toHex(buf[start + i]);\n\n  return str;\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/blake2b-wasm/index.js"],"names":["assert","require","wasm","head","freeList","module","exports","Blake2b","BYTES_MIN","BYTES_MAX","BYTES","KEYBYTES_MIN","KEYBYTES_MAX","KEYBYTES","SALTBYTES","PERSONALBYTES","digestLength","key","salt","personal","noAssert","Error","Uint8Array","length","push","finalized","pointer","pop","memory","fill","set","realloc","blake2b_init","update","prototype","input","blake2b_update","digest","enc","blake2b_final","slice","hexSlice","i","final","WASM","buffer","SUPPORTED","WebAssembly","ready","cb","noop","p","Promise","reject","resolve","onload","err","buf","start","len","str","toHex","n","toString"],"mappings":"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","sourcesContent":["var assert = require('nanoassert')\nvar wasm = require('./blake2b.js')()\n\nvar head = 64\nvar freeList = []\n\nmodule.exports = Blake2b\nvar BYTES_MIN = module.exports.BYTES_MIN = 16\nvar BYTES_MAX = module.exports.BYTES_MAX = 64\nvar BYTES = module.exports.BYTES = 32\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64\nvar KEYBYTES = module.exports.KEYBYTES = 32\nvar SALTBYTES = module.exports.SALTBYTES = 16\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16\n\nfunction Blake2b (digestLength, key, salt, personal, noAssert) {\n  if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert)\n  if (!(wasm && wasm.exports)) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)')\n  if (!digestLength) digestLength = 32\n\n  if (noAssert !== true) {\n    assert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength)\n    assert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength)\n    if (key != null) {\n      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer')\n      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length)\n      assert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length)\n    }\n    if (salt != null) {\n      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer')\n      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length)\n    }\n    if (personal != null) {\n      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer')\n      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length)\n    }\n  }\n\n  if (!freeList.length) {\n    freeList.push(head)\n    head += 216\n  }\n\n  this.digestLength = digestLength\n  this.finalized = false\n  this.pointer = freeList.pop()\n\n  wasm.memory.fill(0, 0, 64)\n  wasm.memory[0] = this.digestLength\n  wasm.memory[1] = key ? key.length : 0\n  wasm.memory[2] = 1 // fanout\n  wasm.memory[3] = 1 // depth\n\n  if (salt) wasm.memory.set(salt, 32)\n  if (personal) wasm.memory.set(personal, 48)\n\n  if (this.pointer + 216 > wasm.memory.length) wasm.realloc(this.pointer + 216) // we need 216 bytes for the state\n  wasm.exports.blake2b_init(this.pointer, this.digestLength)\n\n  if (key) {\n    this.update(key)\n    wasm.memory.fill(0, head, head + key.length) // whiteout key\n    wasm.memory[this.pointer + 200] = 128\n  }\n}\n\n\nBlake2b.prototype.update = function (input) {\n  assert(this.finalized === false, 'Hash instance finalized')\n  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer')\n\n  if (head + input.length > wasm.memory.length) wasm.realloc(head + input.length)\n  wasm.memory.set(input, head)\n  wasm.exports.blake2b_update(this.pointer, head, head + input.length)\n  return this\n}\n\nBlake2b.prototype.digest = function (enc) {\n  assert(this.finalized === false, 'Hash instance finalized')\n  this.finalized = true\n\n  freeList.push(this.pointer)\n  wasm.exports.blake2b_final(this.pointer)\n\n  if (!enc || enc === 'binary') {\n    return wasm.memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength)\n  }\n\n  if (enc === 'hex') {\n    return hexSlice(wasm.memory, this.pointer + 128, this.digestLength)\n  }\n\n  assert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer')\n  for (var i = 0; i < this.digestLength; i++) {\n    enc[i] = wasm.memory[this.pointer + 128 + i]\n  }\n\n  return enc\n}\n\n// libsodium compat\nBlake2b.prototype.final = Blake2b.prototype.digest\n\nBlake2b.WASM = wasm && wasm.buffer\nBlake2b.SUPPORTED = typeof WebAssembly !== 'undefined'\n\nBlake2b.ready = function (cb) {\n  if (!cb) cb = noop\n  if (!wasm) return cb(new Error('WebAssembly not supported'))\n\n  // backwards compat, can be removed in a new major\n  var p = new Promise(function (reject, resolve) {\n    wasm.onload(function (err) {\n      if (err) resolve()\n      else reject()\n      cb(err)\n    })\n  })\n\n  return p\n}\n\nBlake2b.prototype.ready = Blake2b.ready\n\nfunction noop () {}\n\nfunction hexSlice (buf, start, len) {\n  var str = ''\n  for (var i = 0; i < len; i++) str += toHex(buf[start + i])\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n"]},"metadata":{},"sourceType":"script"}