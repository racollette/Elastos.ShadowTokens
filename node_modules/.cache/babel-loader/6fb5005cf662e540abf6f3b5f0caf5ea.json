{"ast":null,"code":"'use strict';\n\nvar bufferUtil = require('../util/buffer');\n\nvar assert = require('assert');\n\nvar BufferWriter = function BufferWriter(obj) {\n  if (!(this instanceof BufferWriter)) return new BufferWriter(obj);\n  this.bufLen = 0;\n  if (obj) this.set(obj);else this.bufs = [];\n};\n\nBufferWriter.prototype.set = function (obj) {\n  this.bufs = obj.bufs || this.bufs || [];\n  this.bufLen = this.bufs.reduce(function (prev, buf) {\n    return prev + buf.length;\n  }, 0);\n  return this;\n};\n\nBufferWriter.prototype.toBuffer = function () {\n  return this.concat();\n};\n\nBufferWriter.prototype.concat = function () {\n  return Buffer.concat(this.bufs, this.bufLen);\n};\n\nBufferWriter.prototype.write = function (buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(buf);\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeReverse = function (buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(bufferUtil.reverse(buf));\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeUInt8 = function (n) {\n  var buf = Buffer.alloc(1);\n  buf.writeUInt8(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16BE = function (n) {\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16LE = function (n) {\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32BE = function (n) {\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeInt32LE = function (n) {\n  var buf = Buffer.alloc(4);\n  buf.writeInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32LE = function (n) {\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64BEBN = function (bn) {\n  var buf = bn.toBuffer({\n    size: 8\n  });\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64LEBN = function (bn) {\n  var buf = bn.toBuffer({\n    size: 8\n  });\n  this.writeReverse(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintNum = function (n) {\n  var buf = BufferWriter.varintBufNum(n);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintBN = function (bn) {\n  var buf = BufferWriter.varintBufBN(bn);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.varintBufNum = function (n) {\n  var buf = undefined;\n\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    buf = Buffer.alloc(1 + 8);\n    buf.writeUInt8(255, 0);\n    buf.writeInt32LE(n & -1, 1);\n    buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);\n  }\n\n  return buf;\n};\n\nBufferWriter.varintBufBN = function (bn) {\n  var buf = undefined;\n  var n = bn.toNumber();\n\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    var bw = new BufferWriter();\n    bw.writeUInt8(255);\n    bw.writeUInt64LEBN(bn);\n    var buf = bw.concat();\n  }\n\n  return buf;\n};\n\nmodule.exports = BufferWriter;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/bitcore-lib/lib/encoding/bufferwriter.js"],"names":["bufferUtil","require","assert","BufferWriter","obj","bufLen","set","bufs","prototype","reduce","prev","buf","length","toBuffer","concat","Buffer","write","isBuffer","push","writeReverse","reverse","writeUInt8","n","alloc","writeUInt16BE","writeUInt16LE","writeUInt32BE","writeInt32LE","writeUInt32LE","writeUInt64BEBN","bn","size","writeUInt64LEBN","writeVarintNum","varintBufNum","writeVarintBN","varintBufBN","undefined","Math","floor","toNumber","bw","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar bufferUtil = require('../util/buffer');\nvar assert = require('assert');\n\nvar BufferWriter = function BufferWriter(obj) {\n  if (!(this instanceof BufferWriter))\n    return new BufferWriter(obj);\n  this.bufLen = 0;\n  if (obj)\n    this.set(obj);\n  else\n    this.bufs = [];\n};\n\nBufferWriter.prototype.set = function(obj) {\n  this.bufs = obj.bufs || this.bufs || [];\n  this.bufLen = this.bufs.reduce(function(prev, buf){ return prev + buf.length; }, 0);\n  return this;\n};\n\nBufferWriter.prototype.toBuffer = function() {\n  return this.concat();\n};\n\nBufferWriter.prototype.concat = function() {\n  return Buffer.concat(this.bufs, this.bufLen);\n};\n\nBufferWriter.prototype.write = function(buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(buf);\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeReverse = function(buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(bufferUtil.reverse(buf));\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeUInt8 = function(n) {\n  var buf = Buffer.alloc(1);\n  buf.writeUInt8(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16BE = function(n) {\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16LE = function(n) {\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32BE = function(n) {\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeInt32LE = function(n) {\n  var buf = Buffer.alloc(4);\n  buf.writeInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32LE = function(n) {\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64BEBN = function(bn) {\n  var buf = bn.toBuffer({size: 8});\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64LEBN = function(bn) {\n  var buf = bn.toBuffer({size: 8});\n  this.writeReverse(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintNum = function(n) {\n  var buf = BufferWriter.varintBufNum(n);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintBN = function(bn) {\n  var buf = BufferWriter.varintBufBN(bn);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.varintBufNum = function(n) {\n  var buf = undefined;\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    buf = Buffer.alloc(1 + 8);\n    buf.writeUInt8(255, 0);\n    buf.writeInt32LE(n & -1, 1);\n    buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);\n  }\n  return buf;\n};\n\nBufferWriter.varintBufBN = function(bn) {\n  var buf = undefined;\n  var n = bn.toNumber();\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    var bw = new BufferWriter();\n    bw.writeUInt8(255);\n    bw.writeUInt64LEBN(bn);\n    var buf = bw.concat();\n  }\n  return buf;\n};\n\nmodule.exports = BufferWriter;\n"]},"metadata":{},"sourceType":"script"}