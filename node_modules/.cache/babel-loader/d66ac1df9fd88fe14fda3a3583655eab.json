{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryNTimes = exports.fallback = exports.extractError = exports.sleep = void 0;\n\nexports.sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexports.extractError = error => {\n  if (typeof error === \"object\") {\n    if (error.response && error.response.request && error.response.request.statusText) {\n      return exports.extractError(error.response.request.statusText);\n    }\n\n    if (error.response) {\n      return exports.extractError(error.response);\n    }\n\n    if (error.error) {\n      return exports.extractError(error.error);\n    }\n\n    if (error.message) {\n      return exports.extractError(error.message);\n    }\n\n    if (error.data) {\n      return exports.extractError(error.data);\n    }\n\n    if (error.statusText) {\n      return exports.extractError(error.statusText);\n    }\n\n    try {\n      return JSON.stringify(error);\n    } catch (error) {// Ignore JSON error\n    }\n  }\n\n  return String(error);\n};\n\nexports.fallback = async fallbacks => {\n  let firstError;\n\n  for (const fn of fallbacks) {\n    if (!fn) {\n      continue;\n    }\n\n    try {\n      return await fn();\n    } catch (error) {\n      firstError = firstError || error;\n    }\n  }\n\n  throw firstError || new Error(\"No result returned\");\n};\n\nexports.retryNTimes = async (fnCall, retries) => {\n  let returnError;\n\n  for (let i = 0; i < retries; i++) {\n    // if (i > 0) {\n    //     console.debug(`Retrying...`);\n    // }\n    try {\n      return await fnCall();\n    } catch (error) {\n      if (String(error).match(/timeout of .* exceeded/)) {\n        returnError = error;\n      } else {\n        const errorMessage = exports.extractError(error);\n\n        if (errorMessage) {\n          // tslint:disable-next-line: no-object-mutation\n          error.message += ` (${errorMessage})`;\n        }\n\n        throw error;\n      }\n    }\n\n    await exports.sleep(500);\n  }\n\n  throw returnError;\n};","map":{"version":3,"sources":["../../../src/lib/retry.ts"],"names":[],"mappings":";;;;;;;AAAa,OAAA,CAAA,KAAA,GAAS,EAAD,IAAgB,IAAI,OAAJ,CAAY,OAAO,IAAI,UAAU,CAAC,OAAD,EAAU,EAAV,CAAjC,CAAxB;;AAEA,OAAA,CAAA,YAAA,GAAgB,KAAD,IAAuB;AAC/C,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,QAAI,KAAK,CAAC,QAAN,IAAkB,KAAK,CAAC,QAAN,CAAe,OAAjC,IAA4C,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,UAAvE,EAAmF;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,UAApC,CAAP;AAAyD;;AAC9I,QAAI,KAAK,CAAC,QAAV,EAAoB;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,QAAnB,CAAP;AAAsC;;AAC5D,QAAI,KAAK,CAAC,KAAV,EAAiB;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,KAAnB,CAAP;AAAmC;;AACtD,QAAI,KAAK,CAAC,OAAV,EAAmB;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,OAAnB,CAAP;AAAqC;;AAC1D,QAAI,KAAK,CAAC,IAAV,EAAgB;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,IAAnB,CAAP;AAAkC;;AACpD,QAAI,KAAK,CAAC,UAAV,EAAsB;AAAE,aAAO,OAAA,CAAA,YAAA,CAAa,KAAK,CAAC,UAAnB,CAAP;AAAwC;;AAChE,QAAI;AACA,aAAO,IAAI,CAAC,SAAL,CAAe,KAAf,CAAP;AACH,KAFD,CAEE,OAAO,KAAP,EAAc,CACZ;AACH;AACJ;;AACD,SAAO,MAAM,CAAC,KAAD,CAAb;AACH,CAfY;;AAiBA,OAAA,CAAA,QAAA,GAAW,MAAU,SAAV,IAA0E;AAC9F,MAAI,UAAJ;;AACA,OAAK,MAAM,EAAX,IAAiB,SAAjB,EAA4B;AACxB,QAAI,CAAC,EAAL,EAAS;AAAE;AAAW;;AACtB,QAAI;AACA,aAAO,MAAM,EAAE,EAAf;AACH,KAFD,CAEE,OAAO,KAAP,EAAc;AACZ,MAAA,UAAU,GAAG,UAAU,IAAI,KAA3B;AACH;AACJ;;AACD,QAAO,UAAU,IAAI,IAAI,KAAJ,CAAU,oBAAV,CAArB;AACH,CAXY;;AAaA,OAAA,CAAA,WAAA,GAAc,OAAU,MAAV,EAAoC,OAApC,KAAuD;AAC9E,MAAI,WAAJ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;AAC9B;AACA;AACA;AACA,QAAI;AACA,aAAO,MAAM,MAAM,EAAnB;AACH,KAFD,CAEE,OAAO,KAAP,EAAc;AACZ,UAAI,MAAM,CAAC,KAAD,CAAN,CAAc,KAAd,CAAoB,wBAApB,CAAJ,EAAmD;AAC/C,QAAA,WAAW,GAAG,KAAd;AACH,OAFD,MAEO;AACH,cAAM,YAAY,GAAG,OAAA,CAAA,YAAA,CAAa,KAAb,CAArB;;AACA,YAAI,YAAJ,EAAkB;AACd;AACA,UAAA,KAAK,CAAC,OAAN,IAAiB,KAAK,YAAY,GAAlC;AACH;;AACD,cAAM,KAAN;AACH;AACJ;;AACD,UAAM,OAAA,CAAA,KAAA,CAAM,GAAN,CAAN;AACH;;AACD,QAAM,WAAN;AACH,CAvBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retryNTimes = exports.fallback = exports.extractError = exports.sleep = void 0;\nexports.sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\nexports.extractError = (error) => {\n    if (typeof error === \"object\") {\n        if (error.response && error.response.request && error.response.request.statusText) {\n            return exports.extractError(error.response.request.statusText);\n        }\n        if (error.response) {\n            return exports.extractError(error.response);\n        }\n        if (error.error) {\n            return exports.extractError(error.error);\n        }\n        if (error.message) {\n            return exports.extractError(error.message);\n        }\n        if (error.data) {\n            return exports.extractError(error.data);\n        }\n        if (error.statusText) {\n            return exports.extractError(error.statusText);\n        }\n        try {\n            return JSON.stringify(error);\n        }\n        catch (error) {\n            // Ignore JSON error\n        }\n    }\n    return String(error);\n};\nexports.fallback = async (fallbacks) => {\n    let firstError;\n    for (const fn of fallbacks) {\n        if (!fn) {\n            continue;\n        }\n        try {\n            return await fn();\n        }\n        catch (error) {\n            firstError = firstError || error;\n        }\n    }\n    throw (firstError || new Error(\"No result returned\"));\n};\nexports.retryNTimes = async (fnCall, retries) => {\n    let returnError;\n    for (let i = 0; i < retries; i++) {\n        // if (i > 0) {\n        //     console.debug(`Retrying...`);\n        // }\n        try {\n            return await fnCall();\n        }\n        catch (error) {\n            if (String(error).match(/timeout of .* exceeded/)) {\n                returnError = error;\n            }\n            else {\n                const errorMessage = exports.extractError(error);\n                if (errorMessage) {\n                    // tslint:disable-next-line: no-object-mutation\n                    error.message += ` (${errorMessage})`;\n                }\n                throw error;\n            }\n        }\n        await exports.sleep(500);\n    }\n    throw returnError;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3JldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsS0FBSyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV4RSxRQUFBLFlBQVksR0FBRyxDQUFDLEtBQVUsRUFBVSxFQUFFO0lBQy9DLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FBRTtRQUM5SSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQUU7UUFDNUQsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO1FBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUFFLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FBRTtRQUMxRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7UUFDcEQsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQUUsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUFFO1FBQ2hFLElBQUk7WUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLG9CQUFvQjtTQUN2QjtLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxRQUFRLEdBQUcsS0FBSyxFQUFLLFNBQWdELEVBQWMsRUFBRTtJQUM5RixJQUFJLFVBQTZCLENBQUM7SUFDbEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxTQUFTLEVBQUU7UUFDeEIsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUFFLFNBQVM7U0FBRTtRQUN0QixJQUFJO1lBQ0EsT0FBTyxNQUFNLEVBQUUsRUFBRSxDQUFDO1NBQ3JCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixVQUFVLEdBQUcsVUFBVSxJQUFJLEtBQUssQ0FBQztTQUNwQztLQUNKO0lBQ0QsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsS0FBSyxFQUFLLE1BQXdCLEVBQUUsT0FBZSxFQUFFLEVBQUU7SUFDOUUsSUFBSSxXQUFXLENBQUM7SUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QixlQUFlO1FBQ2Ysb0NBQW9DO1FBQ3BDLElBQUk7UUFDSixJQUFJO1lBQ0EsT0FBTyxNQUFNLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsRUFBRTtnQkFDL0MsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUN2QjtpQkFBTTtnQkFDSCxNQUFNLFlBQVksR0FBRyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLFlBQVksRUFBRTtvQkFDZCwrQ0FBK0M7b0JBQy9DLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQztpQkFDekM7Z0JBQ0QsTUFBTSxLQUFLLENBQUM7YUFDZjtTQUNKO1FBQ0QsTUFBTSxhQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7SUFDRCxNQUFNLFdBQVcsQ0FBQztBQUN0QixDQUFDLENBQUMifQ=="]},"metadata":{},"sourceType":"script"}