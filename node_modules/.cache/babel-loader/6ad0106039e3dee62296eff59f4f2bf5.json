{"ast":null,"code":"import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 10 * 1000; //10 seconds\n\nconst memcache = {};\nexport default (async ({\n  payload,\n  requestManager\n}, res, next) => {\n  if (payload.method !== 'eth_getBlockByNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const blockNumber = payload.params[0];\n  const returnTxs = payload.params[1] ? payload.params[1] : false;\n\n  if (!memcache[blockNumber] || memcache[blockNumber] && memcache[blockNumber].timestamp < new Date().getTime() - WAIT_TIME) {\n    try {\n      const receipt = await ethCalls.getBlockByNumber(blockNumber, returnTxs);\n      memcache[blockNumber] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(null, toPayload(payload.id, JSON.parse(memcache[blockNumber].receipt) || null));\n  }\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/eth_getBlockByNumber.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","payload","requestManager","res","next","method","ethCalls","blockNumber","params","returnTxs","timestamp","Date","getTime","receipt","getBlockByNumber","JSON","stringify","id","e","parse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,MAAMC,QAAQ,GAAG,EAAjB;AACA,gBAAe,OAAO;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAP,EAAoCC,GAApC,EAAyCC,IAAzC,KAAkD;AAC/D,MAAIH,OAAO,CAACI,MAAR,KAAmB,sBAAvB,EAA+C,OAAOD,IAAI,EAAX;AAC/C,QAAME,QAAQ,GAAG,IAAIR,QAAJ,CAAaI,cAAb,CAAjB;AACA,QAAMK,WAAW,GAAGN,OAAO,CAACO,MAAR,CAAe,CAAf,CAApB;AACA,QAAMC,SAAS,GAAGR,OAAO,CAACO,MAAR,CAAe,CAAf,IAAoBP,OAAO,CAACO,MAAR,CAAe,CAAf,CAApB,GAAwC,KAA1D;;AACA,MACE,CAACR,QAAQ,CAACO,WAAD,CAAT,IACCP,QAAQ,CAACO,WAAD,CAAR,IACCP,QAAQ,CAACO,WAAD,CAAR,CAAsBG,SAAtB,GAAkC,IAAIC,IAAJ,GAAWC,OAAX,KAAuBb,SAH7D,EAIE;AACA,QAAI;AACF,YAAMc,OAAO,GAAG,MAAMP,QAAQ,CAACQ,gBAAT,CAA0BP,WAA1B,EAAuCE,SAAvC,CAAtB;AACAT,MAAAA,QAAQ,CAACO,WAAD,CAAR,GAAwB;AACtBG,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADW;AAEtBC,QAAAA,OAAO,EAAEE,IAAI,CAACC,SAAL,CAAeH,OAAf;AAFa,OAAxB;AAIAV,MAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACI,OAAO,CAACgB,EAAT,EAAaJ,OAAb,CAAhB,CAAH;AACD,KAPD,CAOE,OAAOK,CAAP,EAAU;AACVf,MAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACI,OAAO,CAACgB,EAAT,EAAa,IAAb,CAAhB,CAAH;AACD;AACF,GAfD,MAeO;AACLd,IAAAA,GAAG,CACD,IADC,EAEDN,SAAS,CAACI,OAAO,CAACgB,EAAT,EAAaF,IAAI,CAACI,KAAL,CAAWnB,QAAQ,CAACO,WAAD,CAAR,CAAsBM,OAAjC,KAA6C,IAA1D,CAFR,CAAH;AAID;AACF,CA1BD","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\n\nconst WAIT_TIME = 10 * 1000; //10 seconds\nconst memcache = {};\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_getBlockByNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const blockNumber = payload.params[0];\n  const returnTxs = payload.params[1] ? payload.params[1] : false;\n  if (\n    !memcache[blockNumber] ||\n    (memcache[blockNumber] &&\n      memcache[blockNumber].timestamp < new Date().getTime() - WAIT_TIME)\n  ) {\n    try {\n      const receipt = await ethCalls.getBlockByNumber(blockNumber, returnTxs);\n      memcache[blockNumber] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(\n      null,\n      toPayload(payload.id, JSON.parse(memcache[blockNumber].receipt) || null)\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}