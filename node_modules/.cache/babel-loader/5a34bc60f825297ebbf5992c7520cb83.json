{"ast":null,"code":"import { Chain } from \"@renproject/interfaces\";\nimport { parseRenContract, resolveInToken, resolveOutToken, resolveSendTo } from \"./renVMUtils\";\nimport { utils } from \"./utils\";\nimport { toBigNumber } from \"./value\";\n/**\n * `resolveSendCall` simplifies the arguments required by RenJS by allowing\n * developers to pass in a non-contract address as the `sendTo` field.\n * This function checks if this is the case and makes the required changes to\n * the parameters;\n */\n\nexport const resolveSendCall = (network, params, lockAndMint) => {\n  const {\n    sendTo,\n    sendAmount,\n    suggestedAmount,\n    txConfig,\n    ...restOfParams\n  } = params;\n  const amount = sendAmount || suggestedAmount; // The contract call hasn't been provided - but `sendTo` has. We overwrite\n  // the contract call with a simple adapter call.\n\n  if (!sendTo) {\n    throw new Error(`\"sendTo\" parameter must be provided.`);\n  }\n\n  lockAndMint = lockAndMint === undefined ? !!String(sendTo).match(/^(0x)[0-9a-fA-Z]{40}$/) : lockAndMint;\n  const sendToken = lockAndMint ? resolveInToken(params.sendToken) : resolveOutToken(params.sendToken);\n  const renContract = parseRenContract(sendToken);\n\n  if (renContract.to === Chain.Ethereum) {\n    // Mint\n    return { ...restOfParams,\n      suggestedAmount: amount,\n      contractCalls: [{\n        sendTo: network.addresses.gateways.BasicAdapter.address,\n        contractFn: \"mint\",\n        contractParams: [{\n          type: \"string\",\n          name: \"_symbol\",\n          value: renContract.asset\n        }, {\n          type: \"address\",\n          name: \"_address\",\n          value: sendTo\n        }],\n        txConfig\n      }]\n    };\n  } else {\n    // Burn\n    if (!amount) {\n      throw new Error(`Send amount must be provided in order to send directly to an address.`);\n    }\n\n    const token = parseRenContract(sendToken).asset;\n    const addressToHex = utils[token].addressToHex(sendTo); // const tokenAddress = await getTokenAddress(network, web3, sendToken);\n    // const approve = {\n    //     sendTo: tokenAddress,\n    //     contractFn: \"approve\",\n    //     contractParams: [\n    //         { type: \"address\" as const, name: \"spender\", value: network.addresses.gateways.BasicAdapter.address },\n    //         { type: \"uint256\" as const, name: \"amount\", value: toBigNumber(amount).toFixed() },\n    //     ],\n    //     txConfig,\n    // };\n\n    const gateway = network.addresses.gateways[`${token.toUpperCase()}Gateway`]._address;\n    return { ...restOfParams,\n      suggestedAmount: amount,\n      contractCalls: [// approve,\n      {\n        sendTo: gateway,\n        contractFn: \"burn\",\n        contractParams: [{\n          type: \"bytes\",\n          name: \"_to\",\n          value: addressToHex\n        }, {\n          type: \"uint256\",\n          name: \"_amount\",\n          value: toBigNumber(amount).toFixed()\n        }],\n        // txConfig: { gas: 200000, ...txConfig },\n        txConfig\n      }]\n    };\n  }\n};\nexport const processLockAndMintParams = (_network, _params) => {\n  const processors = [resolveSendTo({\n    isMint: true\n  })];\n  return processors.reduce((params, processor) => processor(params), _params);\n};\nexport const processBurnAndReleaseParams = (_network, _params) => {\n  const processors = [resolveSendTo({\n    isMint: false\n  })];\n  return processors.reduce((params, processor) => processor(params), _params);\n};","map":{"version":3,"sources":["../../src/parameterUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Chain } from \"@renproject/interfaces\";\nimport { parseRenContract, resolveInToken, resolveOutToken, resolveSendTo } from \"./renVMUtils\";\nimport { utils } from \"./utils\";\nimport { toBigNumber } from \"./value\";\n/**\n * `resolveSendCall` simplifies the arguments required by RenJS by allowing\n * developers to pass in a non-contract address as the `sendTo` field.\n * This function checks if this is the case and makes the required changes to\n * the parameters;\n */\nexport const resolveSendCall = (network, params, lockAndMint) => {\n    const { sendTo, sendAmount, suggestedAmount, txConfig, ...restOfParams } = params;\n    const amount = sendAmount || suggestedAmount;\n    // The contract call hasn't been provided - but `sendTo` has. We overwrite\n    // the contract call with a simple adapter call.\n    if (!sendTo) {\n        throw new Error(`\"sendTo\" parameter must be provided.`);\n    }\n    lockAndMint = lockAndMint === undefined ? !!String(sendTo).match(/^(0x)[0-9a-fA-Z]{40}$/) : lockAndMint;\n    const sendToken = lockAndMint ? resolveInToken(params.sendToken) : resolveOutToken(params.sendToken);\n    const renContract = parseRenContract(sendToken);\n    if (renContract.to === Chain.Ethereum) {\n        // Mint\n        return {\n            ...restOfParams,\n            suggestedAmount: amount,\n            contractCalls: [{\n                    sendTo: network.addresses.gateways.BasicAdapter.address,\n                    contractFn: \"mint\",\n                    contractParams: [\n                        { type: \"string\", name: \"_symbol\", value: renContract.asset },\n                        { type: \"address\", name: \"_address\", value: sendTo },\n                    ],\n                    txConfig,\n                }],\n        };\n    }\n    else {\n        // Burn\n        if (!amount) {\n            throw new Error(`Send amount must be provided in order to send directly to an address.`);\n        }\n        const token = parseRenContract(sendToken).asset;\n        const addressToHex = utils[token].addressToHex(sendTo);\n        // const tokenAddress = await getTokenAddress(network, web3, sendToken);\n        // const approve = {\n        //     sendTo: tokenAddress,\n        //     contractFn: \"approve\",\n        //     contractParams: [\n        //         { type: \"address\" as const, name: \"spender\", value: network.addresses.gateways.BasicAdapter.address },\n        //         { type: \"uint256\" as const, name: \"amount\", value: toBigNumber(amount).toFixed() },\n        //     ],\n        //     txConfig,\n        // };\n        const gateway = network.addresses.gateways[`${token.toUpperCase()}Gateway`]._address;\n        return {\n            ...restOfParams,\n            suggestedAmount: amount,\n            contractCalls: [\n                // approve,\n                {\n                    sendTo: gateway,\n                    contractFn: \"burn\",\n                    contractParams: [\n                        { type: \"bytes\", name: \"_to\", value: addressToHex },\n                        { type: \"uint256\", name: \"_amount\", value: toBigNumber(amount).toFixed() },\n                    ],\n                    // txConfig: { gas: 200000, ...txConfig },\n                    txConfig,\n                }\n            ]\n        };\n    }\n};\nexport const processLockAndMintParams = (_network, _params) => {\n    const processors = [\n        resolveSendTo({ isMint: true }),\n    ];\n    return processors.reduce((params, processor) => processor(params), _params);\n};\nexport const processBurnAndReleaseParams = (_network, _params) => {\n    const processors = [\n        resolveSendTo({ isMint: false }),\n    ];\n    return processors.reduce((params, processor) => processor(params), _params);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyYW1ldGVyVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUF3QixLQUFLLEVBQWlDLE1BQU0sd0JBQXdCLENBQUM7QUFFcEcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV0Qzs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQTBCLEVBQUUsTUFBa0IsRUFBRSxXQUFxQixFQUE0QyxFQUFFO0lBRS9JLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFFbEYsTUFBTSxNQUFNLEdBQUcsVUFBVSxJQUFJLGVBQWUsQ0FBQztJQUU3QywwRUFBMEU7SUFDMUUsZ0RBQWdEO0lBRWhELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxXQUFXLEdBQUcsV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXhHLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVyRyxNQUFNLFdBQVcs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"]},"metadata":{},"sourceType":"module"}