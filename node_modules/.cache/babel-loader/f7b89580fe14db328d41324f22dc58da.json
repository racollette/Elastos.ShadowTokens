{"ast":null,"code":"/* eslint-disable */\nimport PopUpHandler from '../connectWindow/popUpHandler';\nimport Initiator from '../connectClient/MewConnectInitiator';\nimport Web3 from 'web3';\nimport MEWProvider from './web3Provider/web3-provider/index';\nimport MEWconnectWallet from './web3Provider/MEWconnect/index';\nimport Networks from './web3Provider/networks/index';\nimport url from 'url';\nimport EventEmitter from 'events';\nimport EventNames from './web3Provider/web3-provider/events';\nimport { Transaction } from 'ethereumjs-tx';\nimport messageConstants from '../messageConstants'; // import parseTokensData from './web3Provider/helpers/parseTokensData';\n\nimport debugLogger from 'debug';\nimport PopUpCreator from '../connectWindow/popUpCreator';\nconst debugConnectionState = debugLogger('MEWconnect:connection-state');\nconst debugErrors = debugLogger('MEWconnectError');\nlet state = {\n  wallet: null\n};\nconst eventHub = new EventEmitter();\nlet popUpCreator = {};\nconst recentDataRecord = [];\nexport default class Integration extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.windowClosedError = options.windowClosedError || false;\n    this.subscriptionNotFoundNoThrow = options.subscriptionNotFoundNoThrow || true; // eslint-disable-next-line\n\n    this.infuraId = !!options.infuraId ? `wss://mainnet.infura.io/ws/v3/${options.infuraId}` : false;\n    this.CHAIN_ID = options.chainId || 1;\n    this.RPC_URL = options.rpcUrl || false;\n    this.noUrlCheck = options.noUrlCheck || false;\n    this.lastHash = null;\n    this.initiator = new Initiator();\n    this.popUpHandler = new PopUpHandler();\n    this.connectionState = false;\n    this.chainIdMapping = this.createChainMapping();\n    this.recent;\n    this.returnPromise = null;\n    popUpCreator = new PopUpCreator();\n  }\n\n  createChainMapping() {\n    return Object.keys(Networks).reduce((acc, curr) => {\n      if (Networks[curr].length === 0) return acc;\n      acc.push({\n        name: Networks[curr][0].type.name_long === 'Ethereum' ? 'mainnet' : Networks[curr][0].type.name_long.toLowerCase(),\n        chainId: Networks[curr][0].type.chainID,\n        key: Networks[curr][0].type.name\n      });\n      return acc;\n    }, [{\n      name: 'mainnet',\n      chainId: 1,\n      key: 'ETH'\n    }]);\n  }\n\n  showNotifierDemo(details) {\n    if (details === 'sent') {\n      this.popUpHandler.showNotice({\n        type: messageConstants.sent,\n        hash: '0x543284135d7821e0271272df721101420003cb0e43e8c2e2eed1451cdb571fa4',\n        explorerPath: state.network.type.blockExplorerTX\n      });\n    } else {\n      this.popUpHandler.showNotice(details);\n    }\n  }\n\n  showConnectedNotice() {\n    this.popUpHandler.showConnectedNotice();\n  }\n\n  static get getConnectionState() {\n    return MEWconnectWallet.getConnectionState();\n  }\n\n  static get isConnected() {\n    return MEWconnectWallet.getConnectionState() !== 'disconnected' && MEWconnectWallet.getConnectionState() !== 'connecting';\n  }\n\n  async enable() {\n    if (MEWconnectWallet.getConnectionState() === 'disconnected') {\n      this.returnPromise = this.enabler();\n    }\n\n    if (popUpCreator.popupWindowOpen) {\n      popUpCreator.popupWindow.focus();\n    }\n\n    return this.returnPromise;\n  }\n\n  enabler() {\n    // eslint-disable-next-line\n    return new Promise(async (resolve, reject) => {\n      if (!state.wallet && MEWconnectWallet.getConnectionState() === 'disconnected') {\n        MEWconnectWallet.setConnectionState('connecting');\n        this.connectionState = 'connecting';\n        debugConnectionState(MEWconnectWallet.getConnectionState());\n        popUpCreator.setWindowClosedListener(() => {\n          if (this.windowClosedError) {\n            reject('ERROR: popup window closed');\n          }\n\n          this.emit('popupWindowClosed');\n        });\n        state.wallet = await MEWconnectWallet(state, popUpCreator, this.popUpHandler);\n        this.popUpHandler.showConnectedNotice();\n        this.popUpHandler.hideNotifier();\n        this.createDisconnectNotifier();\n        debugConnectionState(MEWconnectWallet.getConnectionState());\n      }\n\n      if (state.web3 && state.wallet) {\n        await state.web3.eth.getTransactionCount(state.wallet.getChecksumAddressString());\n      }\n\n      if (state.web3Provider && state.wallet) {\n        if (state.web3Provider.accountsChanged) {\n          state.web3Provider.accountsChanged([state.wallet.getChecksumAddressString()]);\n        }\n\n        eventHub.emit('accounts_available', [state.wallet.getChecksumAddressString()]);\n      }\n\n      resolve([state.wallet.getChecksumAddressString()]);\n    });\n  }\n\n  identifyChain(check) {\n    if (typeof check === 'number') {\n      const result = this.chainIdMapping.find(value => value.chainId === check);\n      if (result) return result;\n    } else if (typeof check === 'string') {\n      let result = this.chainIdMapping.find(value => value.chainId == check);\n      if (result) return result;\n      result = this.chainIdMapping.find(value => value.name === check.toLowerCase());\n      if (result) return result;\n      result = this.chainIdMapping.find(value => value.key === check.toLowerCase());\n      if (result) return result;\n    }\n\n    return 'ETH';\n  }\n\n  makeWeb3Provider(CHAIN_ID = this.CHAIN_ID, RPC_URL = this.RPC_URL, _noCheck = this.noUrlCheck) {\n    let chainError = false;\n\n    try {\n      const chain = this.identifyChain(CHAIN_ID || 1);\n      const defaultNetwork = Networks[chain.key][0];\n      state.network = defaultNetwork;\n\n      if (this.infuraId) {\n        RPC_URL = this.infuraId;\n      }\n\n      const hostUrl = url.parse(RPC_URL || defaultNetwork.url);\n      const options = {\n        subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow\n      };\n\n      if (!/[wW]/.test(hostUrl.protocol)) {\n        throw Error('websocket rpc endpoint required');\n      }\n\n      if (!_noCheck && !this.infuraId) {\n        if (!hostUrl.hostname.includes(chain.name) && hostUrl.hostname.includes('infura.io')) {\n          chainError = true;\n          throw Error(`ChainId: ${CHAIN_ID} and infura endpoint ${hostUrl.hostname} don't match`);\n        }\n      }\n\n      const parsedUrl = `${hostUrl.protocol}//${hostUrl.hostname ? hostUrl.hostname : hostUrl.host}${hostUrl.port ? ':' + hostUrl.port : ''}${hostUrl.pathname ? hostUrl.pathname : ''}`;\n      state.enable = this.enable.bind(this);\n      const web3Provider = new MEWProvider(parsedUrl, options, {\n        state: state\n      }, eventHub);\n      web3Provider.close = this.disconnect.bind(this);\n      state.web3Provider = web3Provider;\n      state.web3 = new Web3(web3Provider);\n      state.web3.currentProvider.sendAsync = state.web3.currentProvider.send;\n      this.setupListeners();\n      web3Provider.enable = this.enable.bind(this);\n      web3Provider.isMewConnect = true;\n      web3Provider.isMEWconnect = true;\n      web3Provider.name = 'MewConnect';\n      return web3Provider;\n    } catch (e) {\n      debugErrors('makeWeb3Provider ERROR');\n\n      if (chainError) {\n        throw e;\n      } else {\n        // eslint-disable-next-line\n        console.error(e);\n      }\n    }\n  }\n\n  createDisconnectNotifier() {\n    const connection = state.wallet.getConnection();\n    debugConnectionState(MEWconnectWallet.getConnectionState());\n    connection.webRtcCommunication.on(connection.lifeCycle.RtcDisconnectEvent, () => {\n      this.popUpHandler.showNotice(messageConstants.disconnect);\n      MEWconnectWallet.setConnectionState(connection.lifeCycle.disconnected);\n\n      if (state.wallet !== null && state.web3Provider.disconnected) {\n        state.web3Provider.disconnected();\n      }\n\n      state.wallet = null;\n      this.emit('disconnected');\n    });\n    connection.webRtcCommunication.on(connection.lifeCycle.RtcClosedEvent, () => {\n      this.popUpHandler.showNotice(messageConstants.disconnect);\n      MEWconnectWallet.setConnectionState(connection.lifeCycle.disconnected);\n\n      if (state.wallet !== null && state.web3Provider.disconnected) {\n        state.web3Provider.disconnected();\n      }\n\n      state.wallet = null;\n      this.emit(connection.lifeCycle.disconnected);\n    });\n  }\n\n  disconnect() {\n    try {\n      if (state.wallet) {\n        const connection = state.wallet.getConnection();\n        connection.disconnectRTC();\n        MEWconnectWallet.setConnectionState('disconnected');\n        return true;\n      }\n\n      state = {}; // eslint-disable-next-line\n\n      console.warn('No connected wallet found');\n      return true;\n    } catch (e) {\n      debugErrors('disconnect ERROR'); // eslint-disable-next-line\n\n      console.error(e);\n      return false;\n    }\n  }\n\n  sign(tx) {\n    if (state.wallet) {\n      return state.wallet.signTransaction(tx);\n    }\n  }\n\n  setupListeners() {\n    eventHub.on(EventNames.SHOW_TX_CONFIRM_MODAL, (tx, resolve) => {\n      this.responseFunction = resolve;\n\n      if (!state.wallet) {\n        this.popUpHandler.showNoticePersistentEnter(messageConstants.notConnected);\n      } else {\n        this.popUpHandler.showNoticePersistentEnter(messageConstants.approveTx);\n        state.wallet.signTransaction(tx).then(_response => {\n          this.popUpHandler.showNoticePersistentExit();\n          resolve(_response);\n        }).catch(err => {\n          this.popUpHandler.showNoticePersistentExit();\n\n          if (err.reject) {\n            this.popUpHandler.noShow();\n            setTimeout(() => {\n              this.popUpHandler.showNotice('decline');\n            }, 250);\n          } else {\n            debugErrors('sign transaction ERROR');\n            state.wallet.errorHandler(err);\n          }\n\n          resolve(err);\n        });\n      }\n    });\n    eventHub.on(EventNames.SHOW_MSG_CONFIRM_MODAL, (msg, resolve) => {\n      if (!state.wallet) {\n        this.popUpHandler.showNoticePersistentEnter(messageConstants.notConnected);\n      } else {\n        this.popUpHandler.showNoticePersistentEnter(messageConstants.signMessage);\n        state.wallet.signMessage(msg).then(result => {\n          resolve(result);\n        }).catch(err => {\n          if (err.reject) {\n            this.popUpHandler.noShow();\n            setTimeout(() => {\n              this.popUpHandler.showNotice(messageConstants.declineMessage);\n            }, 250);\n          } else {\n            debugErrors('sign message ERROR');\n            state.wallet.errorHandler(err);\n          }\n\n          resolve(err);\n        });\n      }\n    });\n    eventHub.on('showSendSignedTx', (tx, resolve) => {\n      this.popUpHandler.showNotice(messageConstants.approveTx);\n      const newTx = new Transaction(tx);\n      this.responseFunction = resolve;\n      this.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: `0x${newTx.to.toString('hex')}`,\n          from: `0x${newTx.from.toString('hex')}`,\n          value: `0x${newTx.value.toString('hex')}`,\n          gas: `0x${newTx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${newTx.gasLimit.toString('hex')}`,\n          data: `0x${newTx.data.toString('hex')}`,\n          nonce: `0x${newTx.nonce.toString('hex')}`,\n          v: `0x${newTx.v.toString('hex')}`,\n          r: `0x${newTx.r.toString('hex')}`,\n          s: `0x${newTx.s.toString('hex')}`\n        }\n      };\n      this.responseFunction(this.signedTxObject);\n    });\n    eventHub.on('Hash', hash => {\n      this.lastHash = hash;\n      this.popUpHandler.showNotice({\n        type: messageConstants.sent,\n        hash: hash,\n        explorerPath: state.network.type.blockExplorerTX\n      }, 10000);\n    });\n    eventHub.on('Receipt', () => {\n      this.lastHash = null;\n      this.popUpHandler.showNotice(messageConstants.complete);\n    });\n    eventHub.on('Error', e => {\n      debugErrors('SendTx:Error ERROR');\n\n      if (this.lastHash !== null) {\n        this.popUpHandler.showNotice({\n          type: messageConstants.failed,\n          hash: this.lastHash,\n          explorerPath: state.network.type.blockExplorerTX\n        }, 10000);\n      } else {\n        this.popUpHandler.showNotice(messageConstants.error);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/index.js"],"names":["PopUpHandler","Initiator","Web3","MEWProvider","MEWconnectWallet","Networks","url","EventEmitter","EventNames","Transaction","messageConstants","debugLogger","PopUpCreator","debugConnectionState","debugErrors","state","wallet","eventHub","popUpCreator","recentDataRecord","Integration","constructor","options","windowClosedError","subscriptionNotFoundNoThrow","infuraId","CHAIN_ID","chainId","RPC_URL","rpcUrl","noUrlCheck","lastHash","initiator","popUpHandler","connectionState","chainIdMapping","createChainMapping","recent","returnPromise","Object","keys","reduce","acc","curr","length","push","name","type","name_long","toLowerCase","chainID","key","showNotifierDemo","details","showNotice","sent","hash","explorerPath","network","blockExplorerTX","showConnectedNotice","getConnectionState","isConnected","enable","enabler","popupWindowOpen","popupWindow","focus","Promise","resolve","reject","setConnectionState","setWindowClosedListener","emit","hideNotifier","createDisconnectNotifier","web3","eth","getTransactionCount","getChecksumAddressString","web3Provider","accountsChanged","identifyChain","check","result","find","value","makeWeb3Provider","_noCheck","chainError","chain","defaultNetwork","hostUrl","parse","test","protocol","Error","hostname","includes","parsedUrl","host","port","pathname","bind","close","disconnect","currentProvider","sendAsync","send","setupListeners","isMewConnect","isMEWconnect","e","console","error","connection","getConnection","webRtcCommunication","on","lifeCycle","RtcDisconnectEvent","disconnected","RtcClosedEvent","disconnectRTC","warn","sign","tx","signTransaction","SHOW_TX_CONFIRM_MODAL","responseFunction","showNoticePersistentEnter","notConnected","approveTx","then","_response","showNoticePersistentExit","catch","err","noShow","setTimeout","errorHandler","SHOW_MSG_CONFIRM_MODAL","msg","signMessage","declineMessage","newTx","signedTxObject","rawTransaction","to","toString","from","gas","gasPrice","gasLimit","data","nonce","v","r","s","complete","failed"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport PopUpHandler from '../connectWindow/popUpHandler';\nimport Initiator from '../connectClient/MewConnectInitiator';\nimport Web3 from 'web3';\nimport MEWProvider from './web3Provider/web3-provider/index';\nimport MEWconnectWallet from './web3Provider/MEWconnect/index';\nimport Networks from './web3Provider/networks/index';\nimport url from 'url';\nimport EventEmitter from 'events';\nimport EventNames from './web3Provider/web3-provider/events';\nimport { Transaction } from 'ethereumjs-tx';\nimport messageConstants from '../messageConstants';\n// import parseTokensData from './web3Provider/helpers/parseTokensData';\nimport debugLogger from 'debug';\nimport PopUpCreator from '../connectWindow/popUpCreator';\n\nconst debugConnectionState = debugLogger('MEWconnect:connection-state');\nconst debugErrors = debugLogger('MEWconnectError');\n\nlet state = {\n  wallet: null\n};\nconst eventHub = new EventEmitter();\nlet popUpCreator = {};\nconst recentDataRecord = [];\nexport default class Integration extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.windowClosedError = options.windowClosedError || false;\n    this.subscriptionNotFoundNoThrow =\n      options.subscriptionNotFoundNoThrow || true;\n    // eslint-disable-next-line\n    this.infuraId = !!options.infuraId\n      ? `wss://mainnet.infura.io/ws/v3/${options.infuraId}`\n      : false;\n\n    this.CHAIN_ID = options.chainId || 1;\n    this.RPC_URL = options.rpcUrl || false;\n    this.noUrlCheck = options.noUrlCheck || false;\n    this.lastHash = null;\n    this.initiator = new Initiator();\n    this.popUpHandler = new PopUpHandler();\n    this.connectionState = false;\n    this.chainIdMapping = this.createChainMapping();\n    this.recent;\n    this.returnPromise = null;\n    popUpCreator = new PopUpCreator();\n  }\n\n  createChainMapping() {\n    return Object.keys(Networks).reduce(\n      (acc, curr) => {\n        if (Networks[curr].length === 0) return acc;\n        acc.push({\n          name:\n            Networks[curr][0].type.name_long === 'Ethereum'\n              ? 'mainnet'\n              : Networks[curr][0].type.name_long.toLowerCase(),\n          chainId: Networks[curr][0].type.chainID,\n          key: Networks[curr][0].type.name\n        });\n        return acc;\n      },\n      [{ name: 'mainnet', chainId: 1, key: 'ETH' }]\n    );\n  }\n\n  showNotifierDemo(details) {\n    if (details === 'sent') {\n      this.popUpHandler.showNotice({\n        type: messageConstants.sent,\n        hash:\n          '0x543284135d7821e0271272df721101420003cb0e43e8c2e2eed1451cdb571fa4',\n        explorerPath: state.network.type.blockExplorerTX\n      });\n    } else {\n      this.popUpHandler.showNotice(details);\n    }\n  }\n\n  showConnectedNotice() {\n    this.popUpHandler.showConnectedNotice();\n  }\n\n  static get getConnectionState() {\n    return MEWconnectWallet.getConnectionState();\n  }\n\n  static get isConnected() {\n    return (\n      MEWconnectWallet.getConnectionState() !== 'disconnected' &&\n      MEWconnectWallet.getConnectionState() !== 'connecting'\n    );\n  }\n\n  async enable() {\n    if (MEWconnectWallet.getConnectionState() === 'disconnected') {\n      this.returnPromise = this.enabler();\n    }\n    if (popUpCreator.popupWindowOpen) {\n      popUpCreator.popupWindow.focus();\n    }\n    return this.returnPromise;\n  }\n\n  enabler() {\n    // eslint-disable-next-line\n    return new Promise(async (resolve, reject) => {\n      if (\n        !state.wallet &&\n        MEWconnectWallet.getConnectionState() === 'disconnected'\n      ) {\n        MEWconnectWallet.setConnectionState('connecting');\n        this.connectionState = 'connecting';\n        debugConnectionState(MEWconnectWallet.getConnectionState());\n        popUpCreator.setWindowClosedListener(() => {\n          if (this.windowClosedError) {\n            reject('ERROR: popup window closed');\n          }\n          this.emit('popupWindowClosed');\n        });\n\n        state.wallet = await MEWconnectWallet(\n          state,\n          popUpCreator,\n          this.popUpHandler\n        );\n        this.popUpHandler.showConnectedNotice();\n        this.popUpHandler.hideNotifier();\n        this.createDisconnectNotifier();\n        debugConnectionState(MEWconnectWallet.getConnectionState());\n      }\n\n      if (state.web3 && state.wallet) {\n        await state.web3.eth.getTransactionCount(\n          state.wallet.getChecksumAddressString()\n        );\n      }\n      if (state.web3Provider && state.wallet) {\n        if (state.web3Provider.accountsChanged) {\n          state.web3Provider.accountsChanged([\n            state.wallet.getChecksumAddressString()\n          ]);\n        }\n        eventHub.emit('accounts_available', [\n          state.wallet.getChecksumAddressString()\n        ]);\n      }\n\n      resolve([state.wallet.getChecksumAddressString()]);\n    });\n  }\n\n  identifyChain(check) {\n    if (typeof check === 'number') {\n      const result = this.chainIdMapping.find(value => value.chainId === check);\n      if (result) return result;\n    } else if (typeof check === 'string') {\n      let result = this.chainIdMapping.find(value => value.chainId == check);\n      if (result) return result;\n      result = this.chainIdMapping.find(\n        value => value.name === check.toLowerCase()\n      );\n      if (result) return result;\n      result = this.chainIdMapping.find(\n        value => value.key === check.toLowerCase()\n      );\n      if (result) return result;\n    }\n    return 'ETH';\n  }\n\n  makeWeb3Provider(\n    CHAIN_ID = this.CHAIN_ID,\n    RPC_URL = this.RPC_URL,\n    _noCheck = this.noUrlCheck\n  ) {\n    let chainError = false;\n    try {\n      const chain = this.identifyChain(CHAIN_ID || 1);\n      const defaultNetwork = Networks[chain.key][0];\n      state.network = defaultNetwork;\n      if (this.infuraId) {\n        RPC_URL = this.infuraId;\n      }\n      const hostUrl = url.parse(RPC_URL || defaultNetwork.url);\n      const options = {\n        subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow\n      };\n      if (!/[wW]/.test(hostUrl.protocol)) {\n        throw Error('websocket rpc endpoint required');\n      }\n      if (!_noCheck && !this.infuraId) {\n        if (\n          !hostUrl.hostname.includes(chain.name) &&\n          hostUrl.hostname.includes('infura.io')\n        ) {\n          chainError = true;\n          throw Error(\n            `ChainId: ${CHAIN_ID} and infura endpoint ${hostUrl.hostname} don't match`\n          );\n        }\n      }\n      const parsedUrl = `${hostUrl.protocol}//${\n        hostUrl.hostname ? hostUrl.hostname : hostUrl.host\n      }${hostUrl.port ? ':' + hostUrl.port : ''}${\n        hostUrl.pathname ? hostUrl.pathname : ''\n      }`;\n      state.enable = this.enable.bind(this);\n      const web3Provider = new MEWProvider(\n        parsedUrl,\n        options,\n        {\n          state: state\n        },\n        eventHub\n      );\n\n      web3Provider.close = this.disconnect.bind(this);\n      state.web3Provider = web3Provider;\n\n      state.web3 = new Web3(web3Provider);\n      state.web3.currentProvider.sendAsync = state.web3.currentProvider.send;\n      this.setupListeners();\n      web3Provider.enable = this.enable.bind(this);\n      web3Provider.isMewConnect = true;\n      web3Provider.isMEWconnect = true;\n      web3Provider.name = 'MewConnect';\n      return web3Provider;\n    } catch (e) {\n      debugErrors('makeWeb3Provider ERROR');\n      if (chainError) {\n        throw e;\n      } else {\n        // eslint-disable-next-line\n        console.error(e);\n      }\n    }\n  }\n\n  createDisconnectNotifier() {\n    const connection = state.wallet.getConnection();\n    debugConnectionState(MEWconnectWallet.getConnectionState());\n    connection.webRtcCommunication.on(\n      connection.lifeCycle.RtcDisconnectEvent,\n      () => {\n        this.popUpHandler.showNotice(messageConstants.disconnect);\n        MEWconnectWallet.setConnectionState(connection.lifeCycle.disconnected);\n        if (state.wallet !== null && state.web3Provider.disconnected) {\n          state.web3Provider.disconnected();\n        }\n        state.wallet = null;\n        this.emit('disconnected');\n      }\n    );\n\n    connection.webRtcCommunication.on(\n      connection.lifeCycle.RtcClosedEvent,\n      () => {\n        this.popUpHandler.showNotice(messageConstants.disconnect);\n        MEWconnectWallet.setConnectionState(connection.lifeCycle.disconnected);\n        if (state.wallet !== null && state.web3Provider.disconnected) {\n          state.web3Provider.disconnected();\n        }\n        state.wallet = null;\n        this.emit(connection.lifeCycle.disconnected);\n      }\n    );\n  }\n\n  disconnect() {\n    try {\n      if (state.wallet) {\n        const connection = state.wallet.getConnection();\n        connection.disconnectRTC();\n        MEWconnectWallet.setConnectionState('disconnected');\n        return true;\n      }\n      state = {};\n      // eslint-disable-next-line\n      console.warn('No connected wallet found');\n      return true;\n    } catch (e) {\n      debugErrors('disconnect ERROR');\n      // eslint-disable-next-line\n      console.error(e);\n      return false;\n    }\n  }\n\n  sign(tx) {\n    if (state.wallet) {\n      return state.wallet.signTransaction(tx);\n    }\n  }\n\n\n  setupListeners() {\n    eventHub.on(EventNames.SHOW_TX_CONFIRM_MODAL, (tx, resolve) => {\n      this.responseFunction = resolve;\n      if (!state.wallet) {\n        this.popUpHandler.showNoticePersistentEnter(\n          messageConstants.notConnected\n        );\n      } else {\n        this.popUpHandler.showNoticePersistentEnter(messageConstants.approveTx);\n\n        state.wallet\n          .signTransaction(tx)\n          .then(_response => {\n            this.popUpHandler.showNoticePersistentExit();\n            resolve(_response);\n          })\n          .catch(err => {\n            this.popUpHandler.showNoticePersistentExit();\n\n            if (err.reject) {\n              this.popUpHandler.noShow();\n              setTimeout(() => {\n                this.popUpHandler.showNotice('decline');\n              }, 250)\n            } else {\n              debugErrors('sign transaction ERROR');\n              state.wallet.errorHandler(err);\n            }\n            resolve(err);\n          });\n      }\n    });\n\n    eventHub.on(EventNames.SHOW_MSG_CONFIRM_MODAL, (msg, resolve) => {\n      if (!state.wallet) {\n        this.popUpHandler.showNoticePersistentEnter(\n          messageConstants.notConnected\n        );\n      } else {\n        this.popUpHandler.showNoticePersistentEnter(\n          messageConstants.signMessage\n        );\n\n        state.wallet\n          .signMessage(msg)\n          .then(result => {\n            resolve(result);\n          })\n          .catch((err) => {\n            if (err.reject) {\n              this.popUpHandler.noShow();\n              setTimeout(() => {\n                this.popUpHandler.showNotice(messageConstants.declineMessage);\n              }, 250)\n            } else {\n              debugErrors('sign message ERROR');\n              state.wallet.errorHandler(err);\n            }\n            resolve(err);\n          });\n      }\n    });\n\n    eventHub.on('showSendSignedTx', (tx, resolve) => {\n      this.popUpHandler.showNotice(messageConstants.approveTx);\n      const newTx = new Transaction(tx);\n      this.responseFunction = resolve;\n      this.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: `0x${newTx.to.toString('hex')}`,\n          from: `0x${newTx.from.toString('hex')}`,\n          value: `0x${newTx.value.toString('hex')}`,\n          gas: `0x${newTx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${newTx.gasLimit.toString('hex')}`,\n          data: `0x${newTx.data.toString('hex')}`,\n          nonce: `0x${newTx.nonce.toString('hex')}`,\n          v: `0x${newTx.v.toString('hex')}`,\n          r: `0x${newTx.r.toString('hex')}`,\n          s: `0x${newTx.s.toString('hex')}`\n        }\n      };\n      this.responseFunction(this.signedTxObject);\n    });\n    eventHub.on('Hash', hash => {\n      this.lastHash = hash;\n      this.popUpHandler.showNotice(\n        {\n          type: messageConstants.sent,\n          hash: hash,\n          explorerPath: state.network.type.blockExplorerTX\n        },\n        10000\n      );\n    });\n    eventHub.on('Receipt', () => {\n      this.lastHash = null;\n      this.popUpHandler.showNotice(messageConstants.complete);\n    });\n    eventHub.on('Error', e => {\n      debugErrors('SendTx:Error ERROR');\n      if (this.lastHash !== null) {\n        this.popUpHandler.showNotice(\n          {\n            type: messageConstants.failed,\n            hash: this.lastHash,\n            explorerPath: state.network.type.blockExplorerTX\n          },\n          10000\n        );\n      } else {\n        this.popUpHandler.showNotice(messageConstants.error);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}