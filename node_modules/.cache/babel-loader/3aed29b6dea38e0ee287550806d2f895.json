{"ast":null,"code":"import { isAddress } from './addressUtils';\nimport url from 'url';\nimport utils from 'web3-utils';\nimport { isHexString, toBuffer as utilsToBuffer } from 'ethereumjs-util';\nimport { uint, address, string, bytes, bool } from './solidityTypes'; // import xss from 'xss';\n\nimport darkList from '../address-darklist/address-darklist.json'; // import { MEW_CX } from '@/builds/configs/types';\n\nconst toBuffer = v => {\n  if (isHexString(v)) {\n    return utilsToBuffer(v);\n  }\n\n  return Buffer.from(v);\n};\n\nconst capitalize = value => {\n  if (!value) return '';\n  value = value.toString();\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n/* Accepts string, returns boolean */\n\n\nconst isJson = str => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getService = parsableUrl => {\n  const parsedUrl = url.parse(parsableUrl).hostname;\n  const splitUrl = parsedUrl.split('.');\n  if (splitUrl.length > 2) // eslint-disable-next-line\n    return capitalize(`${splitUrl[1]}.${splitUrl[2]}`);\n  return capitalize(splitUrl.join('.'));\n};\n\nconst doesExist = val => val !== undefined && val !== null;\n\nconst padLeftEven = hex => {\n  hex = hex.length % 2 !== 0 ? '0' + hex : hex;\n  return hex;\n};\n\nconst isInt = num => {\n  return num % 1 === 0;\n};\n\nconst formatDate = date => {\n  const days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n  const day = days[new Date(date).getDay()];\n  const dateString = new Date(date).toLocaleDateString();\n  const regExp = /\\(([^)]+)\\)/;\n  const timeString = new Date(date).toTimeString();\n  const lengthMinus1 = timeString.length - 1;\n  const stripTimezone = timeString.slice(timeString.indexOf('(') + 1, lengthMinus1).split(' ').map(item => {\n    return item[0];\n  }).join('');\n  const removedTimezone = timeString.replace(regExp, '');\n  const removeEndNumber = removedTimezone.slice(0, 12);\n  const GMTtime = removeEndNumber.replace(removeEndNumber.slice(5, 8), '');\n  const localTime = new Date(date).toLocaleTimeString(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  return `${day}. ${dateString} ${GMTtime} - ${localTime} ${stripTimezone}`;\n};\n\nconst isValidETHAddress = address => {\n  return isAddress(address);\n};\n\nconst isValidENSorEtherAddress = address => {\n  return isValidETHAddress(address);\n};\n\nconst sanitizeHex = hex => {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '0x';\n  return '0x' + padLeftEven(hex);\n};\n\nconst scrollToTop = scrollDuration => {\n  const scrollHeight = window.scrollY,\n        scrollStep = Math.PI / (scrollDuration / 15),\n        cosParameter = scrollHeight / 2;\n  let scrollCount = 0;\n  let scrollMargin;\n  const scrollInterval = setInterval(function () {\n    if (window.scrollY != 0) {\n      scrollCount = scrollCount + 1;\n      scrollMargin = cosParameter - cosParameter * Math.cos(scrollCount * scrollStep);\n      window.scrollTo(0, scrollHeight - scrollMargin);\n    } else clearInterval(scrollInterval);\n  }, 15);\n};\n\nconst validateHexString = str => {\n  if (str === '') return true;\n  str = str.substring(0, 2) === '0x' ? str.substring(2).toUpperCase() : str.toUpperCase();\n  return utils.isHex(str);\n};\n\nconst solidityType = inputType => {\n  if (!inputType) inputType = '';\n\n  if (inputType.includes('[') && inputType.includes(']')) {\n    if (inputType.includes(uint)) return {\n      type: 'string',\n      solidityType: `${uint}[]`\n    };\n    if (inputType.includes(address)) return {\n      type: 'text',\n      solidityType: `${address}[]`\n    };\n    if (inputType.includes(string)) return {\n      type: 'text',\n      solidityType: `${string}[]`\n    };\n    if (inputType.includes(bytes)) return {\n      type: 'text',\n      solidityType: `${bytes}[]`\n    };\n    if (inputType.includes(bool)) return {\n      type: 'string',\n      solidityType: `${bool}[]`\n    };\n    return {\n      type: 'text',\n      solidityType: `${string}[]`\n    };\n  }\n\n  if (inputType.includes(uint)) return {\n    type: 'number',\n    solidityType: uint\n  };\n  if (inputType.includes(address)) return {\n    type: 'text',\n    solidityType: address\n  };\n  if (inputType.includes(string)) return {\n    type: 'text',\n    solidityType: string\n  };\n  if (inputType.includes(bytes)) return {\n    type: 'text',\n    solidityType: bytes\n  };\n  if (inputType.includes(bool)) return {\n    type: 'radio',\n    solidityType: bool\n  };\n  return {\n    type: 'text',\n    solidityType: string\n  };\n};\n\nconst isDarklisted = addr => {\n  const storedDarklist = darkList.data;\n  const darklisted = storedDarklist > 0 ? storedDarklist.findIndex(item => {\n    return utils.toChecksumAddress(item.address.toLowerCase()) === utils.toChecksumAddress(addr.toLowerCase());\n  }) : -1;\n  const errMsg = darklisted === -1 ? '' : darkList.data[darklisted].comment;\n  const errObject = {\n    error: darklisted === -1 ? false : true,\n    msg: errMsg\n  };\n  return errObject;\n};\n\nconst stringToArray = str => {\n  return str.replace(/[^a-zA-Z0-9_,]+/g, '').split(',');\n};\n\nconst isContractArgValid = (value, solidityType) => {\n  if (!value) value = '';\n\n  if (solidityType.includes('[') && solidityType.includes(']')) {\n    const parsedValue = Array.isArray(value) ? value : stringToArray(value);\n    const values = [];\n    parsedValue.forEach(item => {\n      if (solidityType.includes(uint)) {\n        values.push(item !== '' && !isNaN(item) && isInt(item));\n      } else if (solidityType.includes(address)) {\n        values.push(isAddress(item));\n      } else if (solidityType.includes(string)) {\n        values.push(item !== '');\n      } else if (solidityType.includes(bool)) {\n        values.push(typeof item === typeof true || item === '');\n      } else if (solidityType.includes(bytes)) {\n        values.push(validateHexString(item));\n      }\n    });\n    return !values.includes(false);\n  }\n\n  if (solidityType === 'uint') return value !== '' && !isNaN(value) && isInt(value);\n  if (solidityType === 'address') return isAddress(value);\n  if (solidityType === 'string') return true;\n  if (solidityType === 'bytes') return value.substr(0, 2) === '0x' && validateHexString(value);\n  if (solidityType === 'bool') return typeof value === typeof true || value === '';\n  return false;\n};\n\nexport default {\n  isJson,\n  doesExist,\n  padLeftEven,\n  formatDate,\n  isValidENSorEtherAddress,\n  isValidETHAddress,\n  sanitizeHex,\n  validateHexString,\n  scrollToTop,\n  isDarklisted,\n  solidityType,\n  isInt,\n  capitalize,\n  getService,\n  stringToArray,\n  isContractArgValid,\n  toBuffer\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/bridge/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/helpers/misc.js"],"names":["isAddress","url","utils","isHexString","toBuffer","utilsToBuffer","uint","address","string","bytes","bool","darkList","v","Buffer","from","capitalize","value","toString","charAt","toUpperCase","slice","isJson","str","JSON","parse","e","getService","parsableUrl","parsedUrl","hostname","splitUrl","split","length","join","doesExist","val","undefined","padLeftEven","hex","isInt","num","formatDate","date","days","day","Date","getDay","dateString","toLocaleDateString","regExp","timeString","toTimeString","lengthMinus1","stripTimezone","indexOf","map","item","removedTimezone","replace","removeEndNumber","GMTtime","localTime","toLocaleTimeString","navigator","language","hour","minute","isValidETHAddress","isValidENSorEtherAddress","sanitizeHex","substring","scrollToTop","scrollDuration","scrollHeight","window","scrollY","scrollStep","Math","PI","cosParameter","scrollCount","scrollMargin","scrollInterval","setInterval","cos","scrollTo","clearInterval","validateHexString","isHex","solidityType","inputType","includes","type","isDarklisted","addr","storedDarklist","data","darklisted","findIndex","toChecksumAddress","toLowerCase","errMsg","comment","errObject","error","msg","stringToArray","isContractArgValid","parsedValue","Array","isArray","values","forEach","push","isNaN","substr"],"mappings":"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","sourcesContent":["import { isAddress } from './addressUtils';\nimport url from 'url';\nimport utils from 'web3-utils';\nimport { isHexString, toBuffer as utilsToBuffer } from 'ethereumjs-util';\nimport { uint, address, string, bytes, bool } from './solidityTypes';\n// import xss from 'xss';\nimport darkList from '../address-darklist/address-darklist.json';\n\n// import { MEW_CX } from '@/builds/configs/types';\n\nconst toBuffer = v => {\n  if (isHexString(v)) {\n    return utilsToBuffer(v);\n  }\n  return Buffer.from(v);\n};\nconst capitalize = value => {\n  if (!value) return '';\n  value = value.toString();\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n/* Accepts string, returns boolean */\nconst isJson = str => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getService = parsableUrl => {\n  const parsedUrl = url.parse(parsableUrl).hostname;\n  const splitUrl = parsedUrl.split('.');\n  if (splitUrl.length > 2)\n    // eslint-disable-next-line\n    return capitalize(`${splitUrl[1]}.${splitUrl[2]}`);\n  return capitalize(splitUrl.join('.'));\n};\n\nconst doesExist = val => val !== undefined && val !== null;\n\nconst padLeftEven = hex => {\n  hex = hex.length % 2 !== 0 ? '0' + hex : hex;\n  return hex;\n};\n\nconst isInt = num => {\n  return num % 1 === 0;\n};\n\nconst formatDate = date => {\n  const days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n  const day = days[new Date(date).getDay()];\n  const dateString = new Date(date).toLocaleDateString();\n  const regExp = /\\(([^)]+)\\)/;\n  const timeString = new Date(date).toTimeString();\n  const lengthMinus1 = timeString.length - 1;\n  const stripTimezone = timeString\n    .slice(timeString.indexOf('(') + 1, lengthMinus1)\n    .split(' ')\n    .map(item => {\n      return item[0];\n    })\n    .join('');\n  const removedTimezone = timeString.replace(regExp, '');\n  const removeEndNumber = removedTimezone.slice(0, 12);\n  const GMTtime = removeEndNumber.replace(removeEndNumber.slice(5, 8), '');\n  const localTime = new Date(date).toLocaleTimeString(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  return `${day}. ${dateString} ${GMTtime} - ${localTime} ${stripTimezone}`;\n};\nconst isValidETHAddress = address => {\n  return isAddress(address);\n};\nconst isValidENSorEtherAddress = address => {\n  return isValidETHAddress(address);\n};\n\nconst sanitizeHex = hex => {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '0x';\n  return '0x' + padLeftEven(hex);\n};\n\nconst scrollToTop = scrollDuration => {\n  const scrollHeight = window.scrollY,\n    scrollStep = Math.PI / (scrollDuration / 15),\n    cosParameter = scrollHeight / 2;\n\n  let scrollCount = 0;\n  let scrollMargin;\n  const scrollInterval = setInterval(function() {\n    if (window.scrollY != 0) {\n      scrollCount = scrollCount + 1;\n      scrollMargin =\n        cosParameter - cosParameter * Math.cos(scrollCount * scrollStep);\n      window.scrollTo(0, scrollHeight - scrollMargin);\n    } else clearInterval(scrollInterval);\n  }, 15);\n};\n\nconst validateHexString = str => {\n  if (str === '') return true;\n  str =\n    str.substring(0, 2) === '0x'\n      ? str.substring(2).toUpperCase()\n      : str.toUpperCase();\n  return utils.isHex(str);\n};\n\n\nconst solidityType = inputType => {\n  if (!inputType) inputType = '';\n  if (inputType.includes('[') && inputType.includes(']')) {\n    if (inputType.includes(uint))\n      return { type: 'string', solidityType: `${uint}[]` };\n    if (inputType.includes(address))\n      return { type: 'text', solidityType: `${address}[]` };\n    if (inputType.includes(string))\n      return { type: 'text', solidityType: `${string}[]` };\n    if (inputType.includes(bytes))\n      return { type: 'text', solidityType: `${bytes}[]` };\n    if (inputType.includes(bool))\n      return { type: 'string', solidityType: `${bool}[]` };\n    return { type: 'text', solidityType: `${string}[]` };\n  }\n  if (inputType.includes(uint)) return { type: 'number', solidityType: uint };\n  if (inputType.includes(address))\n    return { type: 'text', solidityType: address };\n  if (inputType.includes(string)) return { type: 'text', solidityType: string };\n  if (inputType.includes(bytes)) return { type: 'text', solidityType: bytes };\n  if (inputType.includes(bool)) return { type: 'radio', solidityType: bool };\n  return { type: 'text', solidityType: string };\n};\n\nconst isDarklisted = addr => {\n  const storedDarklist = darkList.data;\n  const darklisted =\n    storedDarklist > 0\n      ? storedDarklist.findIndex(item => {\n          return (\n            utils.toChecksumAddress(item.address.toLowerCase()) ===\n            utils.toChecksumAddress(addr.toLowerCase())\n          );\n        })\n      : -1;\n  const errMsg = darklisted === -1 ? '' : darkList.data[darklisted].comment;\n  const errObject = {\n    error: darklisted === -1 ? false : true,\n    msg: errMsg\n  };\n  return errObject;\n};\n\nconst stringToArray = str => {\n  return str.replace(/[^a-zA-Z0-9_,]+/g, '').split(',');\n};\n\nconst isContractArgValid = (value, solidityType) => {\n  if (!value) value = '';\n  if (solidityType.includes('[') && solidityType.includes(']')) {\n    const parsedValue = Array.isArray(value) ? value : stringToArray(value);\n    const values = [];\n    parsedValue.forEach(item => {\n      if (solidityType.includes(uint)) {\n        values.push(item !== '' && !isNaN(item) && isInt(item));\n      } else if (solidityType.includes(address)) {\n        values.push(isAddress(item));\n      } else if (solidityType.includes(string)) {\n        values.push(item !== '');\n      } else if (solidityType.includes(bool)) {\n        values.push(typeof item === typeof true || item === '');\n      } else if (solidityType.includes(bytes)) {\n        values.push(validateHexString(item));\n      }\n    });\n    return !values.includes(false);\n  }\n  if (solidityType === 'uint')\n    return value !== '' && !isNaN(value) && isInt(value);\n  if (solidityType === 'address') return isAddress(value);\n  if (solidityType === 'string') return true;\n  if (solidityType === 'bytes')\n    return value.substr(0, 2) === '0x' && validateHexString(value);\n  if (solidityType === 'bool')\n    return typeof value === typeof true || value === '';\n  return false;\n};\n\n\nexport default {\n  isJson,\n  doesExist,\n  padLeftEven,\n  formatDate,\n  isValidENSorEtherAddress,\n  isValidETHAddress,\n  sanitizeHex,\n  validateHexString,\n  scrollToTop,\n  isDarklisted,\n  solidityType,\n  isInt,\n  capitalize,\n  getService,\n  stringToArray,\n  isContractArgValid,\n  toBuffer\n};\n"]},"metadata":{},"sourceType":"module"}