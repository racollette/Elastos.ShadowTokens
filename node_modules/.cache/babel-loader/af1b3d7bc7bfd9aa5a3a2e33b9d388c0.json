{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar cnBase58 = require('./crypto/cnBase58');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\nvar addressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$');\nvar integratedAddressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$');\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes;\n\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes;\n  }\n\n  switch (networkType) {\n    case 'prod':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0];\n\n    case 'testnet':\n      return parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    case 'both':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0] || parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    default:\n      return false;\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null;\n  var res = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n  }\n\n  return res;\n}\n\nmodule.exports = {\n  isValidAddress: function (address, currency, networkType) {\n    networkType = networkType || DEFAULT_NETWORK_TYPE;\n    var addressType = 'standard';\n\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated';\n      } else {\n        return false;\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address);\n    if (!decodedAddrStr) return false;\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false;\n    var addrChecksum = decodedAddrStr.slice(-8);\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)));\n    return addrChecksum === hashChecksum;\n  }\n};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken2/node_modules/wallet-address-validator/src/monero_validator.js"],"names":["cryptoUtils","require","cnBase58","DEFAULT_NETWORK_TYPE","addressRegTest","RegExp","integratedAddressRegTest","validateNetwork","decoded","currency","networkType","addressType","network","addressTypes","iAddressTypes","parseInt","substr","prod","testnet","hextobin","hex","length","res","Uint8Array","i","slice","module","exports","isValidAddress","address","test","decodedAddrStr","decode","addrChecksum","hashChecksum","keccak256Checksum"],"mappings":"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","sourcesContent":["var cryptoUtils = require('./crypto/utils');\nvar cnBase58 = require('./crypto/cnBase58');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\nvar addressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$');\nvar integratedAddressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$');\n\nfunction validateNetwork(decoded, currency, networkType, addressType){\n    var network = currency.addressTypes;\n    if(addressType == 'integrated'){\n        network = currency.iAddressTypes;\n    }\n\n    switch(networkType){\n        case 'prod':\n            return parseInt(decoded.substr(0,2), 16) == network.prod[0];\n        case 'testnet':\n            return parseInt(decoded.substr(0,2), 16) == network.testnet[0];\n        case 'both':\n            return parseInt(decoded.substr(0,2), 16) == network.prod[0] || parseInt(decoded.substr(0,2), 16) == network.testnet[0];\n        default:\n            return false;\n    }\n}\n\nfunction hextobin(hex) {\n    if (hex.length % 2 !== 0) return null;\n    var res = new Uint8Array(hex.length / 2);\n    for (var i = 0; i < hex.length / 2; ++i) {\n        res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n    }\n    return res;\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, networkType) {\n        networkType = networkType || DEFAULT_NETWORK_TYPE;\n        var addressType = 'standard';\n        if(!addressRegTest.test(address)){\n            if(integratedAddressRegTest.test(address)){\n                addressType = 'integrated';\n            }\n            else{\n                return false;\n            }\n        }\n\n        var decodedAddrStr = cnBase58.decode(address);\n        if(!decodedAddrStr)\n            return false;\n\n        if(!validateNetwork(decodedAddrStr, currency, networkType, addressType))\n            return false;\n\n        var addrChecksum = decodedAddrStr.slice(-8);\n        var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)));\n        \n        return addrChecksum === hashChecksum;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}