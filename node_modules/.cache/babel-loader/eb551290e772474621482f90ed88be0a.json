{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BN = require('../crypto/bn');\n\nvar BufferUtil = require('../util/buffer');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar JSUtil = require('../util/js');\n\nvar $ = require('../util/preconditions'); // Mainnet 0x1f07ffff, Testnet 0x2007ffff\n\n\nvar GENESIS_BITS = 0x2007ffff;\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\n\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n\n  var info = BlockHeader._from(arg);\n\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.reserved = info.reserved;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n  this.solution = info.solution;\n\n  if (info.hash) {\n    $.checkState(this.hash === info.hash, 'Argument object hash property does not match block hash.');\n  }\n\n  return this;\n};\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\n\n\nBlockHeader._from = function _from(arg) {\n  var info = {};\n\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n\n  return info;\n};\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n  var reserved = data.reserved;\n  var nonce = data.nonce;\n  var solution = data.solution;\n\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(new Buffer(data.prevHash, 'hex'));\n  }\n\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(new Buffer(data.merkleRoot, 'hex'));\n  }\n\n  if (_.isString(data.reserved)) {\n    reserved = BufferUtil.reverse(new Buffer(data.reserved, 'hex'));\n  }\n\n  if (_.isString(data.nonce)) {\n    nonce = BufferUtil.reverse(new Buffer(data.nonce, 'hex'));\n  }\n\n  if (_.isString(data.solution)) {\n    solution = new Buffer(data.solution, 'hex');\n  }\n\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    reserved: reserved,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: nonce,\n    solution: solution\n  };\n  return info;\n};\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n\n  return new BlockHeader(info);\n};\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = new Buffer(data, 'binary');\n  }\n\n  var br = BufferReader(data);\n  br.pos = BlockHeader.Constants.START_OF_HEADER;\n\n  var info = BlockHeader._fromBufferReader(br);\n\n  return new BlockHeader(info);\n};\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n\n  return new BlockHeader(info);\n};\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromString = function fromString(str) {\n  var buf = new Buffer(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readUInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.reserved = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.read(32);\n  var lenSolution = br.readVarintNum();\n  info.solution = br.read(lenSolution);\n  return info;\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n\n  return new BlockHeader(info);\n};\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\n\n\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    reserved: BufferUtil.reverse(this.reserved).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: BufferUtil.reverse(this.nonce).toString('hex'),\n    solution: this.solution.toString('hex')\n  };\n};\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\n\n\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n\n  bw.writeUInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.write(this.reserved);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.write(this.nonce);\n  bw.writeVarintNum(this.solution.length);\n  bw.write(this.solution);\n  return bw;\n};\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\n\n\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n\n  return target;\n};\n/**\n * @link https://en.bitcoin.it/wiki/Difficulty\n * @return {Number}\n */\n\n\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));\n  var currentTargetBN = this.getTargetDifficulty();\n  var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);\n  var decimalPos = difficultyString.length - 8;\n  difficultyString = difficultyString.slice(0, decimalPos) + '.' + difficultyString.slice(decimalPos);\n  return parseFloat(difficultyString);\n};\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\n\n\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function () {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\n\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\n\n\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  var pow = new BN(this.id, 'hex');\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {string} - A string formatted for the console\n */\n\n\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8,\n  // Start buffer position in raw block data\n  MAX_TIME_OFFSET: 2 * 60 * 60,\n  // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\nmodule.exports = BlockHeader;","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/bitcore-lib-zcash/lib/block/blockheader.js"],"names":["_","require","BN","BufferUtil","BufferReader","BufferWriter","Hash","JSUtil","$","GENESIS_BITS","BlockHeader","arg","info","_from","version","prevHash","merkleRoot","reserved","time","timestamp","bits","nonce","solution","hash","checkState","isBuffer","_fromBufferReader","isObject","_fromObject","TypeError","data","checkArgument","isString","reverse","Buffer","fromObject","obj","fromRawBlock","br","pos","Constants","START_OF_HEADER","fromBuffer","buf","fromString","str","readUInt32LE","read","lenSolution","readVarintNum","fromBufferReader","prototype","toObject","toJSON","toString","toBuffer","toBufferWriter","concat","bw","writeUInt32LE","write","writeVarintNum","length","getTargetDifficulty","target","mov","mul","getDifficulty","difficulty1TargetBN","Math","pow","currentTargetBN","difficultyString","div","decimalPos","slice","parseFloat","_getHash","sha256sha256","idProperty","configurable","enumerable","get","_id","readReverse","set","noop","Object","defineProperty","validTimestamp","currentTime","round","Date","getTime","MAX_TIME_OFFSET","validProofOfWork","id","cmp","inspect","LARGEST_HASH","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar BN = require('../crypto/bn');\nvar BufferUtil = require('../util/buffer');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar JSUtil = require('../util/js');\nvar $ = require('../util/preconditions');\n\n// Mainnet 0x1f07ffff, Testnet 0x2007ffff\nvar GENESIS_BITS = 0x2007ffff;\n\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n  var info = BlockHeader._from(arg);\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.reserved = info.reserved;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n  this.solution = info.solution;\n\n  if (info.hash) {\n    $.checkState(\n      this.hash === info.hash,\n      'Argument object hash property does not match block hash.'\n    );\n  }\n\n  return this;\n};\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlockHeader._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n  var reserved = data.reserved;\n  var nonce = data.nonce;\n  var solution = data.solution;\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(new Buffer(data.prevHash, 'hex'));\n  }\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(new Buffer(data.merkleRoot, 'hex'));\n  }\n  if (_.isString(data.reserved)) {\n    reserved = BufferUtil.reverse(new Buffer(data.reserved, 'hex'));\n  }\n  if (_.isString(data.nonce)) {\n    nonce = BufferUtil.reverse(new Buffer(data.nonce, 'hex'));\n  }\n  if (_.isString(data.solution)) {\n    solution = new Buffer(data.solution, 'hex');\n  }\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    reserved: reserved,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: nonce,\n    solution: solution\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = new Buffer(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = BlockHeader.Constants.START_OF_HEADER;\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n  return new BlockHeader(info);\n};\n\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromString = function fromString(str) {\n  var buf = new Buffer(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readUInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.reserved = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.read(32);\n  var lenSolution = br.readVarintNum();\n  info.solution = br.read(lenSolution);\n  return info;\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    reserved: BufferUtil.reverse(this.reserved).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: BufferUtil.reverse(this.nonce).toString('hex'),\n    solution: this.solution.toString('hex')\n  };\n};\n\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.writeUInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.write(this.reserved);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.write(this.nonce);\n  bw.writeVarintNum(this.solution.length);\n  bw.write(this.solution);\n  return bw;\n};\n\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n  return target;\n};\n\n/**\n * @link https://en.bitcoin.it/wiki/Difficulty\n * @return {Number}\n */\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));\n  var currentTargetBN = this.getTargetDifficulty();\n\n  var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);\n  var decimalPos = difficultyString.length - 8;\n  difficultyString = difficultyString.slice(0, decimalPos) + '.' + difficultyString.slice(decimalPos);\n\n  return parseFloat(difficultyString);\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  var pow = new BN(this.id, 'hex');\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8, // Start buffer position in raw block data\n  MAX_TIME_OFFSET: 2 * 60 * 60, // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = BlockHeader;\n"]},"metadata":{},"sourceType":"script"}