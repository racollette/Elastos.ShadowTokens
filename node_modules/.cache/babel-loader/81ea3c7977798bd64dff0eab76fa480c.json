{"ast":null,"code":"import * as Sentry from \"@sentry/react\";\nimport Web3 from \"web3\";\nimport GatewayJS from \"@renproject/gateway\"; // import Box from '3box'\n\nimport Web3Modal from \"web3modal\";\nimport MEWconnect from \"@myetherwallet/mewconnect-web-client\";\nimport ELA from \"../assets/renBCH.svg\";\nimport ETH from \"../assets/eth.png\";\nimport { getStore } from \"../services/storeService\";\n// used for montoring balances\nlet walletDataInterval = null;\nexport const ASSETS = [\"BTC\", \"WBTC\"];\nexport const NAME_MAP = {\n  ela: \"Elastos\",\n  eth: \"Ethereum\",\n  weth: \"Wrapped Ethereum\"\n};\nexport const SYMBOL_MAP = {\n  ela: \"ELA\",\n  eth: \"ETH\",\n  weth: \"WETH\"\n};\nexport const NETWORK_MAP = {\n  ela: \"elastos\",\n  eth: \"ethereum\",\n  weth: \"elastos\"\n};\nexport const MINI_ICON_MAP = {\n  ela: ELA,\n  eth: ETH,\n  weth: ETH\n};\nexport const abbreviateAddress = function (walletAddress) {\n  if (!walletAddress || typeof walletAddress !== \"string\") {\n    return \"\";\n  } else {\n    return walletAddress.slice(0, 5) + \"...\" + walletAddress.slice(walletAddress.length - 5);\n  }\n};\n/**\n * Get External Data for Fees, Balances, etc.\n */\n\nexport const updateFees = async function () {\n  const store = getStore();\n\n  try {\n    const fees = await fetch(\"https://lightnode-mainnet.herokuapp.com\", {\n      method: \"POST\",\n      // or 'PUT'\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: 67,\n        jsonrpc: \"2.0\",\n        method: \"ren_queryFees\",\n        params: {}\n      })\n    });\n    const data = (await fees.json()).result;\n    store.set(\"fees\", data);\n  } catch (e) {\n    console.error(e);\n    Sentry.withScope(function (scope) {\n      scope.setTag(\"error-hint\", \"updating fees\");\n      Sentry.captureException(e);\n    });\n  }\n};\nexport const updateMarketData = async function () {\n  const store = getStore();\n\n  try {\n    const btc = await fetch(`https://api.coincap.io/v2/assets/bitcoin`, {\n      method: \"GET\"\n    });\n    store.set(\"btcusd\", (await btc.json()).data.priceUsd);\n  } catch (e) {\n    console.error(e);\n    Sentry.withScope(function (scope) {\n      scope.setTag(\"error-hint\", \"updating market data\");\n      Sentry.captureException(e);\n    });\n  }\n};\nexport const updateBalance = async function () {\n  const store = getStore();\n  const web3 = store.get(\"localWeb3\");\n  const walletAddress = store.get(\"localWeb3Address\");\n\n  if (!web3 || !walletAddress) {\n    return;\n  } // const renBTC = new web3.eth.Contract(erc20ABI, renBTCAddress);\n  // const renBTCBalance = await renBTC.methods.balanceOf(walletAddress).call();\n\n\n  const ethBal = await web3.eth.getBalance(walletAddress);\n  store.set(\"ethBalance\", Number(web3.utils.fromWei(ethBal)).toFixed(8)); // store.set(\n  //     \"renBTCBalance\",\n  //     Number(parseInt(renBTCBalance.toString()) / 10 ** 8).toFixed(8)\n  // );\n\n  store.set(\"loadingBalances\", false);\n  updateMarketData();\n};\nexport const watchWalletData = async function () {\n  const store = getStore();\n\n  if (walletDataInterval) {\n    clearInterval(walletDataInterval);\n  } // await updateAllowance()\n\n\n  await updateBalance();\n  walletDataInterval = setInterval(async () => {\n    // await updateAllowance()\n    await updateBalance();\n  }, 10 * 1000);\n};\nexport const initDataWeb3 = async function () {\n  const store = getStore();\n  const network = store.get(\"selectedNetwork\");\n  store.set(\"dataWeb3\", new Web3(`https://${network === \"testnet\" ? \"rinkeby\" : \"mainnet\"}.infura.io/v3/bd80ce1ca1f94da48e151bb6868bb150`));\n};\n/**\n * Connecting to Local Web3 Wallet\n */\n\nexport const initLocalWeb3 = async function (type) {\n  const store = getStore();\n  store.set(\"walletConnecting\", true); // already connected\n\n  if (store.get(\"localWeb3Address\")) {\n    return;\n  }\n\n  store.set(\"spaceError\", false);\n  const selectedNetwork = store.get(\"selectedNetwork\");\n  let web3;\n  let currentProvider;\n  let accounts = [];\n  let network = \"\";\n\n  try {\n    if (type === \"injected\" || !type) {\n      const providerOptions = {};\n      const web3Modal = new Web3Modal({\n        network: selectedNetwork === \"testnet\" ? \"rinkeby\" : \"mainnet\",\n        cacheProvider: false,\n        providerOptions\n      });\n      const web3Provider = await web3Modal.connect();\n      web3 = new Web3(web3Provider);\n      currentProvider = web3.currentProvider;\n      if (typeof currentProvider === \"string\") return;\n      if (!currentProvider) return;\n      accounts = await web3.eth.getAccounts();\n      const netId = await web3.eth.net.getId();\n\n      if (netId === 1) {\n        network = \"mainnet\";\n      } else if (netId === 4) {\n        network = \"testnet\";\n      }\n    } else if (type === \"mew-connect\") {\n      const chainId = selectedNetwork === \"testnet\" ? 42 : 1;\n      const jsonRpcUrl = `wss://${selectedNetwork === \"testnet\" ? \"rinkeby\" : \"mainnet\"}.infura.io/ws/v3/7117ca7a3c7b4b94b24944c1ef0ecec9`;\n      const mewConnect = new MEWconnect.Provider({\n        windowClosedError: true\n      });\n      const web3Provider = mewConnect.makeWeb3Provider(chainId, jsonRpcUrl, true);\n      web3 = new Web3(web3Provider);\n      currentProvider = web3.currentProvider;\n      if (typeof currentProvider === \"string\") return;\n      if (!currentProvider) return;\n      accounts = await web3Provider.enable();\n      network = selectedNetwork;\n    } else {\n      console.error(\"Invalid wallet type.\");\n      store.set(\"spaceError\", true);\n      store.set(\"spaceRequesting\", false);\n      store.set(\"walletConnecting\", false);\n      return;\n    }\n  } catch (e) {\n    console.error(e);\n    Sentry.withScope(function (scope) {\n      scope.setTag(\"error-hint\", \"web3 init\");\n      Sentry.captureException(e);\n    });\n    store.set(\"spaceError\", true);\n    store.set(\"spaceRequesting\", false);\n    store.set(\"walletConnecting\", false);\n    return;\n  }\n\n  const address = accounts[0];\n  const addressLowerCase = address.toLowerCase();\n  const db = store.get(\"db\");\n  const fns = store.get(\"fns\");\n\n  if (selectedNetwork !== network) {\n    store.set(\"showNetworkModal\", true);\n    store.set(\"spaceError\", true);\n    store.set(\"spaceRequesting\", false);\n    store.set(\"walletConnecting\", false);\n    return;\n  }\n\n  return;\n};\nexport const setAddresses = async function () {\n  const store = getStore();\n  const network = store.get(\"selectedNetwork\");\n\n  if (network === \"testnet\") {// store.set(\"renBTCAddress\", RENBTC_TEST);\n  } else {// store.set(\"renBTCAddress\", RENBTC_MAIN);\n    }\n};\nexport const setNetwork = async function (network) {\n  const store = getStore();\n  console.log('NETWORK CONNECTION');\n  console.log({\n    network\n  });\n  store.set(\"selectedNetwork\", network);\n  store.set(\"gjs\", new GatewayJS(network, {// If we want to test against gatewayjs staging, we should change the endpoint\n    // manually in a PR, which does not get merged, and check the preview build\n    // endpoint: \"https://ren-gatewayjs-staging.netlify.app/\",\n  })); // @ts-ignore\n\n  setAddresses.bind(this)();\n};\nexport default {};","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/src/utils/walletUtils.ts"],"names":["Sentry","Web3","GatewayJS","Web3Modal","MEWconnect","ETH","getStore","walletDataInterval","ASSETS","NAME_MAP","ela","eth","weth","SYMBOL_MAP","NETWORK_MAP","MINI_ICON_MAP","ELA","abbreviateAddress","walletAddress","slice","length","updateFees","store","fees","fetch","method","headers","body","JSON","stringify","id","jsonrpc","params","data","json","result","set","e","console","error","withScope","scope","setTag","captureException","updateMarketData","btc","priceUsd","updateBalance","web3","get","ethBal","getBalance","Number","utils","fromWei","toFixed","watchWalletData","clearInterval","setInterval","initDataWeb3","network","initLocalWeb3","type","selectedNetwork","currentProvider","accounts","providerOptions","web3Modal","cacheProvider","web3Provider","connect","getAccounts","netId","net","getId","chainId","jsonRpcUrl","mewConnect","Provider","windowClosedError","makeWeb3Provider","enable","address","addressLowerCase","toLowerCase","db","fns","setAddresses","setNetwork","log","bind"],"mappings":"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","sourcesContent":["import * as Sentry from \"@sentry/react\";\n\nimport Web3 from \"web3\";\nimport GatewayJS from \"@renproject/gateway\";\n// import Box from '3box'\nimport Web3Modal from \"web3modal\";\nimport firebase from \"firebase\";\nimport MEWconnect from \"@myetherwallet/mewconnect-web-client\";\n\nimport ELA from \"../assets/renBCH.svg\"\nimport ETH from \"../assets/eth.png\";\n\nimport { getStore } from \"../services/storeService\";\nimport erc20ABI from \"./erc20ABI.json\";\nimport { recoverTrades } from \"./txUtils\";\nimport {\n    RENELA_MAIN,\n    RENELA_TEST,\n} from \"./web3Utils\";\n\n// used for montoring balances\nlet walletDataInterval: any = null;\n\nexport const ASSETS = [\"BTC\", \"WBTC\"];\n\nexport const NAME_MAP = {\n    ela: \"Elastos\",\n    eth: \"Ethereum\",\n    weth: \"Wrapped Ethereum\",\n};\n\nexport const SYMBOL_MAP = {\n    ela: \"ELA\",\n    eth: \"ETH\",\n    weth: \"WETH\",\n};\n\nexport const NETWORK_MAP = {\n    ela: \"elastos\",\n    eth: \"ethereum\",\n    weth: \"elastos\",\n};\n\nexport const MINI_ICON_MAP: { [key in string]: string } = {\n    ela: ELA,\n    eth: ETH,\n    weth: ETH,\n};\n\nexport const abbreviateAddress = function(walletAddress: string) {\n    if (!walletAddress || typeof walletAddress !== \"string\") {\n        return \"\";\n    } else {\n        return (\n            walletAddress.slice(0, 5) +\n            \"...\" +\n            walletAddress.slice(walletAddress.length - 5)\n        );\n    }\n};\n\n/**\n * Get External Data for Fees, Balances, etc.\n */\nexport const updateFees = async function() {\n    const store = getStore();\n    try {\n        const fees = await fetch(\"https://lightnode-mainnet.herokuapp.com\", {\n            method: \"POST\", // or 'PUT'\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                id: 67,\n                jsonrpc: \"2.0\",\n                method: \"ren_queryFees\",\n                params: {},\n            }),\n        });\n\n        const data = (await fees.json()).result;\n        store.set(\"fees\", data);\n    } catch (e) {\n        console.error(e);\n        Sentry.withScope(function(scope) {\n            scope.setTag(\"error-hint\", \"updating fees\");\n            Sentry.captureException(e);\n        });\n    }\n};\n\nexport const updateMarketData = async function() {\n    const store = getStore();\n\n    try {\n        const btc = await fetch(`https://api.coincap.io/v2/assets/bitcoin`, {\n            method: \"GET\",\n        });\n\n        store.set(\"btcusd\", (await btc.json()).data.priceUsd);\n    } catch (e) {\n        console.error(e);\n        Sentry.withScope(function(scope) {\n            scope.setTag(\"error-hint\", \"updating market data\");\n            Sentry.captureException(e);\n        });\n    }\n};\n\nexport const updateBalance = async function() {\n    const store = getStore();\n\n    const web3 = store.get(\"localWeb3\");\n    const walletAddress = store.get(\"localWeb3Address\");\n\n    if (!web3 || !walletAddress) {\n        return;\n    }\n\n    // const renBTC = new web3.eth.Contract(erc20ABI, renBTCAddress);\n    // const renBTCBalance = await renBTC.methods.balanceOf(walletAddress).call();\n\n    const ethBal = await web3.eth.getBalance(walletAddress);\n\n\n    store.set(\"ethBalance\", Number(web3.utils.fromWei(ethBal)).toFixed(8));\n    // store.set(\n    //     \"renBTCBalance\",\n    //     Number(parseInt(renBTCBalance.toString()) / 10 ** 8).toFixed(8)\n    // );\n    store.set(\"loadingBalances\", false);\n\n    updateMarketData();\n};\n\nexport const watchWalletData = async function() {\n    const store = getStore();\n    if (walletDataInterval) {\n        clearInterval(walletDataInterval);\n    }\n    // await updateAllowance()\n    await updateBalance();\n    walletDataInterval = setInterval(async () => {\n        // await updateAllowance()\n        await updateBalance();\n    }, 10 * 1000);\n};\n\nexport const initDataWeb3 = async function() {\n    const store = getStore();\n    const network = store.get(\"selectedNetwork\");\n    store.set(\n        \"dataWeb3\",\n        new Web3(\n            `https://${\n            network === \"testnet\" ? \"rinkeby\" : \"mainnet\"\n            }.infura.io/v3/bd80ce1ca1f94da48e151bb6868bb150`\n        )\n    );\n\n};\n\n/**\n * Connecting to Local Web3 Wallet\n */\nexport const initLocalWeb3 = async function(type: any) {\n    const store = getStore();\n    store.set(\"walletConnecting\", true);\n\n    // already connected\n    if (store.get(\"localWeb3Address\")) {\n        return;\n    }\n\n    store.set(\"spaceError\", false);\n    const selectedNetwork = store.get(\"selectedNetwork\");\n\n    let web3;\n    let currentProvider;\n    let accounts = [];\n    let network = \"\";\n\n    try {\n        if (type === \"injected\" || !type) {\n            const providerOptions = {};\n            const web3Modal = new Web3Modal({\n                network: selectedNetwork === \"testnet\" ? \"rinkeby\" : \"mainnet\",\n                cacheProvider: false,\n                providerOptions,\n            });\n            const web3Provider = await web3Modal.connect();\n\n            web3 = new Web3(web3Provider);\n            currentProvider = web3.currentProvider;\n            if (typeof currentProvider === \"string\") return;\n            if (!currentProvider) return;\n            accounts = await web3.eth.getAccounts();\n            const netId = await web3.eth.net.getId();\n            if (netId === 1) {\n                network = \"mainnet\";\n            } else if (netId === 4) {\n                network = \"testnet\";\n            }\n        } else if (type === \"mew-connect\") {\n            const chainId = selectedNetwork === \"testnet\" ? 42 : 1;\n            const jsonRpcUrl = `wss://${\n                selectedNetwork === \"testnet\" ? \"rinkeby\" : \"mainnet\"\n                }.infura.io/ws/v3/7117ca7a3c7b4b94b24944c1ef0ecec9`;\n\n            const mewConnect = new MEWconnect.Provider({\n                windowClosedError: true,\n            });\n            const web3Provider = mewConnect.makeWeb3Provider(\n                chainId,\n                jsonRpcUrl,\n                true\n            );\n\n            web3 = new Web3(web3Provider);\n            currentProvider = web3.currentProvider;\n\n            if (typeof currentProvider === \"string\") return;\n            if (!currentProvider) return;\n\n            accounts = await web3Provider.enable();\n            network = selectedNetwork;\n        } else {\n            console.error(\"Invalid wallet type.\");\n            store.set(\"spaceError\", true);\n            store.set(\"spaceRequesting\", false);\n            store.set(\"walletConnecting\", false);\n            return;\n        }\n    } catch (e) {\n        console.error(e);\n        Sentry.withScope(function(scope) {\n            scope.setTag(\"error-hint\", \"web3 init\");\n            Sentry.captureException(e);\n        });\n        store.set(\"spaceError\", true);\n        store.set(\"spaceRequesting\", false);\n        store.set(\"walletConnecting\", false);\n        return;\n    }\n\n    const address = accounts[0];\n    const addressLowerCase = address.toLowerCase();\n    const db = store.get(\"db\");\n    const fns = store.get(\"fns\");\n\n    if (selectedNetwork !== network) {\n        store.set(\"showNetworkModal\", true);\n        store.set(\"spaceError\", true);\n        store.set(\"spaceRequesting\", false);\n        store.set(\"walletConnecting\", false);\n        return;\n    }\n\n    return;\n};\n\nexport const setAddresses = async function() {\n    const store = getStore();\n    const network = store.get(\"selectedNetwork\");\n    if (network === \"testnet\") {\n        // store.set(\"renBTCAddress\", RENBTC_TEST);\n    } else {\n        // store.set(\"renBTCAddress\", RENBTC_MAIN);\n    }\n};\n\nexport const setNetwork = async function(network: any) {\n    const store = getStore();\n    console.log('NETWORK CONNECTION')\n    console.log({ network })\n    store.set(\"selectedNetwork\", network);\n    store.set(\n        \"gjs\",\n        new GatewayJS(network, {\n            // If we want to test against gatewayjs staging, we should change the endpoint\n            // manually in a PR, which does not get merged, and check the preview build\n            // endpoint: \"https://ren-gatewayjs-staging.netlify.app/\",\n        })\n    );\n    // @ts-ignore\n    setAddresses.bind(this)();\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}