{"ast":null,"code":"import misc from '../../helpers/misc';\nimport { toError, toPayload } from '../jsonrpc';\nimport utils from 'ethereumjs-util';\nexport default (async ({\n  payload\n}, res, next) => {\n  if (payload.method !== 'personal_ecRecover') return next();\n\n  if (payload.params.length < 2) {\n    res(toError(payload.id, `personal_ecRecover expects 2 parameters.  Received ${payload.params.length} `));\n  }\n\n  const parts = utils.fromRpcSig(payload.params[1]);\n\n  if (!parts) {\n    res(toError(payload.id, 'Invalid signature supplied to personal_ecRecover'));\n  }\n\n  const recovered = utils.ecrecover(utils.hashPersonalMessage(misc.toBuffer(payload.params[0])), parts.v, parts.r, parts.s);\n  const addressBuffer = utils.pubToAddress(recovered);\n  res(null, toPayload(payload.id, '0x' + addressBuffer.toString('hex')));\n});","map":{"version":3,"sources":["/home/ryan/dev/defi/shadowtoken/node_modules/@myetherwallet/mewconnect-web-client/src/connectProvider/web3Provider/web3-provider/methods/personal_ecRecover.js"],"names":["misc","toError","toPayload","utils","payload","res","next","method","params","length","id","parts","fromRpcSig","recovered","ecrecover","hashPersonalMessage","toBuffer","v","r","s","addressBuffer","pubToAddress","toString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,YAAnC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,gBAAe,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAoBC,GAApB,EAAyBC,IAAzB,KAAkC;AAC/C,MAAIF,OAAO,CAACG,MAAR,KAAmB,oBAAvB,EAA6C,OAAOD,IAAI,EAAX;;AAC7C,MAAIF,OAAO,CAACI,MAAR,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BJ,IAAAA,GAAG,CACDJ,OAAO,CACLG,OAAO,CAACM,EADH,EAEJ,sDAAqDN,OAAO,CAACI,MAAR,CAAeC,MAAO,GAFvE,CADN,CAAH;AAMD;;AACD,QAAME,KAAK,GAAGR,KAAK,CAACS,UAAN,CAAiBR,OAAO,CAACI,MAAR,CAAe,CAAf,CAAjB,CAAd;;AACA,MAAI,CAACG,KAAL,EAAY;AACVN,IAAAA,GAAG,CACDJ,OAAO,CAACG,OAAO,CAACM,EAAT,EAAa,kDAAb,CADN,CAAH;AAGD;;AACD,QAAMG,SAAS,GAAGV,KAAK,CAACW,SAAN,CAChBX,KAAK,CAACY,mBAAN,CAA0Bf,IAAI,CAACgB,QAAL,CAAcZ,OAAO,CAACI,MAAR,CAAe,CAAf,CAAd,CAA1B,CADgB,EAEhBG,KAAK,CAACM,CAFU,EAGhBN,KAAK,CAACO,CAHU,EAIhBP,KAAK,CAACQ,CAJU,CAAlB;AAMA,QAAMC,aAAa,GAAGjB,KAAK,CAACkB,YAAN,CAAmBR,SAAnB,CAAtB;AACAR,EAAAA,GAAG,CAAC,IAAD,EAAOH,SAAS,CAACE,OAAO,CAACM,EAAT,EAAa,OAAOU,aAAa,CAACE,QAAd,CAAuB,KAAvB,CAApB,CAAhB,CAAH;AACD,CAxBD","sourcesContent":["import misc from '../../helpers/misc';\nimport { toError, toPayload } from '../jsonrpc';\nimport utils from 'ethereumjs-util';\n\nexport default async ({ payload }, res, next) => {\n  if (payload.method !== 'personal_ecRecover') return next();\n  if (payload.params.length < 2) {\n    res(\n      toError(\n        payload.id,\n        `personal_ecRecover expects 2 parameters.  Received ${payload.params.length} `\n      )\n    );\n  }\n  const parts = utils.fromRpcSig(payload.params[1]);\n  if (!parts) {\n    res(\n      toError(payload.id, 'Invalid signature supplied to personal_ecRecover')\n    );\n  }\n  const recovered = utils.ecrecover(\n    utils.hashPersonalMessage(misc.toBuffer(payload.params[0])),\n    parts.v,\n    parts.r,\n    parts.s\n  );\n  const addressBuffer = utils.pubToAddress(recovered);\n  res(null, toPayload(payload.id, '0x' + addressBuffer.toString('hex')));\n};\n"]},"metadata":{},"sourceType":"module"}